
Numpad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800597c  0800597c  0001597c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a64  08005a64  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  08005a64  08005a64  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a64  08005a64  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a64  08005a64  00015a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a68  08005a68  00015a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08005a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  2000010c  08005b78  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  08005b78  000207a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012701  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a55  00000000  00000000  00032835  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f8  00000000  00000000  00035290  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007d0  00000000  00000000  00035b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000184d7  00000000  00000000  00036358  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000baa4  00000000  00000000  0004e82f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075d45  00000000  00000000  0005a2d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0018  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d88  00000000  00000000  000d0094  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000010c 	.word	0x2000010c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005964 	.word	0x08005964

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000110 	.word	0x20000110
 8000104:	08005964 	.word	0x08005964

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f004 fe25 	bl	8004e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f003 f8dc 	bl	800340c <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f90d 	bl	8000482 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8e1 	bl	8000438 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000140 	.word	0x20000140

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000140 	.word	0x20000140

080002ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b4:	f7ff fff0 	bl	8000298 <HAL_GetTick>
 80002b8:	0003      	movs	r3, r0
 80002ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	d002      	beq.n	80002cc <HAL_Delay+0x20>
  {
     wait++;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	f7ff ffe3 	bl	8000298 <HAL_GetTick>
 80002d2:	0002      	movs	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d8f7      	bhi.n	80002ce <HAL_Delay+0x22>
  {
  }
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	0002      	movs	r2, r0
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002f4:	1dfb      	adds	r3, r7, #7
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	001a      	movs	r2, r3
 80002fa:	231f      	movs	r3, #31
 80002fc:	401a      	ands	r2, r3
 80002fe:	4b04      	ldr	r3, [pc, #16]	; (8000310 <NVIC_EnableIRQ+0x28>)
 8000300:	2101      	movs	r1, #1
 8000302:	4091      	lsls	r1, r2
 8000304:	000a      	movs	r2, r1
 8000306:	601a      	str	r2, [r3, #0]
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b002      	add	sp, #8
 800030e:	bd80      	pop	{r7, pc}
 8000310:	e000e100 	.word	0xe000e100

08000314 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	0002      	movs	r2, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	1dfb      	adds	r3, r7, #7
 8000320:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000322:	1dfb      	adds	r3, r7, #7
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b7f      	cmp	r3, #127	; 0x7f
 8000328:	d932      	bls.n	8000390 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800032a:	4a2f      	ldr	r2, [pc, #188]	; (80003e8 <NVIC_SetPriority+0xd4>)
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	0019      	movs	r1, r3
 8000332:	230f      	movs	r3, #15
 8000334:	400b      	ands	r3, r1
 8000336:	3b08      	subs	r3, #8
 8000338:	089b      	lsrs	r3, r3, #2
 800033a:	3306      	adds	r3, #6
 800033c:	009b      	lsls	r3, r3, #2
 800033e:	18d3      	adds	r3, r2, r3
 8000340:	3304      	adds	r3, #4
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	1dfa      	adds	r2, r7, #7
 8000346:	7812      	ldrb	r2, [r2, #0]
 8000348:	0011      	movs	r1, r2
 800034a:	2203      	movs	r2, #3
 800034c:	400a      	ands	r2, r1
 800034e:	00d2      	lsls	r2, r2, #3
 8000350:	21ff      	movs	r1, #255	; 0xff
 8000352:	4091      	lsls	r1, r2
 8000354:	000a      	movs	r2, r1
 8000356:	43d2      	mvns	r2, r2
 8000358:	401a      	ands	r2, r3
 800035a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	019b      	lsls	r3, r3, #6
 8000360:	22ff      	movs	r2, #255	; 0xff
 8000362:	401a      	ands	r2, r3
 8000364:	1dfb      	adds	r3, r7, #7
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	0018      	movs	r0, r3
 800036a:	2303      	movs	r3, #3
 800036c:	4003      	ands	r3, r0
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000372:	481d      	ldr	r0, [pc, #116]	; (80003e8 <NVIC_SetPriority+0xd4>)
 8000374:	1dfb      	adds	r3, r7, #7
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	001c      	movs	r4, r3
 800037a:	230f      	movs	r3, #15
 800037c:	4023      	ands	r3, r4
 800037e:	3b08      	subs	r3, #8
 8000380:	089b      	lsrs	r3, r3, #2
 8000382:	430a      	orrs	r2, r1
 8000384:	3306      	adds	r3, #6
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	18c3      	adds	r3, r0, r3
 800038a:	3304      	adds	r3, #4
 800038c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800038e:	e027      	b.n	80003e0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000390:	4a16      	ldr	r2, [pc, #88]	; (80003ec <NVIC_SetPriority+0xd8>)
 8000392:	1dfb      	adds	r3, r7, #7
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	b25b      	sxtb	r3, r3
 8000398:	089b      	lsrs	r3, r3, #2
 800039a:	33c0      	adds	r3, #192	; 0xc0
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	589b      	ldr	r3, [r3, r2]
 80003a0:	1dfa      	adds	r2, r7, #7
 80003a2:	7812      	ldrb	r2, [r2, #0]
 80003a4:	0011      	movs	r1, r2
 80003a6:	2203      	movs	r2, #3
 80003a8:	400a      	ands	r2, r1
 80003aa:	00d2      	lsls	r2, r2, #3
 80003ac:	21ff      	movs	r1, #255	; 0xff
 80003ae:	4091      	lsls	r1, r2
 80003b0:	000a      	movs	r2, r1
 80003b2:	43d2      	mvns	r2, r2
 80003b4:	401a      	ands	r2, r3
 80003b6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	019b      	lsls	r3, r3, #6
 80003bc:	22ff      	movs	r2, #255	; 0xff
 80003be:	401a      	ands	r2, r3
 80003c0:	1dfb      	adds	r3, r7, #7
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	0018      	movs	r0, r3
 80003c6:	2303      	movs	r3, #3
 80003c8:	4003      	ands	r3, r0
 80003ca:	00db      	lsls	r3, r3, #3
 80003cc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003ce:	4807      	ldr	r0, [pc, #28]	; (80003ec <NVIC_SetPriority+0xd8>)
 80003d0:	1dfb      	adds	r3, r7, #7
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	b25b      	sxtb	r3, r3
 80003d6:	089b      	lsrs	r3, r3, #2
 80003d8:	430a      	orrs	r2, r1
 80003da:	33c0      	adds	r3, #192	; 0xc0
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	501a      	str	r2, [r3, r0]
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b003      	add	sp, #12
 80003e6:	bd90      	pop	{r4, r7, pc}
 80003e8:	e000ed00 	.word	0xe000ed00
 80003ec:	e000e100 	.word	0xe000e100

080003f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <SysTick_Config+0x40>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d901      	bls.n	8000406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000402:	2301      	movs	r3, #1
 8000404:	e010      	b.n	8000428 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <SysTick_Config+0x44>)
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	3a01      	subs	r2, #1
 800040c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800040e:	2301      	movs	r3, #1
 8000410:	425b      	negs	r3, r3
 8000412:	2103      	movs	r1, #3
 8000414:	0018      	movs	r0, r3
 8000416:	f7ff ff7d 	bl	8000314 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <SysTick_Config+0x44>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000420:	4b04      	ldr	r3, [pc, #16]	; (8000434 <SysTick_Config+0x44>)
 8000422:	2207      	movs	r2, #7
 8000424:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000426:	2300      	movs	r3, #0
}
 8000428:	0018      	movs	r0, r3
 800042a:	46bd      	mov	sp, r7
 800042c:	b002      	add	sp, #8
 800042e:	bd80      	pop	{r7, pc}
 8000430:	00ffffff 	.word	0x00ffffff
 8000434:	e000e010 	.word	0xe000e010

08000438 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	60b9      	str	r1, [r7, #8]
 8000440:	607a      	str	r2, [r7, #4]
 8000442:	210f      	movs	r1, #15
 8000444:	187b      	adds	r3, r7, r1
 8000446:	1c02      	adds	r2, r0, #0
 8000448:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800044a:	68ba      	ldr	r2, [r7, #8]
 800044c:	187b      	adds	r3, r7, r1
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	b25b      	sxtb	r3, r3
 8000452:	0011      	movs	r1, r2
 8000454:	0018      	movs	r0, r3
 8000456:	f7ff ff5d 	bl	8000314 <NVIC_SetPriority>
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b004      	add	sp, #16
 8000460:	bd80      	pop	{r7, pc}

08000462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b082      	sub	sp, #8
 8000466:	af00      	add	r7, sp, #0
 8000468:	0002      	movs	r2, r0
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b25b      	sxtb	r3, r3
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff ff37 	bl	80002e8 <NVIC_EnableIRQ>
}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b002      	add	sp, #8
 8000480:	bd80      	pop	{r7, pc}

08000482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	0018      	movs	r0, r3
 800048e:	f7ff ffaf 	bl	80003f0 <SysTick_Config>
 8000492:	0003      	movs	r3, r0
}
 8000494:	0018      	movs	r0, r3
 8000496:	46bd      	mov	sp, r7
 8000498:	b002      	add	sp, #8
 800049a:	bd80      	pop	{r7, pc}

0800049c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004aa:	2300      	movs	r3, #0
 80004ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004b2:	e155      	b.n	8000760 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2101      	movs	r1, #1
 80004ba:	697a      	ldr	r2, [r7, #20]
 80004bc:	4091      	lsls	r1, r2
 80004be:	000a      	movs	r2, r1
 80004c0:	4013      	ands	r3, r2
 80004c2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d100      	bne.n	80004cc <HAL_GPIO_Init+0x30>
 80004ca:	e146      	b.n	800075a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	2b02      	cmp	r3, #2
 80004d2:	d003      	beq.n	80004dc <HAL_GPIO_Init+0x40>
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	2b12      	cmp	r3, #18
 80004da:	d123      	bne.n	8000524 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	08da      	lsrs	r2, r3, #3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	3208      	adds	r2, #8
 80004e4:	0092      	lsls	r2, r2, #2
 80004e6:	58d3      	ldr	r3, [r2, r3]
 80004e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	2207      	movs	r2, #7
 80004ee:	4013      	ands	r3, r2
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	220f      	movs	r2, #15
 80004f4:	409a      	lsls	r2, r3
 80004f6:	0013      	movs	r3, r2
 80004f8:	43da      	mvns	r2, r3
 80004fa:	693b      	ldr	r3, [r7, #16]
 80004fc:	4013      	ands	r3, r2
 80004fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	691a      	ldr	r2, [r3, #16]
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	2107      	movs	r1, #7
 8000508:	400b      	ands	r3, r1
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	409a      	lsls	r2, r3
 800050e:	0013      	movs	r3, r2
 8000510:	693a      	ldr	r2, [r7, #16]
 8000512:	4313      	orrs	r3, r2
 8000514:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	08da      	lsrs	r2, r3, #3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3208      	adds	r2, #8
 800051e:	0092      	lsls	r2, r2, #2
 8000520:	6939      	ldr	r1, [r7, #16]
 8000522:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	2203      	movs	r2, #3
 8000530:	409a      	lsls	r2, r3
 8000532:	0013      	movs	r3, r2
 8000534:	43da      	mvns	r2, r3
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	4013      	ands	r3, r2
 800053a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	2203      	movs	r2, #3
 8000542:	401a      	ands	r2, r3
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	409a      	lsls	r2, r3
 800054a:	0013      	movs	r3, r2
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	4313      	orrs	r3, r2
 8000550:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	693a      	ldr	r2, [r7, #16]
 8000556:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d00b      	beq.n	8000578 <HAL_GPIO_Init+0xdc>
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	2b02      	cmp	r3, #2
 8000566:	d007      	beq.n	8000578 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800056c:	2b11      	cmp	r3, #17
 800056e:	d003      	beq.n	8000578 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	2b12      	cmp	r3, #18
 8000576:	d130      	bne.n	80005da <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	2203      	movs	r2, #3
 8000584:	409a      	lsls	r2, r3
 8000586:	0013      	movs	r3, r2
 8000588:	43da      	mvns	r2, r3
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	4013      	ands	r3, r2
 800058e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	68da      	ldr	r2, [r3, #12]
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	409a      	lsls	r2, r3
 800059a:	0013      	movs	r3, r2
 800059c:	693a      	ldr	r2, [r7, #16]
 800059e:	4313      	orrs	r3, r2
 80005a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	693a      	ldr	r2, [r7, #16]
 80005a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80005ae:	2201      	movs	r2, #1
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	409a      	lsls	r2, r3
 80005b4:	0013      	movs	r3, r2
 80005b6:	43da      	mvns	r2, r3
 80005b8:	693b      	ldr	r3, [r7, #16]
 80005ba:	4013      	ands	r3, r2
 80005bc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	091b      	lsrs	r3, r3, #4
 80005c4:	2201      	movs	r2, #1
 80005c6:	401a      	ands	r2, r3
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	409a      	lsls	r2, r3
 80005cc:	0013      	movs	r3, r2
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	2203      	movs	r2, #3
 80005e6:	409a      	lsls	r2, r3
 80005e8:	0013      	movs	r3, r2
 80005ea:	43da      	mvns	r2, r3
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	4013      	ands	r3, r2
 80005f0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	409a      	lsls	r2, r3
 80005fc:	0013      	movs	r3, r2
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	4313      	orrs	r3, r2
 8000602:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	685a      	ldr	r2, [r3, #4]
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	055b      	lsls	r3, r3, #21
 8000612:	4013      	ands	r3, r2
 8000614:	d100      	bne.n	8000618 <HAL_GPIO_Init+0x17c>
 8000616:	e0a0      	b.n	800075a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000618:	4b57      	ldr	r3, [pc, #348]	; (8000778 <HAL_GPIO_Init+0x2dc>)
 800061a:	699a      	ldr	r2, [r3, #24]
 800061c:	4b56      	ldr	r3, [pc, #344]	; (8000778 <HAL_GPIO_Init+0x2dc>)
 800061e:	2101      	movs	r1, #1
 8000620:	430a      	orrs	r2, r1
 8000622:	619a      	str	r2, [r3, #24]
 8000624:	4b54      	ldr	r3, [pc, #336]	; (8000778 <HAL_GPIO_Init+0x2dc>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	2201      	movs	r2, #1
 800062a:	4013      	ands	r3, r2
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000630:	4a52      	ldr	r2, [pc, #328]	; (800077c <HAL_GPIO_Init+0x2e0>)
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	089b      	lsrs	r3, r3, #2
 8000636:	3302      	adds	r3, #2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	589b      	ldr	r3, [r3, r2]
 800063c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	2203      	movs	r2, #3
 8000642:	4013      	ands	r3, r2
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	220f      	movs	r2, #15
 8000648:	409a      	lsls	r2, r3
 800064a:	0013      	movs	r3, r2
 800064c:	43da      	mvns	r2, r3
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	4013      	ands	r3, r2
 8000652:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	2390      	movs	r3, #144	; 0x90
 8000658:	05db      	lsls	r3, r3, #23
 800065a:	429a      	cmp	r2, r3
 800065c:	d019      	beq.n	8000692 <HAL_GPIO_Init+0x1f6>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a47      	ldr	r2, [pc, #284]	; (8000780 <HAL_GPIO_Init+0x2e4>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d013      	beq.n	800068e <HAL_GPIO_Init+0x1f2>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a46      	ldr	r2, [pc, #280]	; (8000784 <HAL_GPIO_Init+0x2e8>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d00d      	beq.n	800068a <HAL_GPIO_Init+0x1ee>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a45      	ldr	r2, [pc, #276]	; (8000788 <HAL_GPIO_Init+0x2ec>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d007      	beq.n	8000686 <HAL_GPIO_Init+0x1ea>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a44      	ldr	r2, [pc, #272]	; (800078c <HAL_GPIO_Init+0x2f0>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d101      	bne.n	8000682 <HAL_GPIO_Init+0x1e6>
 800067e:	2304      	movs	r3, #4
 8000680:	e008      	b.n	8000694 <HAL_GPIO_Init+0x1f8>
 8000682:	2305      	movs	r3, #5
 8000684:	e006      	b.n	8000694 <HAL_GPIO_Init+0x1f8>
 8000686:	2303      	movs	r3, #3
 8000688:	e004      	b.n	8000694 <HAL_GPIO_Init+0x1f8>
 800068a:	2302      	movs	r3, #2
 800068c:	e002      	b.n	8000694 <HAL_GPIO_Init+0x1f8>
 800068e:	2301      	movs	r3, #1
 8000690:	e000      	b.n	8000694 <HAL_GPIO_Init+0x1f8>
 8000692:	2300      	movs	r3, #0
 8000694:	697a      	ldr	r2, [r7, #20]
 8000696:	2103      	movs	r1, #3
 8000698:	400a      	ands	r2, r1
 800069a:	0092      	lsls	r2, r2, #2
 800069c:	4093      	lsls	r3, r2
 800069e:	693a      	ldr	r2, [r7, #16]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80006a4:	4935      	ldr	r1, [pc, #212]	; (800077c <HAL_GPIO_Init+0x2e0>)
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	089b      	lsrs	r3, r3, #2
 80006aa:	3302      	adds	r3, #2
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	693a      	ldr	r2, [r7, #16]
 80006b0:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006b2:	4b37      	ldr	r3, [pc, #220]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	43da      	mvns	r2, r3
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	4013      	ands	r3, r2
 80006c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	685a      	ldr	r2, [r3, #4]
 80006c6:	2380      	movs	r3, #128	; 0x80
 80006c8:	025b      	lsls	r3, r3, #9
 80006ca:	4013      	ands	r3, r2
 80006cc:	d003      	beq.n	80006d6 <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006d6:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 80006d8:	693a      	ldr	r2, [r7, #16]
 80006da:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80006dc:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	43da      	mvns	r2, r3
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	4013      	ands	r3, r2
 80006ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	685a      	ldr	r2, [r3, #4]
 80006f0:	2380      	movs	r3, #128	; 0x80
 80006f2:	029b      	lsls	r3, r3, #10
 80006f4:	4013      	ands	r3, r2
 80006f6:	d003      	beq.n	8000700 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 80006f8:	693a      	ldr	r2, [r7, #16]
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000700:	4b23      	ldr	r3, [pc, #140]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000706:	4b22      	ldr	r3, [pc, #136]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	43da      	mvns	r2, r3
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	4013      	ands	r3, r2
 8000714:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	035b      	lsls	r3, r3, #13
 800071e:	4013      	ands	r3, r2
 8000720:	d003      	beq.n	800072a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4313      	orrs	r3, r2
 8000728:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 800072c:	693a      	ldr	r2, [r7, #16]
 800072e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	43da      	mvns	r2, r3
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	4013      	ands	r3, r2
 800073e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	685a      	ldr	r2, [r3, #4]
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	039b      	lsls	r3, r3, #14
 8000748:	4013      	ands	r3, r2
 800074a:	d003      	beq.n	8000754 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 800074c:	693a      	ldr	r2, [r7, #16]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	4313      	orrs	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <HAL_GPIO_Init+0x2f4>)
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	3301      	adds	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	40da      	lsrs	r2, r3
 8000768:	1e13      	subs	r3, r2, #0
 800076a:	d000      	beq.n	800076e <HAL_GPIO_Init+0x2d2>
 800076c:	e6a2      	b.n	80004b4 <HAL_GPIO_Init+0x18>
  } 
}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b006      	add	sp, #24
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	40021000 	.word	0x40021000
 800077c:	40010000 	.word	0x40010000
 8000780:	48000400 	.word	0x48000400
 8000784:	48000800 	.word	0x48000800
 8000788:	48000c00 	.word	0x48000c00
 800078c:	48001000 	.word	0x48001000
 8000790:	40010400 	.word	0x40010400

08000794 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	000a      	movs	r2, r1
 800079e:	1cbb      	adds	r3, r7, #2
 80007a0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	691b      	ldr	r3, [r3, #16]
 80007a6:	1cba      	adds	r2, r7, #2
 80007a8:	8812      	ldrh	r2, [r2, #0]
 80007aa:	4013      	ands	r3, r2
 80007ac:	d004      	beq.n	80007b8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80007ae:	230f      	movs	r3, #15
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	2201      	movs	r2, #1
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	e003      	b.n	80007c0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80007b8:	230f      	movs	r3, #15
 80007ba:	18fb      	adds	r3, r7, r3
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80007c0:	230f      	movs	r3, #15
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	781b      	ldrb	r3, [r3, #0]
  }
 80007c6:	0018      	movs	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b004      	add	sp, #16
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
 80007d6:	0008      	movs	r0, r1
 80007d8:	0011      	movs	r1, r2
 80007da:	1cbb      	adds	r3, r7, #2
 80007dc:	1c02      	adds	r2, r0, #0
 80007de:	801a      	strh	r2, [r3, #0]
 80007e0:	1c7b      	adds	r3, r7, #1
 80007e2:	1c0a      	adds	r2, r1, #0
 80007e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007e6:	1c7b      	adds	r3, r7, #1
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d004      	beq.n	80007f8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007ee:	1cbb      	adds	r3, r7, #2
 80007f0:	881a      	ldrh	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007f6:	e003      	b.n	8000800 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007f8:	1cbb      	adds	r3, r7, #2
 80007fa:	881a      	ldrh	r2, [r3, #0]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	b002      	add	sp, #8
 8000806:	bd80      	pop	{r7, pc}

08000808 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]

  uint32_t wInterrupt_Mask = 0U;
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d101      	bne.n	8000822 <HAL_PCD_Init+0x1a>
  {
    return HAL_ERROR;
 800081e:	2301      	movs	r3, #1
 8000820:	e0de      	b.n	80009e0 <HAL_PCD_Init+0x1d8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	23ea      	movs	r3, #234	; 0xea
 8000826:	33ff      	adds	r3, #255	; 0xff
 8000828:	5cd3      	ldrb	r3, [r2, r3]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	d108      	bne.n	8000842 <HAL_PCD_Init+0x3a>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	23f4      	movs	r3, #244	; 0xf4
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	2100      	movs	r1, #0
 8000838:	54d1      	strb	r1, [r2, r3]
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	0018      	movs	r0, r3
 800083e:	f004 fbd7 	bl	8004ff0 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	23ea      	movs	r3, #234	; 0xea
 8000846:	33ff      	adds	r3, #255	; 0xff
 8000848:	2103      	movs	r1, #3
 800084a:	54d1      	strb	r1, [r2, r3]
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	e043      	b.n	80008da <HAL_PCD_Init+0xd2>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000852:	6879      	ldr	r1, [r7, #4]
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	2029      	movs	r0, #41	; 0x29
 8000858:	0013      	movs	r3, r2
 800085a:	00db      	lsls	r3, r3, #3
 800085c:	1a9b      	subs	r3, r3, r2
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	18cb      	adds	r3, r1, r3
 8000862:	181b      	adds	r3, r3, r0
 8000864:	2201      	movs	r2, #1
 8000866:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	b2dc      	uxtb	r4, r3
 800086c:	6879      	ldr	r1, [r7, #4]
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	2028      	movs	r0, #40	; 0x28
 8000872:	0013      	movs	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	1a9b      	subs	r3, r3, r2
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	18cb      	adds	r3, r1, r3
 800087c:	181b      	adds	r3, r3, r0
 800087e:	1c22      	adds	r2, r4, #0
 8000880:	701a      	strb	r2, [r3, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	202b      	movs	r0, #43	; 0x2b
 8000888:	0013      	movs	r3, r2
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	1a9b      	subs	r3, r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	18cb      	adds	r3, r1, r3
 8000892:	181b      	adds	r3, r3, r0
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0U;
 8000898:	6879      	ldr	r1, [r7, #4]
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	0013      	movs	r3, r2
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	1a9b      	subs	r3, r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	18cb      	adds	r3, r1, r3
 80008a6:	3334      	adds	r3, #52	; 0x34
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	0013      	movs	r3, r2
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	1a9b      	subs	r3, r3, r2
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	18cb      	adds	r3, r1, r3
 80008ba:	3338      	adds	r3, #56	; 0x38
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 80008c0:	6879      	ldr	r1, [r7, #4]
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	0013      	movs	r3, r2
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	1a9b      	subs	r3, r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	18cb      	adds	r3, r1, r3
 80008ce:	333c      	adds	r3, #60	; 0x3c
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	3301      	adds	r3, #1
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d3b6      	bcc.n	8000852 <HAL_PCD_Init+0x4a>
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	e04e      	b.n	8000988 <HAL_PCD_Init+0x180>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	68fa      	ldr	r2, [r7, #12]
 80008ee:	230a      	movs	r3, #10
 80008f0:	33ff      	adds	r3, #255	; 0xff
 80008f2:	0019      	movs	r1, r3
 80008f4:	0013      	movs	r3, r2
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	1a9b      	subs	r3, r3, r2
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	18c3      	adds	r3, r0, r3
 80008fe:	185b      	adds	r3, r3, r1
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	b2dc      	uxtb	r4, r3
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	2384      	movs	r3, #132	; 0x84
 800090e:	0059      	lsls	r1, r3, #1
 8000910:	0013      	movs	r3, r2
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	1a9b      	subs	r3, r3, r2
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	18c3      	adds	r3, r0, r3
 800091a:	185b      	adds	r3, r3, r1
 800091c:	1c22      	adds	r2, r4, #0
 800091e:	701a      	strb	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	230c      	movs	r3, #12
 8000926:	33ff      	adds	r3, #255	; 0xff
 8000928:	0019      	movs	r1, r3
 800092a:	0013      	movs	r3, r2
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	1a9b      	subs	r3, r3, r2
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	18c3      	adds	r3, r0, r3
 8000934:	185b      	adds	r3, r3, r1
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	238a      	movs	r3, #138	; 0x8a
 8000940:	0059      	lsls	r1, r3, #1
 8000942:	0013      	movs	r3, r2
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	1a9b      	subs	r3, r3, r2
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	18c3      	adds	r3, r0, r3
 800094c:	185b      	adds	r3, r3, r1
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	238c      	movs	r3, #140	; 0x8c
 8000958:	0059      	lsls	r1, r3, #1
 800095a:	0013      	movs	r3, r2
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	1a9b      	subs	r3, r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	18c3      	adds	r3, r0, r3
 8000964:	185b      	adds	r3, r3, r1
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	238e      	movs	r3, #142	; 0x8e
 8000970:	0059      	lsls	r1, r3, #1
 8000972:	0013      	movs	r3, r2
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	1a9b      	subs	r3, r3, r2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	18c3      	adds	r3, r0, r3
 800097c:	185b      	adds	r3, r3, r1
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3301      	adds	r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	68fa      	ldr	r2, [r7, #12]
 800098e:	429a      	cmp	r2, r3
 8000990:	d3ab      	bcc.n	80008ea <HAL_PCD_Init+0xe2>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2240      	movs	r2, #64	; 0x40
 8000998:	2101      	movs	r1, #1
 800099a:	5299      	strh	r1, [r3, r2]
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2240      	movs	r2, #64	; 0x40
 80009a2:	2100      	movs	r1, #0
 80009a4:	5299      	strh	r1, [r3, r2]
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2244      	movs	r2, #68	; 0x44
 80009ac:	2100      	movs	r1, #0
 80009ae:	5299      	strh	r1, [r3, r2]
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2250      	movs	r2, #80	; 0x50
 80009b6:	2100      	movs	r1, #0
 80009b8:	5299      	strh	r1, [r3, r2]
  
  /*set wInterrupt_Mask global variable*/
 wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 80009ba:	23bf      	movs	r3, #191	; 0xbf
 80009bc:	021b      	lsls	r3, r3, #8
 80009be:	60bb      	str	r3, [r7, #8]
   | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	68ba      	ldr	r2, [r7, #8]
 80009c6:	b291      	uxth	r1, r2
 80009c8:	2240      	movs	r2, #64	; 0x40
 80009ca:	5299      	strh	r1, [r3, r2]
  
  hpcd->USB_Address = 0U;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2224      	movs	r2, #36	; 0x24
 80009d0:	2100      	movs	r1, #0
 80009d2:	5499      	strb	r1, [r3, r2]
  hpcd->State= HAL_PCD_STATE_READY;
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	23ea      	movs	r3, #234	; 0xea
 80009d8:	33ff      	adds	r3, #255	; 0xff
 80009da:	2101      	movs	r1, #1
 80009dc:	54d1      	strb	r1, [r2, r3]

 return HAL_OK;
 80009de:	2300      	movs	r3, #0
}
 80009e0:	0018      	movs	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b005      	add	sp, #20
 80009e6:	bd90      	pop	{r4, r7, pc}

080009e8 <HAL_PCD_Start>:
  * @brief  Start the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-Down bit to Connect internal pull-up on USB DP line */
  hpcd->Instance->BCDR |= USB_BCDR_DPPU;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2258      	movs	r2, #88	; 0x58
 80009f6:	5a9b      	ldrh	r3, [r3, r2]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4905      	ldr	r1, [pc, #20]	; (8000a14 <HAL_PCD_Start+0x2c>)
 8000a00:	430a      	orrs	r2, r1
 8000a02:	b291      	uxth	r1, r2
 8000a04:	2258      	movs	r2, #88	; 0x58
 8000a06:	5299      	strh	r1, [r3, r2]
  
  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b002      	add	sp, #8
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	ffff8000 	.word	0xffff8000

08000a18 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t wInterrupt_Mask = 0U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2244      	movs	r2, #68	; 0x44
 8000a2a:	5a9b      	ldrh	r3, [r3, r2]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	001a      	movs	r2, r3
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	021b      	lsls	r3, r3, #8
 8000a34:	401a      	ands	r2, r3
 8000a36:	2380      	movs	r3, #128	; 0x80
 8000a38:	021b      	lsls	r3, r3, #8
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d103      	bne.n	8000a46 <HAL_PCD_IRQHandler+0x2e>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	0018      	movs	r0, r3
 8000a42:	f001 fc37 	bl	80022b4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2244      	movs	r2, #68	; 0x44
 8000a4c:	5a9b      	ldrh	r3, [r3, r2]
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	001a      	movs	r2, r3
 8000a52:	2380      	movs	r3, #128	; 0x80
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	401a      	ands	r2, r3
 8000a58:	2380      	movs	r3, #128	; 0x80
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d114      	bne.n	8000a8a <HAL_PCD_IRQHandler+0x72>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2244      	movs	r2, #68	; 0x44
 8000a66:	5a9b      	ldrh	r3, [r3, r2]
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4977      	ldr	r1, [pc, #476]	; (8000c4c <HAL_PCD_IRQHandler+0x234>)
 8000a70:	400a      	ands	r2, r1
 8000a72:	b291      	uxth	r1, r2
 8000a74:	2244      	movs	r2, #68	; 0x44
 8000a76:	5299      	strh	r1, [r3, r2]
    HAL_PCD_ResetCallback(hpcd);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f004 fb41 	bl	8005102 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2100      	movs	r1, #0
 8000a84:	0018      	movs	r0, r3
 8000a86:	f000 f8ef 	bl	8000c68 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2244      	movs	r2, #68	; 0x44
 8000a90:	5a9b      	ldrh	r3, [r3, r2]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	001a      	movs	r2, r3
 8000a96:	2380      	movs	r3, #128	; 0x80
 8000a98:	01db      	lsls	r3, r3, #7
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	01db      	lsls	r3, r3, #7
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d10b      	bne.n	8000abc <HAL_PCD_IRQHandler+0xa4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2244      	movs	r2, #68	; 0x44
 8000aaa:	5a9b      	ldrh	r3, [r3, r2]
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4967      	ldr	r1, [pc, #412]	; (8000c50 <HAL_PCD_IRQHandler+0x238>)
 8000ab4:	400a      	ands	r2, r1
 8000ab6:	b291      	uxth	r1, r2
 8000ab8:	2244      	movs	r2, #68	; 0x44
 8000aba:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2244      	movs	r2, #68	; 0x44
 8000ac2:	5a9b      	ldrh	r3, [r3, r2]
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	2380      	movs	r3, #128	; 0x80
 8000aca:	019b      	lsls	r3, r3, #6
 8000acc:	401a      	ands	r2, r3
 8000ace:	2380      	movs	r3, #128	; 0x80
 8000ad0:	019b      	lsls	r3, r3, #6
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d10b      	bne.n	8000aee <HAL_PCD_IRQHandler+0xd6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2244      	movs	r2, #68	; 0x44
 8000adc:	5a9b      	ldrh	r3, [r3, r2]
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	495b      	ldr	r1, [pc, #364]	; (8000c54 <HAL_PCD_IRQHandler+0x23c>)
 8000ae6:	400a      	ands	r2, r1
 8000ae8:	b291      	uxth	r1, r2
 8000aea:	2244      	movs	r2, #68	; 0x44
 8000aec:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2244      	movs	r2, #68	; 0x44
 8000af4:	5a9b      	ldrh	r3, [r3, r2]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	001a      	movs	r2, r3
 8000afa:	2380      	movs	r3, #128	; 0x80
 8000afc:	015b      	lsls	r3, r3, #5
 8000afe:	401a      	ands	r2, r3
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	015b      	lsls	r3, r3, #5
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d124      	bne.n	8000b52 <HAL_PCD_IRQHandler+0x13a>
  {
    
    hpcd->Instance->CNTR &= (uint16_t)(~(USB_CNTR_LPMODE));
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2240      	movs	r2, #64	; 0x40
 8000b0e:	5a9b      	ldrh	r3, [r3, r2]
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2104      	movs	r1, #4
 8000b18:	438a      	bics	r2, r1
 8000b1a:	b291      	uxth	r1, r2
 8000b1c:	2240      	movs	r2, #64	; 0x40
 8000b1e:	5299      	strh	r1, [r3, r2]

    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8000b20:	23bd      	movs	r3, #189	; 0xbd
 8000b22:	021b      	lsls	r3, r3, #8
 8000b24:	60fb      	str	r3, [r7, #12]
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	b291      	uxth	r1, r2
 8000b2e:	2240      	movs	r2, #64	; 0x40
 8000b30:	5299      	strh	r1, [r3, r2]
    
    HAL_PCD_ResumeCallback(hpcd);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	0018      	movs	r0, r3
 8000b36:	f004 fb25 	bl	8005184 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2244      	movs	r2, #68	; 0x44
 8000b40:	5a9b      	ldrh	r3, [r3, r2]
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4943      	ldr	r1, [pc, #268]	; (8000c58 <HAL_PCD_IRQHandler+0x240>)
 8000b4a:	400a      	ands	r2, r1
 8000b4c:	b291      	uxth	r1, r2
 8000b4e:	2244      	movs	r2, #68	; 0x44
 8000b50:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2244      	movs	r2, #68	; 0x44
 8000b58:	5a9b      	ldrh	r3, [r3, r2]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	2380      	movs	r3, #128	; 0x80
 8000b60:	011b      	lsls	r3, r3, #4
 8000b62:	401a      	ands	r2, r3
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	011b      	lsls	r3, r3, #4
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d134      	bne.n	8000bd6 <HAL_PCD_IRQHandler+0x1be>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2244      	movs	r2, #68	; 0x44
 8000b72:	5a9b      	ldrh	r3, [r3, r2]
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4938      	ldr	r1, [pc, #224]	; (8000c5c <HAL_PCD_IRQHandler+0x244>)
 8000b7c:	400a      	ands	r2, r1
 8000b7e:	b291      	uxth	r1, r2
 8000b80:	2244      	movs	r2, #68	; 0x44
 8000b82:	5299      	strh	r1, [r3, r2]
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2240      	movs	r2, #64	; 0x40
 8000b8a:	5a9b      	ldrh	r3, [r3, r2]
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2108      	movs	r1, #8
 8000b94:	430a      	orrs	r2, r1
 8000b96:	b291      	uxth	r1, r2
 8000b98:	2240      	movs	r2, #64	; 0x40
 8000b9a:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2240      	movs	r2, #64	; 0x40
 8000ba2:	5a9b      	ldrh	r3, [r3, r2]
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2104      	movs	r1, #4
 8000bac:	430a      	orrs	r2, r1
 8000bae:	b291      	uxth	r1, r2
 8000bb0:	2240      	movs	r2, #64	; 0x40
 8000bb2:	5299      	strh	r1, [r3, r2]

    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2244      	movs	r2, #68	; 0x44
 8000bba:	5a9b      	ldrh	r3, [r3, r2]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	015b      	lsls	r3, r3, #5
 8000bc4:	401a      	ands	r2, r3
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	015b      	lsls	r3, r3, #5
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d003      	beq.n	8000bd6 <HAL_PCD_IRQHandler+0x1be>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f004 fabb 	bl	800514c <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2244      	movs	r2, #68	; 0x44
 8000bdc:	5a9b      	ldrh	r3, [r3, r2]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	001a      	movs	r2, r3
 8000be2:	2380      	movs	r3, #128	; 0x80
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	401a      	ands	r2, r3
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d10f      	bne.n	8000c10 <HAL_PCD_IRQHandler+0x1f8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2244      	movs	r2, #68	; 0x44
 8000bf6:	5a9b      	ldrh	r3, [r3, r2]
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4918      	ldr	r1, [pc, #96]	; (8000c60 <HAL_PCD_IRQHandler+0x248>)
 8000c00:	400a      	ands	r2, r1
 8000c02:	b291      	uxth	r1, r2
 8000c04:	2244      	movs	r2, #68	; 0x44
 8000c06:	5299      	strh	r1, [r3, r2]
    HAL_PCD_SOFCallback(hpcd);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f004 fa6a 	bl	80050e4 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2244      	movs	r2, #68	; 0x44
 8000c16:	5a9b      	ldrh	r3, [r3, r2]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	001a      	movs	r2, r3
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	401a      	ands	r2, r3
 8000c22:	2380      	movs	r3, #128	; 0x80
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d10b      	bne.n	8000c42 <HAL_PCD_IRQHandler+0x22a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2244      	movs	r2, #68	; 0x44
 8000c30:	5a9b      	ldrh	r3, [r3, r2]
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	490a      	ldr	r1, [pc, #40]	; (8000c64 <HAL_PCD_IRQHandler+0x24c>)
 8000c3a:	400a      	ands	r2, r1
 8000c3c:	b291      	uxth	r1, r2
 8000c3e:	2244      	movs	r2, #68	; 0x44
 8000c40:	5299      	strh	r1, [r3, r2]
  }
}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b004      	add	sp, #16
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	fffffbff 	.word	0xfffffbff
 8000c50:	ffffbfff 	.word	0xffffbfff
 8000c54:	ffffdfff 	.word	0xffffdfff
 8000c58:	ffffefff 	.word	0xffffefff
 8000c5c:	fffff7ff 	.word	0xfffff7ff
 8000c60:	fffffdff 	.word	0xfffffdff
 8000c64:	fffffeff 	.word	0xfffffeff

08000c68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	000a      	movs	r2, r1
 8000c72:	1cfb      	adds	r3, r7, #3
 8000c74:	701a      	strb	r2, [r3, #0]
   __HAL_LOCK(hpcd); 
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	23f4      	movs	r3, #244	; 0xf4
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	5cd3      	ldrb	r3, [r2, r3]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d101      	bne.n	8000c86 <HAL_PCD_SetAddress+0x1e>
 8000c82:	2302      	movs	r3, #2
 8000c84:	e019      	b.n	8000cba <HAL_PCD_SetAddress+0x52>
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	23f4      	movs	r3, #244	; 0xf4
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	54d1      	strb	r1, [r2, r3]

   if(address == 0U) 
 8000c90:	1cfb      	adds	r3, r7, #3
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d105      	bne.n	8000ca4 <HAL_PCD_SetAddress+0x3c>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	224c      	movs	r2, #76	; 0x4c
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	5299      	strh	r1, [r3, r2]
 8000ca2:	e004      	b.n	8000cae <HAL_PCD_SetAddress+0x46>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	1cfa      	adds	r2, r7, #3
 8000ca8:	2124      	movs	r1, #36	; 0x24
 8000caa:	7812      	ldrb	r2, [r2, #0]
 8000cac:	545a      	strb	r2, [r3, r1]
   }

  __HAL_UNLOCK(hpcd);   
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	23f4      	movs	r3, #244	; 0xf4
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packert size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b087      	sub	sp, #28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	000c      	movs	r4, r1
 8000cce:	0010      	movs	r0, r2
 8000cd0:	0019      	movs	r1, r3
 8000cd2:	1cfb      	adds	r3, r7, #3
 8000cd4:	1c22      	adds	r2, r4, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	003b      	movs	r3, r7
 8000cda:	1c02      	adds	r2, r0, #0
 8000cdc:	801a      	strh	r2, [r3, #0]
 8000cde:	1cbb      	adds	r3, r7, #2
 8000ce0:	1c0a      	adds	r2, r1, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000ce4:	2311      	movs	r3, #17
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000cec:	1cfb      	adds	r3, r7, #3
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b25b      	sxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	da0c      	bge.n	8000d10 <HAL_PCD_EP_Open+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000cf6:	1cfb      	adds	r3, r7, #3
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	227f      	movs	r2, #127	; 0x7f
 8000cfc:	401a      	ands	r2, r3
 8000cfe:	0013      	movs	r3, r2
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	1a9b      	subs	r3, r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	3328      	adds	r3, #40	; 0x28
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	18d3      	adds	r3, r2, r3
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	e00c      	b.n	8000d2a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000d10:	1cfb      	adds	r3, r7, #3
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	227f      	movs	r2, #127	; 0x7f
 8000d16:	401a      	ands	r2, r3
 8000d18:	0013      	movs	r3, r2
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	1a9b      	subs	r3, r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	3309      	adds	r3, #9
 8000d22:	33ff      	adds	r3, #255	; 0xff
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	18d3      	adds	r3, r2, r3
 8000d28:	617b      	str	r3, [r7, #20]
  }
  ep->num   = ep_addr & 0x7FU;
 8000d2a:	1cfb      	adds	r3, r7, #3
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	227f      	movs	r2, #127	; 0x7f
 8000d30:	4013      	ands	r3, r2
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000d38:	1cfb      	adds	r3, r7, #3
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b25b      	sxtb	r3, r3
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	09db      	lsrs	r3, r3, #7
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	001a      	movs	r2, r3
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8000d4a:	003b      	movs	r3, r7
 8000d4c:	881a      	ldrh	r2, [r3, #0]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	1cba      	adds	r2, r7, #2
 8000d56:	7812      	ldrb	r2, [r2, #0]
 8000d58:	70da      	strb	r2, [r3, #3]
  
  __HAL_LOCK(hpcd); 
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	23f4      	movs	r3, #244	; 0xf4
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	5cd3      	ldrb	r3, [r2, r3]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d101      	bne.n	8000d6a <HAL_PCD_EP_Open+0xa6>
 8000d66:	2302      	movs	r3, #2
 8000d68:	e332      	b.n	80013d0 <HAL_PCD_EP_Open+0x70c>
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	23f4      	movs	r3, #244	; 0xf4
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	2101      	movs	r1, #1
 8000d72:	54d1      	strb	r1, [r2, r3]

  /* initialize Endpoint */
  switch (ep->type)
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	78db      	ldrb	r3, [r3, #3]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d050      	beq.n	8000e1e <HAL_PCD_EP_Open+0x15a>
 8000d7c:	dc02      	bgt.n	8000d84 <HAL_PCD_EP_Open+0xc0>
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d005      	beq.n	8000d8e <HAL_PCD_EP_Open+0xca>
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
    break;
  default:
    break;
 8000d82:	e064      	b.n	8000e4e <HAL_PCD_EP_Open+0x18a>
  switch (ep->type)
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d01a      	beq.n	8000dbe <HAL_PCD_EP_Open+0xfa>
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d030      	beq.n	8000dee <HAL_PCD_EP_Open+0x12a>
    break;
 8000d8c:	e05f      	b.n	8000e4e <HAL_PCD_EP_Open+0x18a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	001a      	movs	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	18d3      	adds	r3, r2, r3
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	4abf      	ldr	r2, [pc, #764]	; (80010a0 <HAL_PCD_EP_Open+0x3dc>)
 8000da2:	4013      	ands	r3, r2
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	0019      	movs	r1, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	18cb      	adds	r3, r1, r3
 8000db4:	49bb      	ldr	r1, [pc, #748]	; (80010a4 <HAL_PCD_EP_Open+0x3e0>)
 8000db6:	430a      	orrs	r2, r1
 8000db8:	b292      	uxth	r2, r2
 8000dba:	801a      	strh	r2, [r3, #0]
    break;
 8000dbc:	e047      	b.n	8000e4e <HAL_PCD_EP_Open+0x18a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	001a      	movs	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	18d3      	adds	r3, r2, r3
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	4ab3      	ldr	r2, [pc, #716]	; (80010a0 <HAL_PCD_EP_Open+0x3dc>)
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	0019      	movs	r1, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	18cb      	adds	r3, r1, r3
 8000de4:	49b0      	ldr	r1, [pc, #704]	; (80010a8 <HAL_PCD_EP_Open+0x3e4>)
 8000de6:	430a      	orrs	r2, r1
 8000de8:	b292      	uxth	r2, r2
 8000dea:	801a      	strh	r2, [r3, #0]
    break;
 8000dec:	e02f      	b.n	8000e4e <HAL_PCD_EP_Open+0x18a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	001a      	movs	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	18d3      	adds	r3, r2, r3
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	4aa7      	ldr	r2, [pc, #668]	; (80010a0 <HAL_PCD_EP_Open+0x3dc>)
 8000e02:	4013      	ands	r3, r2
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	18cb      	adds	r3, r1, r3
 8000e14:	49a5      	ldr	r1, [pc, #660]	; (80010ac <HAL_PCD_EP_Open+0x3e8>)
 8000e16:	430a      	orrs	r2, r1
 8000e18:	b292      	uxth	r2, r2
 8000e1a:	801a      	strh	r2, [r3, #0]
    break;
 8000e1c:	e017      	b.n	8000e4e <HAL_PCD_EP_Open+0x18a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	001a      	movs	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	18d3      	adds	r3, r2, r3
 8000e2c:	881b      	ldrh	r3, [r3, #0]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4a9b      	ldr	r2, [pc, #620]	; (80010a0 <HAL_PCD_EP_Open+0x3dc>)
 8000e32:	4013      	ands	r3, r2
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	0019      	movs	r1, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	18cb      	adds	r3, r1, r3
 8000e44:	499a      	ldr	r1, [pc, #616]	; (80010b0 <HAL_PCD_EP_Open+0x3ec>)
 8000e46:	430a      	orrs	r2, r1
 8000e48:	b292      	uxth	r2, r2
 8000e4a:	801a      	strh	r2, [r3, #0]
    break;
 8000e4c:	46c0      	nop			; (mov r8, r8)
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	001a      	movs	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	18d3      	adds	r3, r2, r3
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	4a94      	ldr	r2, [pc, #592]	; (80010b4 <HAL_PCD_EP_Open+0x3f0>)
 8000e62:	4013      	ands	r3, r2
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	0019      	movs	r1, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	18cb      	adds	r3, r1, r3
 8000e7e:	498a      	ldr	r1, [pc, #552]	; (80010a8 <HAL_PCD_EP_Open+0x3e4>)
 8000e80:	430a      	orrs	r2, r1
 8000e82:	b292      	uxth	r2, r2
 8000e84:	801a      	strh	r2, [r3, #0]
  
  if (ep->doublebuffer == 0U) 
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	7a9b      	ldrb	r3, [r3, #10]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d000      	beq.n	8000e90 <HAL_PCD_EP_Open+0x1cc>
 8000e8e:	e121      	b.n	80010d4 <HAL_PCD_EP_Open+0x410>
  {
    if (ep->is_in)
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	785b      	ldrb	r3, [r3, #1]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d059      	beq.n	8000f4c <HAL_PCD_EP_Open+0x288>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	889b      	ldrh	r3, [r3, #4]
 8000e9c:	085b      	lsrs	r3, r3, #1
 8000e9e:	b299      	uxth	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2250      	movs	r2, #80	; 0x50
 8000ea6:	5a9b      	ldrh	r3, [r3, r2]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	001a      	movs	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	18d3      	adds	r3, r2, r3
 8000eb4:	001a      	movs	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	18d3      	adds	r3, r2, r3
 8000ebc:	2280      	movs	r2, #128	; 0x80
 8000ebe:	00d2      	lsls	r2, r2, #3
 8000ec0:	4694      	mov	ip, r2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	1c0b      	adds	r3, r1, #0
 8000ec8:	18db      	adds	r3, r3, r3
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	001a      	movs	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	18d3      	adds	r3, r2, r3
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	2340      	movs	r3, #64	; 0x40
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	d016      	beq.n	8000f16 <HAL_PCD_EP_Open+0x252>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	001a      	movs	r2, r3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	18d3      	adds	r3, r2, r3
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	4a6e      	ldr	r2, [pc, #440]	; (80010b4 <HAL_PCD_EP_Open+0x3f0>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	0019      	movs	r1, r3
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	18cb      	adds	r3, r1, r3
 8000f0e:	496a      	ldr	r1, [pc, #424]	; (80010b8 <HAL_PCD_EP_Open+0x3f4>)
 8000f10:	430a      	orrs	r2, r1
 8000f12:	b292      	uxth	r2, r2
 8000f14:	801a      	strh	r2, [r3, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	001a      	movs	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	18d3      	adds	r3, r2, r3
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	4a64      	ldr	r2, [pc, #400]	; (80010bc <HAL_PCD_EP_Open+0x3f8>)
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	b29c      	uxth	r4, r3
 8000f2e:	2320      	movs	r3, #32
 8000f30:	4063      	eors	r3, r4
 8000f32:	b29c      	uxth	r4, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	001a      	movs	r2, r3
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	18d3      	adds	r3, r2, r3
 8000f42:	4a59      	ldr	r2, [pc, #356]	; (80010a8 <HAL_PCD_EP_Open+0x3e4>)
 8000f44:	4322      	orrs	r2, r4
 8000f46:	b292      	uxth	r2, r2
 8000f48:	801a      	strh	r2, [r3, #0]
 8000f4a:	e239      	b.n	80013c0 <HAL_PCD_EP_Open+0x6fc>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	889b      	ldrh	r3, [r3, #4]
 8000f50:	085b      	lsrs	r3, r3, #1
 8000f52:	b299      	uxth	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2250      	movs	r2, #80	; 0x50
 8000f5a:	5a9b      	ldrh	r3, [r3, r2]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	001a      	movs	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	18d3      	adds	r3, r2, r3
 8000f68:	001a      	movs	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	18d3      	adds	r3, r2, r3
 8000f70:	4a53      	ldr	r2, [pc, #332]	; (80010c0 <HAL_PCD_EP_Open+0x3fc>)
 8000f72:	4694      	mov	ip, r2
 8000f74:	4463      	add	r3, ip
 8000f76:	001a      	movs	r2, r3
 8000f78:	1c0b      	adds	r3, r1, #0
 8000f7a:	18db      	adds	r3, r3, r3
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	8013      	strh	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2250      	movs	r2, #80	; 0x50
 8000f86:	5a9b      	ldrh	r3, [r3, r2]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	001a      	movs	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	18d3      	adds	r3, r2, r3
 8000f94:	001a      	movs	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	18d3      	adds	r3, r2, r3
 8000f9c:	4a49      	ldr	r2, [pc, #292]	; (80010c4 <HAL_PCD_EP_Open+0x400>)
 8000f9e:	4694      	mov	ip, r2
 8000fa0:	4463      	add	r3, ip
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	2b3e      	cmp	r3, #62	; 0x3e
 8000faa:	d91b      	bls.n	8000fe4 <HAL_PCD_EP_Open+0x320>
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	095a      	lsrs	r2, r3, #5
 8000fb2:	2312      	movs	r3, #18
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	801a      	strh	r2, [r3, #0]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	221f      	movs	r2, #31
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d105      	bne.n	8000fce <HAL_PCD_EP_Open+0x30a>
 8000fc2:	2112      	movs	r1, #18
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	881a      	ldrh	r2, [r3, #0]
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	3a01      	subs	r2, #1
 8000fcc:	801a      	strh	r2, [r3, #0]
 8000fce:	2312      	movs	r3, #18
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	029b      	lsls	r3, r3, #10
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	4a3b      	ldr	r2, [pc, #236]	; (80010c8 <HAL_PCD_EP_Open+0x404>)
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	801a      	strh	r2, [r3, #0]
 8000fe2:	e017      	b.n	8001014 <HAL_PCD_EP_Open+0x350>
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	085a      	lsrs	r2, r3, #1
 8000fea:	2312      	movs	r3, #18
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	801a      	strh	r2, [r3, #0]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d005      	beq.n	8001006 <HAL_PCD_EP_Open+0x342>
 8000ffa:	2112      	movs	r1, #18
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	881a      	ldrh	r2, [r3, #0]
 8001000:	187b      	adds	r3, r7, r1
 8001002:	3201      	adds	r2, #1
 8001004:	801a      	strh	r2, [r3, #0]
 8001006:	2312      	movs	r3, #18
 8001008:	18fb      	adds	r3, r7, r3
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	029b      	lsls	r3, r3, #10
 800100e:	b29a      	uxth	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	001a      	movs	r2, r3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	18d3      	adds	r3, r2, r3
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	b29b      	uxth	r3, r3
 8001026:	001a      	movs	r2, r3
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	01db      	lsls	r3, r3, #7
 800102c:	4013      	ands	r3, r2
 800102e:	d016      	beq.n	800105e <HAL_PCD_EP_Open+0x39a>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	001a      	movs	r2, r3
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	18d3      	adds	r3, r2, r3
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	b29b      	uxth	r3, r3
 8001042:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <HAL_PCD_EP_Open+0x3f0>)
 8001044:	4013      	ands	r3, r2
 8001046:	b29a      	uxth	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	0019      	movs	r1, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	18cb      	adds	r3, r1, r3
 8001056:	491d      	ldr	r1, [pc, #116]	; (80010cc <HAL_PCD_EP_Open+0x408>)
 8001058:	430a      	orrs	r2, r1
 800105a:	b292      	uxth	r2, r2
 800105c:	801a      	strh	r2, [r3, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	001a      	movs	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	18d3      	adds	r3, r2, r3
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	b29b      	uxth	r3, r3
 8001070:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <HAL_PCD_EP_Open+0x40c>)
 8001072:	4013      	ands	r3, r2
 8001074:	b29c      	uxth	r4, r3
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	015b      	lsls	r3, r3, #5
 800107a:	4063      	eors	r3, r4
 800107c:	b29c      	uxth	r4, r3
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	019b      	lsls	r3, r3, #6
 8001082:	4063      	eors	r3, r4
 8001084:	b29c      	uxth	r4, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	001a      	movs	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	18d3      	adds	r3, r2, r3
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_PCD_EP_Open+0x3e4>)
 8001096:	4322      	orrs	r2, r4
 8001098:	b292      	uxth	r2, r2
 800109a:	801a      	strh	r2, [r3, #0]
 800109c:	e190      	b.n	80013c0 <HAL_PCD_EP_Open+0x6fc>
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	0000090f 	.word	0x0000090f
 80010a4:	ffff8280 	.word	0xffff8280
 80010a8:	ffff8080 	.word	0xffff8080
 80010ac:	ffff8680 	.word	0xffff8680
 80010b0:	ffff8480 	.word	0xffff8480
 80010b4:	00000f0f 	.word	0x00000f0f
 80010b8:	ffff80c0 	.word	0xffff80c0
 80010bc:	ffff8fbf 	.word	0xffff8fbf
 80010c0:	00000404 	.word	0x00000404
 80010c4:	00000406 	.word	0x00000406
 80010c8:	ffff8000 	.word	0xffff8000
 80010cc:	ffffc080 	.word	0xffffc080
 80010d0:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	001a      	movs	r2, r3
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	18d3      	adds	r3, r2, r3
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	4abc      	ldr	r2, [pc, #752]	; (80013d8 <HAL_PCD_EP_Open+0x714>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	0019      	movs	r1, r3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	18cb      	adds	r3, r1, r3
 80010fa:	49b8      	ldr	r1, [pc, #736]	; (80013dc <HAL_PCD_EP_Open+0x718>)
 80010fc:	430a      	orrs	r2, r1
 80010fe:	b292      	uxth	r2, r2
 8001100:	801a      	strh	r2, [r3, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	88db      	ldrh	r3, [r3, #6]
 8001106:	085b      	lsrs	r3, r3, #1
 8001108:	b299      	uxth	r1, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2250      	movs	r2, #80	; 0x50
 8001110:	5a9b      	ldrh	r3, [r3, r2]
 8001112:	b29b      	uxth	r3, r3
 8001114:	001a      	movs	r2, r3
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	18d3      	adds	r3, r2, r3
 800111e:	001a      	movs	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	18d3      	adds	r3, r2, r3
 8001126:	2280      	movs	r2, #128	; 0x80
 8001128:	00d2      	lsls	r2, r2, #3
 800112a:	4694      	mov	ip, r2
 800112c:	4463      	add	r3, ip
 800112e:	001a      	movs	r2, r3
 8001130:	1c0b      	adds	r3, r1, #0
 8001132:	18db      	adds	r3, r3, r3
 8001134:	b29b      	uxth	r3, r3
 8001136:	8013      	strh	r3, [r2, #0]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	891b      	ldrh	r3, [r3, #8]
 800113c:	085b      	lsrs	r3, r3, #1
 800113e:	b299      	uxth	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2250      	movs	r2, #80	; 0x50
 8001146:	5a9b      	ldrh	r3, [r3, r2]
 8001148:	b29b      	uxth	r3, r3
 800114a:	001a      	movs	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	18d3      	adds	r3, r2, r3
 8001154:	001a      	movs	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	18d3      	adds	r3, r2, r3
 800115c:	4aa0      	ldr	r2, [pc, #640]	; (80013e0 <HAL_PCD_EP_Open+0x71c>)
 800115e:	4694      	mov	ip, r2
 8001160:	4463      	add	r3, ip
 8001162:	001a      	movs	r2, r3
 8001164:	1c0b      	adds	r3, r1, #0
 8001166:	18db      	adds	r3, r3, r3
 8001168:	b29b      	uxth	r3, r3
 800116a:	8013      	strh	r3, [r2, #0]
    
    if (ep->is_in==0U)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	785b      	ldrb	r3, [r3, #1]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d000      	beq.n	8001176 <HAL_PCD_EP_Open+0x4b2>
 8001174:	e096      	b.n	80012a4 <HAL_PCD_EP_Open+0x5e0>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	001a      	movs	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	18d3      	adds	r3, r2, r3
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	b29b      	uxth	r3, r3
 8001188:	001a      	movs	r2, r3
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	01db      	lsls	r3, r3, #7
 800118e:	4013      	ands	r3, r2
 8001190:	d016      	beq.n	80011c0 <HAL_PCD_EP_Open+0x4fc>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	001a      	movs	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	18d3      	adds	r3, r2, r3
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	4a8f      	ldr	r2, [pc, #572]	; (80013e4 <HAL_PCD_EP_Open+0x720>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	0019      	movs	r1, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	18cb      	adds	r3, r1, r3
 80011b8:	498b      	ldr	r1, [pc, #556]	; (80013e8 <HAL_PCD_EP_Open+0x724>)
 80011ba:	430a      	orrs	r2, r1
 80011bc:	b292      	uxth	r2, r2
 80011be:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	001a      	movs	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	18d3      	adds	r3, r2, r3
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	001a      	movs	r2, r3
 80011d4:	2340      	movs	r3, #64	; 0x40
 80011d6:	4013      	ands	r3, r2
 80011d8:	d016      	beq.n	8001208 <HAL_PCD_EP_Open+0x544>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	001a      	movs	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	18d3      	adds	r3, r2, r3
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	4a7d      	ldr	r2, [pc, #500]	; (80013e4 <HAL_PCD_EP_Open+0x720>)
 80011ee:	4013      	ands	r3, r2
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	0019      	movs	r1, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	18cb      	adds	r3, r1, r3
 8001200:	497a      	ldr	r1, [pc, #488]	; (80013ec <HAL_PCD_EP_Open+0x728>)
 8001202:	430a      	orrs	r2, r1
 8001204:	b292      	uxth	r2, r2
 8001206:	801a      	strh	r2, [r3, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	001a      	movs	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	18d3      	adds	r3, r2, r3
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	b29b      	uxth	r3, r3
 800121a:	4a72      	ldr	r2, [pc, #456]	; (80013e4 <HAL_PCD_EP_Open+0x720>)
 800121c:	4013      	ands	r3, r2
 800121e:	b29a      	uxth	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	0019      	movs	r1, r3
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	18cb      	adds	r3, r1, r3
 800122e:	496f      	ldr	r1, [pc, #444]	; (80013ec <HAL_PCD_EP_Open+0x728>)
 8001230:	430a      	orrs	r2, r1
 8001232:	b292      	uxth	r2, r2
 8001234:	801a      	strh	r2, [r3, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	001a      	movs	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	18d3      	adds	r3, r2, r3
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	b29b      	uxth	r3, r3
 8001248:	4a69      	ldr	r2, [pc, #420]	; (80013f0 <HAL_PCD_EP_Open+0x72c>)
 800124a:	4013      	ands	r3, r2
 800124c:	b29c      	uxth	r4, r3
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	015b      	lsls	r3, r3, #5
 8001252:	4063      	eors	r3, r4
 8001254:	b29c      	uxth	r4, r3
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	019b      	lsls	r3, r3, #6
 800125a:	4063      	eors	r3, r4
 800125c:	b29c      	uxth	r4, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	001a      	movs	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	18d3      	adds	r3, r2, r3
 800126c:	4a61      	ldr	r2, [pc, #388]	; (80013f4 <HAL_PCD_EP_Open+0x730>)
 800126e:	4322      	orrs	r2, r4
 8001270:	b292      	uxth	r2, r2
 8001272:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	001a      	movs	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	18d3      	adds	r3, r2, r3
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	b29b      	uxth	r3, r3
 8001286:	4a5c      	ldr	r2, [pc, #368]	; (80013f8 <HAL_PCD_EP_Open+0x734>)
 8001288:	4013      	ands	r3, r2
 800128a:	b29c      	uxth	r4, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	001a      	movs	r2, r3
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	18d3      	adds	r3, r2, r3
 800129a:	4a56      	ldr	r2, [pc, #344]	; (80013f4 <HAL_PCD_EP_Open+0x730>)
 800129c:	4322      	orrs	r2, r4
 800129e:	b292      	uxth	r2, r2
 80012a0:	801a      	strh	r2, [r3, #0]
 80012a2:	e08d      	b.n	80013c0 <HAL_PCD_EP_Open+0x6fc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	001a      	movs	r2, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	18d3      	adds	r3, r2, r3
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	001a      	movs	r2, r3
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	01db      	lsls	r3, r3, #7
 80012bc:	4013      	ands	r3, r2
 80012be:	d016      	beq.n	80012ee <HAL_PCD_EP_Open+0x62a>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	001a      	movs	r2, r3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	18d3      	adds	r3, r2, r3
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	4a44      	ldr	r2, [pc, #272]	; (80013e4 <HAL_PCD_EP_Open+0x720>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	0019      	movs	r1, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	18cb      	adds	r3, r1, r3
 80012e6:	4940      	ldr	r1, [pc, #256]	; (80013e8 <HAL_PCD_EP_Open+0x724>)
 80012e8:	430a      	orrs	r2, r1
 80012ea:	b292      	uxth	r2, r2
 80012ec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	001a      	movs	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	18d3      	adds	r3, r2, r3
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	001a      	movs	r2, r3
 8001302:	2340      	movs	r3, #64	; 0x40
 8001304:	4013      	ands	r3, r2
 8001306:	d016      	beq.n	8001336 <HAL_PCD_EP_Open+0x672>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	001a      	movs	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	18d3      	adds	r3, r2, r3
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	b29b      	uxth	r3, r3
 800131a:	4a32      	ldr	r2, [pc, #200]	; (80013e4 <HAL_PCD_EP_Open+0x720>)
 800131c:	4013      	ands	r3, r2
 800131e:	b29a      	uxth	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	0019      	movs	r1, r3
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	18cb      	adds	r3, r1, r3
 800132e:	492f      	ldr	r1, [pc, #188]	; (80013ec <HAL_PCD_EP_Open+0x728>)
 8001330:	430a      	orrs	r2, r1
 8001332:	b292      	uxth	r2, r2
 8001334:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	001a      	movs	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	18d3      	adds	r3, r2, r3
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	b29b      	uxth	r3, r3
 8001348:	4a26      	ldr	r2, [pc, #152]	; (80013e4 <HAL_PCD_EP_Open+0x720>)
 800134a:	4013      	ands	r3, r2
 800134c:	b29a      	uxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	0019      	movs	r1, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	18cb      	adds	r3, r1, r3
 800135c:	4922      	ldr	r1, [pc, #136]	; (80013e8 <HAL_PCD_EP_Open+0x724>)
 800135e:	430a      	orrs	r2, r1
 8001360:	b292      	uxth	r2, r2
 8001362:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	001a      	movs	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	18d3      	adds	r3, r2, r3
 8001372:	881b      	ldrh	r3, [r3, #0]
 8001374:	b29b      	uxth	r3, r3
 8001376:	4a20      	ldr	r2, [pc, #128]	; (80013f8 <HAL_PCD_EP_Open+0x734>)
 8001378:	4013      	ands	r3, r2
 800137a:	b29c      	uxth	r4, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	001a      	movs	r2, r3
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	18d3      	adds	r3, r2, r3
 800138a:	4a1a      	ldr	r2, [pc, #104]	; (80013f4 <HAL_PCD_EP_Open+0x730>)
 800138c:	4322      	orrs	r2, r4
 800138e:	b292      	uxth	r2, r2
 8001390:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	001a      	movs	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	18d3      	adds	r3, r2, r3
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <HAL_PCD_EP_Open+0x72c>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	b29c      	uxth	r4, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	001a      	movs	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	18d3      	adds	r3, r2, r3
 80013b8:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <HAL_PCD_EP_Open+0x730>)
 80013ba:	4322      	orrs	r2, r4
 80013bc:	b292      	uxth	r2, r2
 80013be:	801a      	strh	r2, [r3, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	23f4      	movs	r3, #244	; 0xf4
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	2100      	movs	r1, #0
 80013c8:	54d1      	strb	r1, [r2, r3]
  return ret;
 80013ca:	2311      	movs	r3, #17
 80013cc:	18fb      	adds	r3, r7, r3
 80013ce:	781b      	ldrb	r3, [r3, #0]
}
 80013d0:	0018      	movs	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b007      	add	sp, #28
 80013d6:	bd90      	pop	{r4, r7, pc}
 80013d8:	00000e0f 	.word	0x00000e0f
 80013dc:	ffff8180 	.word	0xffff8180
 80013e0:	00000404 	.word	0x00000404
 80013e4:	00000f0f 	.word	0x00000f0f
 80013e8:	ffffc080 	.word	0xffffc080
 80013ec:	ffff80c0 	.word	0xffff80c0
 80013f0:	ffffbf8f 	.word	0xffffbf8f
 80013f4:	ffff8080 	.word	0xffff8080
 80013f8:	ffff8fbf 	.word	0xffff8fbf

080013fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	000a      	movs	r2, r1
 8001406:	1cfb      	adds	r3, r7, #3
 8001408:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 800140a:	1cfb      	adds	r3, r7, #3
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b25b      	sxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	da0c      	bge.n	800142e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001414:	1cfb      	adds	r3, r7, #3
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	227f      	movs	r2, #127	; 0x7f
 800141a:	401a      	ands	r2, r3
 800141c:	0013      	movs	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	1a9b      	subs	r3, r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	3328      	adds	r3, #40	; 0x28
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	18d3      	adds	r3, r2, r3
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	e00c      	b.n	8001448 <HAL_PCD_EP_Close+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800142e:	1cfb      	adds	r3, r7, #3
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	227f      	movs	r2, #127	; 0x7f
 8001434:	401a      	ands	r2, r3
 8001436:	0013      	movs	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	1a9b      	subs	r3, r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	3309      	adds	r3, #9
 8001440:	33ff      	adds	r3, #255	; 0xff
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	18d3      	adds	r3, r2, r3
 8001446:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7FU;
 8001448:	1cfb      	adds	r3, r7, #3
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	227f      	movs	r2, #127	; 0x7f
 800144e:	4013      	ands	r3, r2
 8001450:	b2da      	uxtb	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001456:	1cfb      	adds	r3, r7, #3
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b25b      	sxtb	r3, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	09db      	lsrs	r3, r3, #7
 8001460:	b2db      	uxtb	r3, r3
 8001462:	001a      	movs	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	23f4      	movs	r3, #244	; 0xf4
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	5cd3      	ldrb	r3, [r2, r3]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d101      	bne.n	8001478 <HAL_PCD_EP_Close+0x7c>
 8001474:	2302      	movs	r3, #2
 8001476:	e1ae      	b.n	80017d6 <HAL_PCD_EP_Close+0x3da>
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	23f4      	movs	r3, #244	; 0xf4
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2101      	movs	r1, #1
 8001480:	54d1      	strb	r1, [r2, r3]

  if (ep->doublebuffer == 0U) 
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	7a9b      	ldrb	r3, [r3, #10]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d000      	beq.n	800148c <HAL_PCD_EP_Close+0x90>
 800148a:	e07c      	b.n	8001586 <HAL_PCD_EP_Close+0x18a>
  {
    if (ep->is_in)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	785b      	ldrb	r3, [r3, #1]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d03b      	beq.n	800150c <HAL_PCD_EP_Close+0x110>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	001a      	movs	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	18d3      	adds	r3, r2, r3
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	001a      	movs	r2, r3
 80014a8:	2340      	movs	r3, #64	; 0x40
 80014aa:	4013      	ands	r3, r2
 80014ac:	d016      	beq.n	80014dc <HAL_PCD_EP_Close+0xe0>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	001a      	movs	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	18d3      	adds	r3, r2, r3
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	4ac7      	ldr	r2, [pc, #796]	; (80017e0 <HAL_PCD_EP_Close+0x3e4>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	0019      	movs	r1, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	18cb      	adds	r3, r1, r3
 80014d4:	49c3      	ldr	r1, [pc, #780]	; (80017e4 <HAL_PCD_EP_Close+0x3e8>)
 80014d6:	430a      	orrs	r2, r1
 80014d8:	b292      	uxth	r2, r2
 80014da:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	001a      	movs	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	18d3      	adds	r3, r2, r3
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	4abe      	ldr	r2, [pc, #760]	; (80017e8 <HAL_PCD_EP_Close+0x3ec>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	b29c      	uxth	r4, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	001a      	movs	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	18d3      	adds	r3, r2, r3
 8001502:	4aba      	ldr	r2, [pc, #744]	; (80017ec <HAL_PCD_EP_Close+0x3f0>)
 8001504:	4322      	orrs	r2, r4
 8001506:	b292      	uxth	r2, r2
 8001508:	801a      	strh	r2, [r3, #0]
 800150a:	e15e      	b.n	80017ca <HAL_PCD_EP_Close+0x3ce>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	001a      	movs	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	18d3      	adds	r3, r2, r3
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	b29b      	uxth	r3, r3
 800151e:	001a      	movs	r2, r3
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	01db      	lsls	r3, r3, #7
 8001524:	4013      	ands	r3, r2
 8001526:	d016      	beq.n	8001556 <HAL_PCD_EP_Close+0x15a>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	001a      	movs	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	18d3      	adds	r3, r2, r3
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	b29b      	uxth	r3, r3
 800153a:	4aa9      	ldr	r2, [pc, #676]	; (80017e0 <HAL_PCD_EP_Close+0x3e4>)
 800153c:	4013      	ands	r3, r2
 800153e:	b29a      	uxth	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	0019      	movs	r1, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	18cb      	adds	r3, r1, r3
 800154e:	49a8      	ldr	r1, [pc, #672]	; (80017f0 <HAL_PCD_EP_Close+0x3f4>)
 8001550:	430a      	orrs	r2, r1
 8001552:	b292      	uxth	r2, r2
 8001554:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	001a      	movs	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	18d3      	adds	r3, r2, r3
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	b29b      	uxth	r3, r3
 8001568:	4aa2      	ldr	r2, [pc, #648]	; (80017f4 <HAL_PCD_EP_Close+0x3f8>)
 800156a:	4013      	ands	r3, r2
 800156c:	b29c      	uxth	r4, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	001a      	movs	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	18d3      	adds	r3, r2, r3
 800157c:	4a9b      	ldr	r2, [pc, #620]	; (80017ec <HAL_PCD_EP_Close+0x3f0>)
 800157e:	4322      	orrs	r2, r4
 8001580:	b292      	uxth	r2, r2
 8001582:	801a      	strh	r2, [r3, #0]
 8001584:	e121      	b.n	80017ca <HAL_PCD_EP_Close+0x3ce>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0U)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	785b      	ldrb	r3, [r3, #1]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d000      	beq.n	8001590 <HAL_PCD_EP_Close+0x194>
 800158e:	e08e      	b.n	80016ae <HAL_PCD_EP_Close+0x2b2>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	001a      	movs	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	18d3      	adds	r3, r2, r3
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	001a      	movs	r2, r3
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	01db      	lsls	r3, r3, #7
 80015a8:	4013      	ands	r3, r2
 80015aa:	d016      	beq.n	80015da <HAL_PCD_EP_Close+0x1de>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	001a      	movs	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	18d3      	adds	r3, r2, r3
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	4a88      	ldr	r2, [pc, #544]	; (80017e0 <HAL_PCD_EP_Close+0x3e4>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	0019      	movs	r1, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	18cb      	adds	r3, r1, r3
 80015d2:	4987      	ldr	r1, [pc, #540]	; (80017f0 <HAL_PCD_EP_Close+0x3f4>)
 80015d4:	430a      	orrs	r2, r1
 80015d6:	b292      	uxth	r2, r2
 80015d8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	001a      	movs	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	18d3      	adds	r3, r2, r3
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	001a      	movs	r2, r3
 80015ee:	2340      	movs	r3, #64	; 0x40
 80015f0:	4013      	ands	r3, r2
 80015f2:	d016      	beq.n	8001622 <HAL_PCD_EP_Close+0x226>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	001a      	movs	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	18d3      	adds	r3, r2, r3
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	4a76      	ldr	r2, [pc, #472]	; (80017e0 <HAL_PCD_EP_Close+0x3e4>)
 8001608:	4013      	ands	r3, r2
 800160a:	b29a      	uxth	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	0019      	movs	r1, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	18cb      	adds	r3, r1, r3
 800161a:	4972      	ldr	r1, [pc, #456]	; (80017e4 <HAL_PCD_EP_Close+0x3e8>)
 800161c:	430a      	orrs	r2, r1
 800161e:	b292      	uxth	r2, r2
 8001620:	801a      	strh	r2, [r3, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	001a      	movs	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	18d3      	adds	r3, r2, r3
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	b29b      	uxth	r3, r3
 8001634:	4a6a      	ldr	r2, [pc, #424]	; (80017e0 <HAL_PCD_EP_Close+0x3e4>)
 8001636:	4013      	ands	r3, r2
 8001638:	b29a      	uxth	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	0019      	movs	r1, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	18cb      	adds	r3, r1, r3
 8001648:	4966      	ldr	r1, [pc, #408]	; (80017e4 <HAL_PCD_EP_Close+0x3e8>)
 800164a:	430a      	orrs	r2, r1
 800164c:	b292      	uxth	r2, r2
 800164e:	801a      	strh	r2, [r3, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	001a      	movs	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	18d3      	adds	r3, r2, r3
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	b29b      	uxth	r3, r3
 8001662:	4a64      	ldr	r2, [pc, #400]	; (80017f4 <HAL_PCD_EP_Close+0x3f8>)
 8001664:	4013      	ands	r3, r2
 8001666:	b29c      	uxth	r4, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	001a      	movs	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	18d3      	adds	r3, r2, r3
 8001676:	4a5d      	ldr	r2, [pc, #372]	; (80017ec <HAL_PCD_EP_Close+0x3f0>)
 8001678:	4322      	orrs	r2, r4
 800167a:	b292      	uxth	r2, r2
 800167c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	001a      	movs	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	18d3      	adds	r3, r2, r3
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	b29b      	uxth	r3, r3
 8001690:	4a55      	ldr	r2, [pc, #340]	; (80017e8 <HAL_PCD_EP_Close+0x3ec>)
 8001692:	4013      	ands	r3, r2
 8001694:	b29c      	uxth	r4, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	001a      	movs	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	18d3      	adds	r3, r2, r3
 80016a4:	4a51      	ldr	r2, [pc, #324]	; (80017ec <HAL_PCD_EP_Close+0x3f0>)
 80016a6:	4322      	orrs	r2, r4
 80016a8:	b292      	uxth	r2, r2
 80016aa:	801a      	strh	r2, [r3, #0]
 80016ac:	e08d      	b.n	80017ca <HAL_PCD_EP_Close+0x3ce>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	001a      	movs	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	18d3      	adds	r3, r2, r3
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	001a      	movs	r2, r3
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	01db      	lsls	r3, r3, #7
 80016c6:	4013      	ands	r3, r2
 80016c8:	d016      	beq.n	80016f8 <HAL_PCD_EP_Close+0x2fc>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	001a      	movs	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	18d3      	adds	r3, r2, r3
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4a40      	ldr	r2, [pc, #256]	; (80017e0 <HAL_PCD_EP_Close+0x3e4>)
 80016de:	4013      	ands	r3, r2
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	0019      	movs	r1, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	18cb      	adds	r3, r1, r3
 80016f0:	493f      	ldr	r1, [pc, #252]	; (80017f0 <HAL_PCD_EP_Close+0x3f4>)
 80016f2:	430a      	orrs	r2, r1
 80016f4:	b292      	uxth	r2, r2
 80016f6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	001a      	movs	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	18d3      	adds	r3, r2, r3
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	b29b      	uxth	r3, r3
 800170a:	001a      	movs	r2, r3
 800170c:	2340      	movs	r3, #64	; 0x40
 800170e:	4013      	ands	r3, r2
 8001710:	d016      	beq.n	8001740 <HAL_PCD_EP_Close+0x344>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	001a      	movs	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	18d3      	adds	r3, r2, r3
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	b29b      	uxth	r3, r3
 8001724:	4a2e      	ldr	r2, [pc, #184]	; (80017e0 <HAL_PCD_EP_Close+0x3e4>)
 8001726:	4013      	ands	r3, r2
 8001728:	b29a      	uxth	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	0019      	movs	r1, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	18cb      	adds	r3, r1, r3
 8001738:	492a      	ldr	r1, [pc, #168]	; (80017e4 <HAL_PCD_EP_Close+0x3e8>)
 800173a:	430a      	orrs	r2, r1
 800173c:	b292      	uxth	r2, r2
 800173e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	001a      	movs	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	18d3      	adds	r3, r2, r3
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	b29b      	uxth	r3, r3
 8001752:	4a23      	ldr	r2, [pc, #140]	; (80017e0 <HAL_PCD_EP_Close+0x3e4>)
 8001754:	4013      	ands	r3, r2
 8001756:	b29a      	uxth	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	0019      	movs	r1, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	18cb      	adds	r3, r1, r3
 8001766:	4922      	ldr	r1, [pc, #136]	; (80017f0 <HAL_PCD_EP_Close+0x3f4>)
 8001768:	430a      	orrs	r2, r1
 800176a:	b292      	uxth	r2, r2
 800176c:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	001a      	movs	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	18d3      	adds	r3, r2, r3
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	b29b      	uxth	r3, r3
 8001780:	4a19      	ldr	r2, [pc, #100]	; (80017e8 <HAL_PCD_EP_Close+0x3ec>)
 8001782:	4013      	ands	r3, r2
 8001784:	b29c      	uxth	r4, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	001a      	movs	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	18d3      	adds	r3, r2, r3
 8001794:	4a15      	ldr	r2, [pc, #84]	; (80017ec <HAL_PCD_EP_Close+0x3f0>)
 8001796:	4322      	orrs	r2, r4
 8001798:	b292      	uxth	r2, r2
 800179a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	001a      	movs	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	18d3      	adds	r3, r2, r3
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <HAL_PCD_EP_Close+0x3f8>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	b29c      	uxth	r4, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	001a      	movs	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	18d3      	adds	r3, r2, r3
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <HAL_PCD_EP_Close+0x3f0>)
 80017c4:	4322      	orrs	r2, r4
 80017c6:	b292      	uxth	r2, r2
 80017c8:	801a      	strh	r2, [r3, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	23f4      	movs	r3, #244	; 0xf4
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	2100      	movs	r1, #0
 80017d2:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	0018      	movs	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	b005      	add	sp, #20
 80017dc:	bd90      	pop	{r4, r7, pc}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	00000f0f 	.word	0x00000f0f
 80017e4:	ffff80c0 	.word	0xffff80c0
 80017e8:	ffff8fbf 	.word	0xffff8fbf
 80017ec:	ffff8080 	.word	0xffff8080
 80017f0:	ffffc080 	.word	0xffffc080
 80017f4:	ffffbf8f 	.word	0xffffbf8f

080017f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b08b      	sub	sp, #44	; 0x2c
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	200b      	movs	r0, #11
 8001806:	183b      	adds	r3, r7, r0
 8001808:	1c0a      	adds	r2, r1, #0
 800180a:	701a      	strb	r2, [r3, #0]
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800180c:	0001      	movs	r1, r0
 800180e:	187b      	adds	r3, r7, r1
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	227f      	movs	r2, #127	; 0x7f
 8001814:	401a      	ands	r2, r3
 8001816:	0013      	movs	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	1a9b      	subs	r3, r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	3309      	adds	r3, #9
 8001820:	33ff      	adds	r3, #255	; 0xff
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	18d3      	adds	r3, r2, r3
 8001826:	61fb      	str	r3, [r7, #28]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	2200      	movs	r2, #0
 800183e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8001840:	187b      	adds	r3, r7, r1
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	227f      	movs	r2, #127	; 0x7f
 8001846:	4013      	ands	r3, r2
 8001848:	b2da      	uxtb	r2, r3
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	701a      	strb	r2, [r3, #0]
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	695a      	ldr	r2, [r3, #20]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	429a      	cmp	r2, r3
 8001858:	d909      	bls.n	800186e <HAL_PCD_EP_Receive+0x76>
  {
    len=ep->maxpacket;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	695a      	ldr	r2, [r3, #20]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	1ad2      	subs	r2, r2, r3
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	615a      	str	r2, [r3, #20]
 800186c:	e005      	b.n	800187a <HAL_PCD_EP_Receive+0x82>
  }
  else
  {
    len=ep->xfer_len;
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	2200      	movs	r2, #0
 8001878:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	7a9b      	ldrb	r3, [r3, #10]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d145      	bne.n	800190e <HAL_PCD_EP_Receive+0x116>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2250      	movs	r2, #80	; 0x50
 8001888:	5a9b      	ldrh	r3, [r3, r2]
 800188a:	b29b      	uxth	r3, r3
 800188c:	001a      	movs	r2, r3
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	18d3      	adds	r3, r2, r3
 8001896:	001a      	movs	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	18d3      	adds	r3, r2, r3
 800189e:	4a90      	ldr	r2, [pc, #576]	; (8001ae0 <HAL_PCD_EP_Receive+0x2e8>)
 80018a0:	4694      	mov	ip, r2
 80018a2:	4463      	add	r3, ip
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	2b3e      	cmp	r3, #62	; 0x3e
 80018aa:	d919      	bls.n	80018e0 <HAL_PCD_EP_Receive+0xe8>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	095a      	lsrs	r2, r3, #5
 80018b0:	2326      	movs	r3, #38	; 0x26
 80018b2:	18fb      	adds	r3, r7, r3
 80018b4:	801a      	strh	r2, [r3, #0]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	221f      	movs	r2, #31
 80018ba:	4013      	ands	r3, r2
 80018bc:	d105      	bne.n	80018ca <HAL_PCD_EP_Receive+0xd2>
 80018be:	2126      	movs	r1, #38	; 0x26
 80018c0:	187b      	adds	r3, r7, r1
 80018c2:	881a      	ldrh	r2, [r3, #0]
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	3a01      	subs	r2, #1
 80018c8:	801a      	strh	r2, [r3, #0]
 80018ca:	2326      	movs	r3, #38	; 0x26
 80018cc:	18fb      	adds	r3, r7, r3
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	029b      	lsls	r3, r3, #10
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	4a83      	ldr	r2, [pc, #524]	; (8001ae4 <HAL_PCD_EP_Receive+0x2ec>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	b29a      	uxth	r2, r3
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	801a      	strh	r2, [r3, #0]
 80018de:	e0da      	b.n	8001a96 <HAL_PCD_EP_Receive+0x29e>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	085a      	lsrs	r2, r3, #1
 80018e4:	2326      	movs	r3, #38	; 0x26
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	801a      	strh	r2, [r3, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	2201      	movs	r2, #1
 80018ee:	4013      	ands	r3, r2
 80018f0:	d005      	beq.n	80018fe <HAL_PCD_EP_Receive+0x106>
 80018f2:	2126      	movs	r1, #38	; 0x26
 80018f4:	187b      	adds	r3, r7, r1
 80018f6:	881a      	ldrh	r2, [r3, #0]
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	3201      	adds	r2, #1
 80018fc:	801a      	strh	r2, [r3, #0]
 80018fe:	2326      	movs	r3, #38	; 0x26
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	029b      	lsls	r3, r3, #10
 8001906:	b29a      	uxth	r2, r3
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	801a      	strh	r2, [r3, #0]
 800190c:	e0c3      	b.n	8001a96 <HAL_PCD_EP_Receive+0x29e>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	785b      	ldrb	r3, [r3, #1]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d145      	bne.n	80019a2 <HAL_PCD_EP_Receive+0x1aa>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2250      	movs	r2, #80	; 0x50
 800191c:	5a9b      	ldrh	r3, [r3, r2]
 800191e:	b29b      	uxth	r3, r3
 8001920:	001a      	movs	r2, r3
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	18d3      	adds	r3, r2, r3
 800192a:	001a      	movs	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	18d3      	adds	r3, r2, r3
 8001932:	4a6d      	ldr	r2, [pc, #436]	; (8001ae8 <HAL_PCD_EP_Receive+0x2f0>)
 8001934:	4694      	mov	ip, r2
 8001936:	4463      	add	r3, ip
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	2b3e      	cmp	r3, #62	; 0x3e
 800193e:	d919      	bls.n	8001974 <HAL_PCD_EP_Receive+0x17c>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	095a      	lsrs	r2, r3, #5
 8001944:	2324      	movs	r3, #36	; 0x24
 8001946:	18fb      	adds	r3, r7, r3
 8001948:	801a      	strh	r2, [r3, #0]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	221f      	movs	r2, #31
 800194e:	4013      	ands	r3, r2
 8001950:	d105      	bne.n	800195e <HAL_PCD_EP_Receive+0x166>
 8001952:	2124      	movs	r1, #36	; 0x24
 8001954:	187b      	adds	r3, r7, r1
 8001956:	881a      	ldrh	r2, [r3, #0]
 8001958:	187b      	adds	r3, r7, r1
 800195a:	3a01      	subs	r2, #1
 800195c:	801a      	strh	r2, [r3, #0]
 800195e:	2324      	movs	r3, #36	; 0x24
 8001960:	18fb      	adds	r3, r7, r3
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	029b      	lsls	r3, r3, #10
 8001966:	b29b      	uxth	r3, r3
 8001968:	4a5e      	ldr	r2, [pc, #376]	; (8001ae4 <HAL_PCD_EP_Receive+0x2ec>)
 800196a:	4313      	orrs	r3, r2
 800196c:	b29a      	uxth	r2, r3
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	801a      	strh	r2, [r3, #0]
 8001972:	e02e      	b.n	80019d2 <HAL_PCD_EP_Receive+0x1da>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	085a      	lsrs	r2, r3, #1
 8001978:	2324      	movs	r3, #36	; 0x24
 800197a:	18fb      	adds	r3, r7, r3
 800197c:	801a      	strh	r2, [r3, #0]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2201      	movs	r2, #1
 8001982:	4013      	ands	r3, r2
 8001984:	d005      	beq.n	8001992 <HAL_PCD_EP_Receive+0x19a>
 8001986:	2124      	movs	r1, #36	; 0x24
 8001988:	187b      	adds	r3, r7, r1
 800198a:	881a      	ldrh	r2, [r3, #0]
 800198c:	187b      	adds	r3, r7, r1
 800198e:	3201      	adds	r2, #1
 8001990:	801a      	strh	r2, [r3, #0]
 8001992:	2324      	movs	r3, #36	; 0x24
 8001994:	18fb      	adds	r3, r7, r3
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	029b      	lsls	r3, r3, #10
 800199a:	b29a      	uxth	r2, r3
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	801a      	strh	r2, [r3, #0]
 80019a0:	e017      	b.n	80019d2 <HAL_PCD_EP_Receive+0x1da>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	785b      	ldrb	r3, [r3, #1]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d113      	bne.n	80019d2 <HAL_PCD_EP_Receive+0x1da>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2250      	movs	r2, #80	; 0x50
 80019b0:	5a9b      	ldrh	r3, [r3, r2]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	001a      	movs	r2, r3
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	18d3      	adds	r3, r2, r3
 80019be:	001a      	movs	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	18d3      	adds	r3, r2, r3
 80019c6:	4a48      	ldr	r2, [pc, #288]	; (8001ae8 <HAL_PCD_EP_Receive+0x2f0>)
 80019c8:	4694      	mov	ip, r2
 80019ca:	4463      	add	r3, ip
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	b292      	uxth	r2, r2
 80019d0:	801a      	strh	r2, [r3, #0]
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	785b      	ldrb	r3, [r3, #1]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d145      	bne.n	8001a66 <HAL_PCD_EP_Receive+0x26e>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2250      	movs	r2, #80	; 0x50
 80019e0:	5a9b      	ldrh	r3, [r3, r2]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	001a      	movs	r2, r3
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	18d3      	adds	r3, r2, r3
 80019ee:	001a      	movs	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	18d3      	adds	r3, r2, r3
 80019f6:	4a3a      	ldr	r2, [pc, #232]	; (8001ae0 <HAL_PCD_EP_Receive+0x2e8>)
 80019f8:	4694      	mov	ip, r2
 80019fa:	4463      	add	r3, ip
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	2b3e      	cmp	r3, #62	; 0x3e
 8001a02:	d919      	bls.n	8001a38 <HAL_PCD_EP_Receive+0x240>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	095a      	lsrs	r2, r3, #5
 8001a08:	2322      	movs	r3, #34	; 0x22
 8001a0a:	18fb      	adds	r3, r7, r3
 8001a0c:	801a      	strh	r2, [r3, #0]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	221f      	movs	r2, #31
 8001a12:	4013      	ands	r3, r2
 8001a14:	d105      	bne.n	8001a22 <HAL_PCD_EP_Receive+0x22a>
 8001a16:	2122      	movs	r1, #34	; 0x22
 8001a18:	187b      	adds	r3, r7, r1
 8001a1a:	881a      	ldrh	r2, [r3, #0]
 8001a1c:	187b      	adds	r3, r7, r1
 8001a1e:	3a01      	subs	r2, #1
 8001a20:	801a      	strh	r2, [r3, #0]
 8001a22:	2322      	movs	r3, #34	; 0x22
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	029b      	lsls	r3, r3, #10
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	4a2d      	ldr	r2, [pc, #180]	; (8001ae4 <HAL_PCD_EP_Receive+0x2ec>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	801a      	strh	r2, [r3, #0]
 8001a36:	e02e      	b.n	8001a96 <HAL_PCD_EP_Receive+0x29e>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	085a      	lsrs	r2, r3, #1
 8001a3c:	2322      	movs	r3, #34	; 0x22
 8001a3e:	18fb      	adds	r3, r7, r3
 8001a40:	801a      	strh	r2, [r3, #0]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	2201      	movs	r2, #1
 8001a46:	4013      	ands	r3, r2
 8001a48:	d005      	beq.n	8001a56 <HAL_PCD_EP_Receive+0x25e>
 8001a4a:	2122      	movs	r1, #34	; 0x22
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	881a      	ldrh	r2, [r3, #0]
 8001a50:	187b      	adds	r3, r7, r1
 8001a52:	3201      	adds	r2, #1
 8001a54:	801a      	strh	r2, [r3, #0]
 8001a56:	2322      	movs	r3, #34	; 0x22
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	029b      	lsls	r3, r3, #10
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	801a      	strh	r2, [r3, #0]
 8001a64:	e017      	b.n	8001a96 <HAL_PCD_EP_Receive+0x29e>
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	785b      	ldrb	r3, [r3, #1]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d113      	bne.n	8001a96 <HAL_PCD_EP_Receive+0x29e>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2250      	movs	r2, #80	; 0x50
 8001a74:	5a9b      	ldrh	r3, [r3, r2]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	001a      	movs	r2, r3
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	18d3      	adds	r3, r2, r3
 8001a82:	001a      	movs	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	18d3      	adds	r3, r2, r3
 8001a8a:	4a15      	ldr	r2, [pc, #84]	; (8001ae0 <HAL_PCD_EP_Receive+0x2e8>)
 8001a8c:	4694      	mov	ip, r2
 8001a8e:	4463      	add	r3, ip
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	b292      	uxth	r2, r2
 8001a94:	801a      	strh	r2, [r3, #0]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	001a      	movs	r2, r3
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	18d3      	adds	r3, r2, r3
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4a10      	ldr	r2, [pc, #64]	; (8001aec <HAL_PCD_EP_Receive+0x2f4>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	b29c      	uxth	r4, r3
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	015b      	lsls	r3, r3, #5
 8001ab2:	4063      	eors	r3, r4
 8001ab4:	b29c      	uxth	r4, r3
 8001ab6:	2380      	movs	r3, #128	; 0x80
 8001ab8:	019b      	lsls	r3, r3, #6
 8001aba:	4063      	eors	r3, r4
 8001abc:	b29c      	uxth	r4, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	001a      	movs	r2, r3
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	18d3      	adds	r3, r2, r3
 8001acc:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <HAL_PCD_EP_Receive+0x2f8>)
 8001ace:	4322      	orrs	r2, r4
 8001ad0:	b292      	uxth	r2, r2
 8001ad2:	801a      	strh	r2, [r3, #0]
  
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b00b      	add	sp, #44	; 0x2c
 8001adc:	bd90      	pop	{r4, r7, pc}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	00000406 	.word	0x00000406
 8001ae4:	ffff8000 	.word	0xffff8000
 8001ae8:	00000402 	.word	0x00000402
 8001aec:	ffffbf8f 	.word	0xffffbf8f
 8001af0:	ffff8080 	.word	0xffff8080

08001af4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b08b      	sub	sp, #44	; 0x2c
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	200b      	movs	r0, #11
 8001b02:	183b      	adds	r3, r7, r0
 8001b04:	1c0a      	adds	r2, r1, #0
 8001b06:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0U;
 8001b08:	2326      	movs	r3, #38	; 0x26
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	801a      	strh	r2, [r3, #0]
    
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001b10:	0001      	movs	r1, r0
 8001b12:	187b      	adds	r3, r7, r1
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	227f      	movs	r2, #127	; 0x7f
 8001b18:	401a      	ands	r2, r3
 8001b1a:	0013      	movs	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	1a9b      	subs	r3, r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	3328      	adds	r3, #40	; 0x28
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	18d3      	adds	r3, r2, r3
 8001b28:	61fb      	str	r3, [r7, #28]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 8001b42:	187b      	adds	r3, r7, r1
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	227f      	movs	r2, #127	; 0x7f
 8001b48:	4013      	ands	r3, r2
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	701a      	strb	r2, [r3, #0]
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	695a      	ldr	r2, [r3, #20]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d909      	bls.n	8001b70 <HAL_PCD_EP_Transmit+0x7c>
  {
    len=ep->maxpacket;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	1ad2      	subs	r2, r2, r3
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	615a      	str	r2, [r3, #20]
 8001b6e:	e005      	b.n	8001b7c <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {  
    len=ep->xfer_len;
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0U) 
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	7a9b      	ldrb	r3, [r3, #10]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d11e      	bne.n	8001bc2 <HAL_PCD_EP_Transmit+0xce>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6818      	ldr	r0, [r3, #0]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	6919      	ldr	r1, [r3, #16]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	889a      	ldrh	r2, [r3, #4]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	f000 fb02 	bl	800219c <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2250      	movs	r2, #80	; 0x50
 8001b9e:	5a9b      	ldrh	r3, [r3, r2]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	18d3      	adds	r3, r2, r3
 8001bac:	001a      	movs	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	18d3      	adds	r3, r2, r3
 8001bb4:	4aa4      	ldr	r2, [pc, #656]	; (8001e48 <HAL_PCD_EP_Transmit+0x354>)
 8001bb6:	4694      	mov	ip, r2
 8001bb8:	4463      	add	r3, ip
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	b292      	uxth	r2, r2
 8001bbe:	801a      	strh	r2, [r3, #0]
 8001bc0:	e11f      	b.n	8001e02 <HAL_PCD_EP_Transmit+0x30e>
  }
  else
  {
    /*Write the data to the USB endpoint*/
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	001a      	movs	r2, r3
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	18d3      	adds	r3, r2, r3
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	001a      	movs	r2, r3
 8001bd6:	2340      	movs	r3, #64	; 0x40
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2b40      	cmp	r3, #64	; 0x40
 8001bdc:	d167      	bne.n	8001cae <HAL_PCD_EP_Transmit+0x1ba>
    {
      /*Set the Double buffer counter for pmabuffer1*/
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	785b      	ldrb	r3, [r3, #1]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d145      	bne.n	8001c72 <HAL_PCD_EP_Transmit+0x17e>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2250      	movs	r2, #80	; 0x50
 8001bec:	5a9b      	ldrh	r3, [r3, r2]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	18d3      	adds	r3, r2, r3
 8001bfa:	001a      	movs	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	18d3      	adds	r3, r2, r3
 8001c02:	4a92      	ldr	r2, [pc, #584]	; (8001e4c <HAL_PCD_EP_Transmit+0x358>)
 8001c04:	4694      	mov	ip, r2
 8001c06:	4463      	add	r3, ip
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b3e      	cmp	r3, #62	; 0x3e
 8001c0e:	d919      	bls.n	8001c44 <HAL_PCD_EP_Transmit+0x150>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	095a      	lsrs	r2, r3, #5
 8001c14:	2324      	movs	r3, #36	; 0x24
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	801a      	strh	r2, [r3, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	221f      	movs	r2, #31
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d105      	bne.n	8001c2e <HAL_PCD_EP_Transmit+0x13a>
 8001c22:	2124      	movs	r1, #36	; 0x24
 8001c24:	187b      	adds	r3, r7, r1
 8001c26:	881a      	ldrh	r2, [r3, #0]
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	3a01      	subs	r2, #1
 8001c2c:	801a      	strh	r2, [r3, #0]
 8001c2e:	2324      	movs	r3, #36	; 0x24
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	029b      	lsls	r3, r3, #10
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	4a85      	ldr	r2, [pc, #532]	; (8001e50 <HAL_PCD_EP_Transmit+0x35c>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	801a      	strh	r2, [r3, #0]
 8001c42:	e02e      	b.n	8001ca2 <HAL_PCD_EP_Transmit+0x1ae>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	085a      	lsrs	r2, r3, #1
 8001c48:	2324      	movs	r3, #36	; 0x24
 8001c4a:	18fb      	adds	r3, r7, r3
 8001c4c:	801a      	strh	r2, [r3, #0]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2201      	movs	r2, #1
 8001c52:	4013      	ands	r3, r2
 8001c54:	d005      	beq.n	8001c62 <HAL_PCD_EP_Transmit+0x16e>
 8001c56:	2124      	movs	r1, #36	; 0x24
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	881a      	ldrh	r2, [r3, #0]
 8001c5c:	187b      	adds	r3, r7, r1
 8001c5e:	3201      	adds	r2, #1
 8001c60:	801a      	strh	r2, [r3, #0]
 8001c62:	2324      	movs	r3, #36	; 0x24
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	029b      	lsls	r3, r3, #10
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	801a      	strh	r2, [r3, #0]
 8001c70:	e017      	b.n	8001ca2 <HAL_PCD_EP_Transmit+0x1ae>
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	785b      	ldrb	r3, [r3, #1]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d113      	bne.n	8001ca2 <HAL_PCD_EP_Transmit+0x1ae>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2250      	movs	r2, #80	; 0x50
 8001c80:	5a9b      	ldrh	r3, [r3, r2]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	001a      	movs	r2, r3
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	18d3      	adds	r3, r2, r3
 8001c8e:	001a      	movs	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	18d3      	adds	r3, r2, r3
 8001c96:	4a6d      	ldr	r2, [pc, #436]	; (8001e4c <HAL_PCD_EP_Transmit+0x358>)
 8001c98:	4694      	mov	ip, r2
 8001c9a:	4463      	add	r3, ip
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	b292      	uxth	r2, r2
 8001ca0:	801a      	strh	r2, [r3, #0]
      pmabuffer = ep->pmaaddr1;
 8001ca2:	2326      	movs	r3, #38	; 0x26
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	8912      	ldrh	r2, [r2, #8]
 8001caa:	801a      	strh	r2, [r3, #0]
 8001cac:	e066      	b.n	8001d7c <HAL_PCD_EP_Transmit+0x288>
    }
    else
    {
      /*Set the Double buffer counter for pmabuffer0*/
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	785b      	ldrb	r3, [r3, #1]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d145      	bne.n	8001d42 <HAL_PCD_EP_Transmit+0x24e>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2250      	movs	r2, #80	; 0x50
 8001cbc:	5a9b      	ldrh	r3, [r3, r2]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	001a      	movs	r2, r3
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	18d3      	adds	r3, r2, r3
 8001cca:	001a      	movs	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	18d3      	adds	r3, r2, r3
 8001cd2:	4a5d      	ldr	r2, [pc, #372]	; (8001e48 <HAL_PCD_EP_Transmit+0x354>)
 8001cd4:	4694      	mov	ip, r2
 8001cd6:	4463      	add	r3, ip
 8001cd8:	61bb      	str	r3, [r7, #24]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b3e      	cmp	r3, #62	; 0x3e
 8001cde:	d919      	bls.n	8001d14 <HAL_PCD_EP_Transmit+0x220>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	095a      	lsrs	r2, r3, #5
 8001ce4:	2322      	movs	r3, #34	; 0x22
 8001ce6:	18fb      	adds	r3, r7, r3
 8001ce8:	801a      	strh	r2, [r3, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	221f      	movs	r2, #31
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d105      	bne.n	8001cfe <HAL_PCD_EP_Transmit+0x20a>
 8001cf2:	2122      	movs	r1, #34	; 0x22
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	881a      	ldrh	r2, [r3, #0]
 8001cf8:	187b      	adds	r3, r7, r1
 8001cfa:	3a01      	subs	r2, #1
 8001cfc:	801a      	strh	r2, [r3, #0]
 8001cfe:	2322      	movs	r3, #34	; 0x22
 8001d00:	18fb      	adds	r3, r7, r3
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	029b      	lsls	r3, r3, #10
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	4a51      	ldr	r2, [pc, #324]	; (8001e50 <HAL_PCD_EP_Transmit+0x35c>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	801a      	strh	r2, [r3, #0]
 8001d12:	e02e      	b.n	8001d72 <HAL_PCD_EP_Transmit+0x27e>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	085a      	lsrs	r2, r3, #1
 8001d18:	2322      	movs	r3, #34	; 0x22
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	801a      	strh	r2, [r3, #0]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2201      	movs	r2, #1
 8001d22:	4013      	ands	r3, r2
 8001d24:	d005      	beq.n	8001d32 <HAL_PCD_EP_Transmit+0x23e>
 8001d26:	2122      	movs	r1, #34	; 0x22
 8001d28:	187b      	adds	r3, r7, r1
 8001d2a:	881a      	ldrh	r2, [r3, #0]
 8001d2c:	187b      	adds	r3, r7, r1
 8001d2e:	3201      	adds	r2, #1
 8001d30:	801a      	strh	r2, [r3, #0]
 8001d32:	2322      	movs	r3, #34	; 0x22
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	029b      	lsls	r3, r3, #10
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	801a      	strh	r2, [r3, #0]
 8001d40:	e017      	b.n	8001d72 <HAL_PCD_EP_Transmit+0x27e>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	785b      	ldrb	r3, [r3, #1]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d113      	bne.n	8001d72 <HAL_PCD_EP_Transmit+0x27e>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2250      	movs	r2, #80	; 0x50
 8001d50:	5a9b      	ldrh	r3, [r3, r2]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	001a      	movs	r2, r3
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	18d3      	adds	r3, r2, r3
 8001d5e:	001a      	movs	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	18d3      	adds	r3, r2, r3
 8001d66:	4a38      	ldr	r2, [pc, #224]	; (8001e48 <HAL_PCD_EP_Transmit+0x354>)
 8001d68:	4694      	mov	ip, r2
 8001d6a:	4463      	add	r3, ip
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	b292      	uxth	r2, r2
 8001d70:	801a      	strh	r2, [r3, #0]
      pmabuffer = ep->pmaaddr0;
 8001d72:	2326      	movs	r3, #38	; 0x26
 8001d74:	18fb      	adds	r3, r7, r3
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	88d2      	ldrh	r2, [r2, #6]
 8001d7a:	801a      	strh	r2, [r3, #0]
    }

    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	6919      	ldr	r1, [r3, #16]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b29c      	uxth	r4, r3
 8001d88:	2326      	movs	r3, #38	; 0x26
 8001d8a:	18fb      	adds	r3, r7, r3
 8001d8c:	881a      	ldrh	r2, [r3, #0]
 8001d8e:	0023      	movs	r3, r4
 8001d90:	f000 fa04 	bl	800219c <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	785b      	ldrb	r3, [r3, #1]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d117      	bne.n	8001dcc <HAL_PCD_EP_Transmit+0x2d8>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	001a      	movs	r2, r3
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	18d3      	adds	r3, r2, r3
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	4a29      	ldr	r2, [pc, #164]	; (8001e54 <HAL_PCD_EP_Transmit+0x360>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0019      	movs	r1, r3
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	18cb      	adds	r3, r1, r3
 8001dc2:	4925      	ldr	r1, [pc, #148]	; (8001e58 <HAL_PCD_EP_Transmit+0x364>)
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	b292      	uxth	r2, r2
 8001dc8:	801a      	strh	r2, [r3, #0]
 8001dca:	e01a      	b.n	8001e02 <HAL_PCD_EP_Transmit+0x30e>
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	785b      	ldrb	r3, [r3, #1]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d116      	bne.n	8001e02 <HAL_PCD_EP_Transmit+0x30e>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	001a      	movs	r2, r3
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	18d3      	adds	r3, r2, r3
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	4a1b      	ldr	r2, [pc, #108]	; (8001e54 <HAL_PCD_EP_Transmit+0x360>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	0019      	movs	r1, r3
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	18cb      	adds	r3, r1, r3
 8001dfa:	4918      	ldr	r1, [pc, #96]	; (8001e5c <HAL_PCD_EP_Transmit+0x368>)
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	b292      	uxth	r2, r2
 8001e00:	801a      	strh	r2, [r3, #0]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	001a      	movs	r2, r3
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	18d3      	adds	r3, r2, r3
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <HAL_PCD_EP_Transmit+0x36c>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	b29c      	uxth	r4, r3
 8001e1a:	2310      	movs	r3, #16
 8001e1c:	4063      	eors	r3, r4
 8001e1e:	b29c      	uxth	r4, r3
 8001e20:	2320      	movs	r3, #32
 8001e22:	4063      	eors	r3, r4
 8001e24:	b29c      	uxth	r4, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	001a      	movs	r2, r3
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	18d3      	adds	r3, r2, r3
 8001e34:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <HAL_PCD_EP_Transmit+0x370>)
 8001e36:	4322      	orrs	r2, r4
 8001e38:	b292      	uxth	r2, r2
 8001e3a:	801a      	strh	r2, [r3, #0]
     
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	0018      	movs	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b00b      	add	sp, #44	; 0x2c
 8001e44:	bd90      	pop	{r4, r7, pc}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	00000402 	.word	0x00000402
 8001e4c:	00000406 	.word	0x00000406
 8001e50:	ffff8000 	.word	0xffff8000
 8001e54:	00000f0f 	.word	0x00000f0f
 8001e58:	ffff80c0 	.word	0xffff80c0
 8001e5c:	ffffc080 	.word	0xffffc080
 8001e60:	ffff8fbf 	.word	0xffff8fbf
 8001e64:	ffff8080 	.word	0xffff8080

08001e68 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	000a      	movs	r2, r1
 8001e72:	1cfb      	adds	r3, r7, #3
 8001e74:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	23f4      	movs	r3, #244	; 0xf4
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	5cd3      	ldrb	r3, [r2, r3]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_PCD_EP_SetStall+0x1e>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e099      	b.n	8001fba <HAL_PCD_EP_SetStall+0x152>
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	23f4      	movs	r3, #244	; 0xf4
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	54d1      	strb	r1, [r2, r3]
   
  if ((0x80U & ep_addr) == 0x80U)
 8001e90:	1cfb      	adds	r3, r7, #3
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	b25b      	sxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	da0c      	bge.n	8001eb4 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001e9a:	1cfb      	adds	r3, r7, #3
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	227f      	movs	r2, #127	; 0x7f
 8001ea0:	401a      	ands	r2, r3
 8001ea2:	0013      	movs	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	1a9b      	subs	r3, r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	3328      	adds	r3, #40	; 0x28
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	18d3      	adds	r3, r2, r3
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	e00a      	b.n	8001eca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001eb4:	1cfb      	adds	r3, r7, #3
 8001eb6:	781a      	ldrb	r2, [r3, #0]
 8001eb8:	0013      	movs	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	3309      	adds	r3, #9
 8001ec2:	33ff      	adds	r3, #255	; 0xff
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	18d3      	adds	r3, r2, r3
 8001ec8:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8001ed0:	1cfb      	adds	r3, r7, #3
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	227f      	movs	r2, #127	; 0x7f
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001ede:	1cfb      	adds	r3, r7, #3
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	b25b      	sxtb	r3, r3
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	09db      	lsrs	r3, r3, #7
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	001a      	movs	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	705a      	strb	r2, [r3, #1]
  
  if (ep->num == 0U)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d120      	bne.n	8001f3a <HAL_PCD_EP_SetStall+0xd2>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	001a      	movs	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	18d3      	adds	r3, r2, r3
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	001a      	movs	r2, r3
 8001f0c:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <HAL_PCD_EP_SetStall+0x15c>)
 8001f0e:	401a      	ands	r2, r3
 8001f10:	0014      	movs	r4, r2
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	015b      	lsls	r3, r3, #5
 8001f16:	4063      	eors	r3, r4
 8001f18:	001c      	movs	r4, r3
 8001f1a:	2310      	movs	r3, #16
 8001f1c:	4063      	eors	r3, r4
 8001f1e:	001c      	movs	r4, r3
 8001f20:	b2a2      	uxth	r2, r4
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	0019      	movs	r1, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	18cb      	adds	r3, r1, r3
 8001f30:	4925      	ldr	r1, [pc, #148]	; (8001fc8 <HAL_PCD_EP_SetStall+0x160>)
 8001f32:	430a      	orrs	r2, r1
 8001f34:	b292      	uxth	r2, r2
 8001f36:	801a      	strh	r2, [r3, #0]
 8001f38:	e039      	b.n	8001fae <HAL_PCD_EP_SetStall+0x146>
  }
  else
  {
    if (ep->is_in)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	785b      	ldrb	r3, [r3, #1]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d01a      	beq.n	8001f78 <HAL_PCD_EP_SetStall+0x110>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	001a      	movs	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	18d3      	adds	r3, r2, r3
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <HAL_PCD_EP_SetStall+0x164>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	b29c      	uxth	r4, r3
 8001f5a:	2310      	movs	r3, #16
 8001f5c:	4063      	eors	r3, r4
 8001f5e:	b29c      	uxth	r4, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	001a      	movs	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	18d3      	adds	r3, r2, r3
 8001f6e:	4a16      	ldr	r2, [pc, #88]	; (8001fc8 <HAL_PCD_EP_SetStall+0x160>)
 8001f70:	4322      	orrs	r2, r4
 8001f72:	b292      	uxth	r2, r2
 8001f74:	801a      	strh	r2, [r3, #0]
 8001f76:	e01a      	b.n	8001fae <HAL_PCD_EP_SetStall+0x146>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	001a      	movs	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	18d3      	adds	r3, r2, r3
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	4a11      	ldr	r2, [pc, #68]	; (8001fd0 <HAL_PCD_EP_SetStall+0x168>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	b29c      	uxth	r4, r3
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	015b      	lsls	r3, r3, #5
 8001f94:	4063      	eors	r3, r4
 8001f96:	b29c      	uxth	r4, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	001a      	movs	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	18d3      	adds	r3, r2, r3
 8001fa6:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <HAL_PCD_EP_SetStall+0x160>)
 8001fa8:	4322      	orrs	r2, r4
 8001faa:	b292      	uxth	r2, r2
 8001fac:	801a      	strh	r2, [r3, #0]
    }
  }
  __HAL_UNLOCK(hpcd); 
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	23f4      	movs	r3, #244	; 0xf4
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	54d1      	strb	r1, [r2, r3]
  
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	0018      	movs	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b005      	add	sp, #20
 8001fc0:	bd90      	pop	{r4, r7, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	0000bfbf 	.word	0x0000bfbf
 8001fc8:	ffff8080 	.word	0xffff8080
 8001fcc:	ffff8fbf 	.word	0xffff8fbf
 8001fd0:	ffffbf8f 	.word	0xffffbf8f

08001fd4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	000a      	movs	r2, r1
 8001fde:	1cfb      	adds	r3, r7, #3
 8001fe0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  if ((0x80U & ep_addr) == 0x80U)
 8001fe2:	1cfb      	adds	r3, r7, #3
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	b25b      	sxtb	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	da0c      	bge.n	8002006 <HAL_PCD_EP_ClrStall+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001fec:	1cfb      	adds	r3, r7, #3
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	227f      	movs	r2, #127	; 0x7f
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	0013      	movs	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	1a9b      	subs	r3, r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	3328      	adds	r3, #40	; 0x28
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	18d3      	adds	r3, r2, r3
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	e00a      	b.n	800201c <HAL_PCD_EP_ClrStall+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002006:	1cfb      	adds	r3, r7, #3
 8002008:	781a      	ldrb	r2, [r3, #0]
 800200a:	0013      	movs	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	1a9b      	subs	r3, r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	3309      	adds	r3, #9
 8002014:	33ff      	adds	r3, #255	; 0xff
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	18d3      	adds	r3, r2, r3
 800201a:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8002022:	1cfb      	adds	r3, r7, #3
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	227f      	movs	r2, #127	; 0x7f
 8002028:	4013      	ands	r3, r2
 800202a:	b2da      	uxtb	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8002030:	1cfb      	adds	r3, r7, #3
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	b25b      	sxtb	r3, r3
 8002036:	b2db      	uxtb	r3, r3
 8002038:	09db      	lsrs	r3, r3, #7
 800203a:	b2db      	uxtb	r3, r3
 800203c:	001a      	movs	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	23f4      	movs	r3, #244	; 0xf4
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	5cd3      	ldrb	r3, [r2, r3]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_PCD_EP_ClrStall+0x7e>
 800204e:	2302      	movs	r3, #2
 8002050:	e094      	b.n	800217c <HAL_PCD_EP_ClrStall+0x1a8>
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	23f4      	movs	r3, #244	; 0xf4
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	2101      	movs	r1, #1
 800205a:	54d1      	strb	r1, [r2, r3]
  
  if (ep->is_in)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	785b      	ldrb	r3, [r3, #1]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d041      	beq.n	80020e8 <HAL_PCD_EP_ClrStall+0x114>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	001a      	movs	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	18d3      	adds	r3, r2, r3
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	001a      	movs	r2, r3
 8002078:	2340      	movs	r3, #64	; 0x40
 800207a:	4013      	ands	r3, r2
 800207c:	d016      	beq.n	80020ac <HAL_PCD_EP_ClrStall+0xd8>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	001a      	movs	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	18d3      	adds	r3, r2, r3
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	b29b      	uxth	r3, r3
 8002090:	4a3c      	ldr	r2, [pc, #240]	; (8002184 <HAL_PCD_EP_ClrStall+0x1b0>)
 8002092:	4013      	ands	r3, r2
 8002094:	b29a      	uxth	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	0019      	movs	r1, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	18cb      	adds	r3, r1, r3
 80020a4:	4938      	ldr	r1, [pc, #224]	; (8002188 <HAL_PCD_EP_ClrStall+0x1b4>)
 80020a6:	430a      	orrs	r2, r1
 80020a8:	b292      	uxth	r2, r2
 80020aa:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	001a      	movs	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	18d3      	adds	r3, r2, r3
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	4a33      	ldr	r2, [pc, #204]	; (800218c <HAL_PCD_EP_ClrStall+0x1b8>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	b29c      	uxth	r4, r3
 80020c4:	2310      	movs	r3, #16
 80020c6:	4063      	eors	r3, r4
 80020c8:	b29c      	uxth	r4, r3
 80020ca:	2320      	movs	r3, #32
 80020cc:	4063      	eors	r3, r4
 80020ce:	b29c      	uxth	r4, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	001a      	movs	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	18d3      	adds	r3, r2, r3
 80020de:	4a2c      	ldr	r2, [pc, #176]	; (8002190 <HAL_PCD_EP_ClrStall+0x1bc>)
 80020e0:	4322      	orrs	r2, r4
 80020e2:	b292      	uxth	r2, r2
 80020e4:	801a      	strh	r2, [r3, #0]
 80020e6:	e043      	b.n	8002170 <HAL_PCD_EP_ClrStall+0x19c>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	001a      	movs	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	18d3      	adds	r3, r2, r3
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	001a      	movs	r2, r3
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	01db      	lsls	r3, r3, #7
 8002100:	4013      	ands	r3, r2
 8002102:	d016      	beq.n	8002132 <HAL_PCD_EP_ClrStall+0x15e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	001a      	movs	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	18d3      	adds	r3, r2, r3
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	b29b      	uxth	r3, r3
 8002116:	4a1b      	ldr	r2, [pc, #108]	; (8002184 <HAL_PCD_EP_ClrStall+0x1b0>)
 8002118:	4013      	ands	r3, r2
 800211a:	b29a      	uxth	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	0019      	movs	r1, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	18cb      	adds	r3, r1, r3
 800212a:	491a      	ldr	r1, [pc, #104]	; (8002194 <HAL_PCD_EP_ClrStall+0x1c0>)
 800212c:	430a      	orrs	r2, r1
 800212e:	b292      	uxth	r2, r2
 8002130:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	001a      	movs	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	18d3      	adds	r3, r2, r3
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	4a14      	ldr	r2, [pc, #80]	; (8002198 <HAL_PCD_EP_ClrStall+0x1c4>)
 8002146:	4013      	ands	r3, r2
 8002148:	b29c      	uxth	r4, r3
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	015b      	lsls	r3, r3, #5
 800214e:	4063      	eors	r3, r4
 8002150:	b29c      	uxth	r4, r3
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	019b      	lsls	r3, r3, #6
 8002156:	4063      	eors	r3, r4
 8002158:	b29c      	uxth	r4, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	001a      	movs	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	18d3      	adds	r3, r2, r3
 8002168:	4a09      	ldr	r2, [pc, #36]	; (8002190 <HAL_PCD_EP_ClrStall+0x1bc>)
 800216a:	4322      	orrs	r2, r4
 800216c:	b292      	uxth	r2, r2
 800216e:	801a      	strh	r2, [r3, #0]
  }
  __HAL_UNLOCK(hpcd); 
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	23f4      	movs	r3, #244	; 0xf4
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	2100      	movs	r1, #0
 8002178:	54d1      	strb	r1, [r2, r3]
    
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	0018      	movs	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	b005      	add	sp, #20
 8002182:	bd90      	pop	{r4, r7, pc}
 8002184:	00000f0f 	.word	0x00000f0f
 8002188:	ffff80c0 	.word	0xffff80c0
 800218c:	ffff8fbf 	.word	0xffff8fbf
 8002190:	ffff8080 	.word	0xffff8080
 8002194:	ffffc080 	.word	0xffffc080
 8002198:	ffffbf8f 	.word	0xffffbf8f

0800219c <PCD_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	0019      	movs	r1, r3
 80021a8:	1dbb      	adds	r3, r7, #6
 80021aa:	801a      	strh	r2, [r3, #0]
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	1c0a      	adds	r2, r1, #0
 80021b0:	801a      	strh	r2, [r3, #0]
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	3301      	adds	r3, #1
 80021b8:	085b      	lsrs	r3, r3, #1
 80021ba:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 80021bc:	1dbb      	adds	r3, r7, #6
 80021be:	881a      	ldrh	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	18d3      	adds	r3, r2, r3
 80021c4:	2280      	movs	r2, #128	; 0x80
 80021c6:	00d2      	lsls	r2, r2, #3
 80021c8:	4694      	mov	ip, r2
 80021ca:	4463      	add	r3, ip
 80021cc:	61bb      	str	r3, [r7, #24]
  
  for (i = n; i != 0; i--)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	e01e      	b.n	8002212 <PCD_WritePMA+0x76>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	781a      	ldrb	r2, [r3, #0]
 80021d8:	2012      	movs	r0, #18
 80021da:	183b      	adds	r3, r7, r0
 80021dc:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	3301      	adds	r3, #1
 80021e2:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	b299      	uxth	r1, r3
 80021ee:	2410      	movs	r4, #16
 80021f0:	193b      	adds	r3, r7, r4
 80021f2:	183a      	adds	r2, r7, r0
 80021f4:	8812      	ldrh	r2, [r2, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	801a      	strh	r2, [r3, #0]
    *pdwVal++ = temp2;
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	1c9a      	adds	r2, r3, #2
 80021fe:	61ba      	str	r2, [r7, #24]
 8002200:	193a      	adds	r2, r7, r4
 8002202:	8812      	ldrh	r2, [r2, #0]
 8002204:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	3301      	adds	r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
  for (i = n; i != 0; i--)
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	3b01      	subs	r3, #1
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1dd      	bne.n	80021d4 <PCD_WritePMA+0x38>
  }
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b009      	add	sp, #36	; 0x24
 800221e:	bd90      	pop	{r4, r7, pc}

08002220 <PCD_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	0019      	movs	r1, r3
 800222c:	1dbb      	adds	r3, r7, #6
 800222e:	801a      	strh	r2, [r3, #0]
 8002230:	1d3b      	adds	r3, r7, #4
 8002232:	1c0a      	adds	r2, r1, #0
 8002234:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1U;
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	085b      	lsrs	r3, r3, #1
 800223c:	b29b      	uxth	r3, r3
 800223e:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint16_t *pdwVal;
  uint32_t temp;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8002240:	1dbb      	adds	r3, r7, #6
 8002242:	881a      	ldrh	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	18d3      	adds	r3, r2, r3
 8002248:	2280      	movs	r2, #128	; 0x80
 800224a:	00d2      	lsls	r2, r2, #3
 800224c:	4694      	mov	ip, r2
 800224e:	4463      	add	r3, ip
 8002250:	61bb      	str	r3, [r7, #24]
  
  for (i = n; i != 0U; i--)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	e014      	b.n	8002282 <PCD_ReadPMA+0x62>
  {
    temp = *pdwVal++;
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	1c9a      	adds	r2, r3, #2
 800225c:	61ba      	str	r2, [r7, #24]
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	613b      	str	r3, [r7, #16]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	60ba      	str	r2, [r7, #8]
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	701a      	strb	r2, [r3, #0]
    *pbUsrBuf++ = ((temp >> 8) & 0xFF);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	0a19      	lsrs	r1, r3, #8
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	60ba      	str	r2, [r7, #8]
 8002278:	b2ca      	uxtb	r2, r1
 800227a:	701a      	strb	r2, [r3, #0]
  for (i = n; i != 0U; i--)
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	3b01      	subs	r3, #1
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1e7      	bne.n	8002258 <PCD_ReadPMA+0x38>
  }
  
  if (wNBytes % 2)
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	2201      	movs	r2, #1
 800228e:	4013      	ands	r3, r2
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <PCD_ReadPMA+0x8c>
  {
    temp = *pdwVal++;
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	1c9a      	adds	r2, r3, #2
 800229a:	61ba      	str	r2, [r7, #24]
 800229c:	881b      	ldrh	r3, [r3, #0]
 800229e:	613b      	str	r3, [r7, #16]
    *pbUsrBuf++ = ((temp >> 0) & 0xFF);
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	60ba      	str	r2, [r7, #8]
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	701a      	strb	r2, [r3, #0]
  }
}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b008      	add	sp, #32
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80022b4:	b590      	push	{r4, r7, lr}
 80022b6:	b089      	sub	sp, #36	; 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count=0U;
 80022bc:	231e      	movs	r3, #30
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	2200      	movs	r2, #0
 80022c2:	801a      	strh	r2, [r3, #0]
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0U;
 80022c4:	230c      	movs	r3, #12
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	2200      	movs	r2, #0
 80022ca:	801a      	strh	r2, [r3, #0]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 80022cc:	e34a      	b.n	8002964 <PCD_EP_ISR_Handler+0x6b0>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80022ce:	230e      	movs	r3, #14
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	201d      	movs	r0, #29
 80022da:	183b      	adds	r3, r7, r0
 80022dc:	210f      	movs	r1, #15
 80022de:	400a      	ands	r2, r1
 80022e0:	701a      	strb	r2, [r3, #0]
    
    if (EPindex == 0U)
 80022e2:	183b      	adds	r3, r7, r0
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d000      	beq.n	80022ec <PCD_EP_ISR_Handler+0x38>
 80022ea:	e137      	b.n	800255c <PCD_EP_ISR_Handler+0x2a8>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80022ec:	230e      	movs	r3, #14
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	001a      	movs	r2, r3
 80022f6:	2310      	movs	r3, #16
 80022f8:	4013      	ands	r3, r2
 80022fa:	d14c      	bne.n	8002396 <PCD_EP_ISR_Handler+0xe2>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	b29a      	uxth	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	49c4      	ldr	r1, [pc, #784]	; (800261c <PCD_EP_ISR_Handler+0x368>)
 800230a:	400a      	ands	r2, r1
 800230c:	b292      	uxth	r2, r2
 800230e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3328      	adds	r3, #40	; 0x28
 8002314:	61bb      	str	r3, [r7, #24]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2250      	movs	r2, #80	; 0x50
 800231c:	5a9b      	ldrh	r3, [r3, r2]
 800231e:	b29b      	uxth	r3, r3
 8002320:	001a      	movs	r2, r3
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	18d3      	adds	r3, r2, r3
 800232a:	001a      	movs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	18d3      	adds	r3, r2, r3
 8002332:	4abb      	ldr	r2, [pc, #748]	; (8002620 <PCD_EP_ISR_Handler+0x36c>)
 8002334:	4694      	mov	ip, r2
 8002336:	4463      	add	r3, ip
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	059b      	lsls	r3, r3, #22
 800233c:	0d9a      	lsrs	r2, r3, #22
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	619a      	str	r2, [r3, #24]
        ep->xfer_buff += ep->xfer_count;
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	18d2      	adds	r2, r2, r3
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	611a      	str	r2, [r3, #16]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2100      	movs	r1, #0
 8002354:	0018      	movs	r0, r3
 8002356:	f002 fea7 	bl	80050a8 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2224      	movs	r2, #36	; 0x24
 800235e:	5c9b      	ldrb	r3, [r3, r2]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d100      	bne.n	8002368 <PCD_EP_ISR_Handler+0xb4>
 8002366:	e2fd      	b.n	8002964 <PCD_EP_ISR_Handler+0x6b0>
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d000      	beq.n	8002372 <PCD_EP_ISR_Handler+0xbe>
 8002370:	e2f8      	b.n	8002964 <PCD_EP_ISR_Handler+0x6b0>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2224      	movs	r2, #36	; 0x24
 8002376:	5c9b      	ldrb	r3, [r3, r2]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2280      	movs	r2, #128	; 0x80
 800237c:	4252      	negs	r2, r2
 800237e:	4313      	orrs	r3, r2
 8002380:	b2da      	uxtb	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	b291      	uxth	r1, r2
 8002388:	224c      	movs	r2, #76	; 0x4c
 800238a:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2224      	movs	r2, #36	; 0x24
 8002390:	2100      	movs	r1, #0
 8002392:	5499      	strb	r1, [r3, r2]
 8002394:	e2e6      	b.n	8002964 <PCD_EP_ISR_Handler+0x6b0>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3309      	adds	r3, #9
 800239a:	33ff      	adds	r3, #255	; 0xff
 800239c:	61bb      	str	r3, [r7, #24]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	210c      	movs	r1, #12
 80023a8:	187b      	adds	r3, r7, r1
 80023aa:	801a      	strh	r2, [r3, #0]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80023ac:	187b      	adds	r3, r7, r1
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	001a      	movs	r2, r3
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	4013      	ands	r3, r2
 80023ba:	d031      	beq.n	8002420 <PCD_EP_ISR_Handler+0x16c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2250      	movs	r2, #80	; 0x50
 80023c2:	5a9b      	ldrh	r3, [r3, r2]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	001a      	movs	r2, r3
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	18d3      	adds	r3, r2, r3
 80023d0:	001a      	movs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	18d3      	adds	r3, r2, r3
 80023d8:	4a92      	ldr	r2, [pc, #584]	; (8002624 <PCD_EP_ISR_Handler+0x370>)
 80023da:	4694      	mov	ip, r2
 80023dc:	4463      	add	r3, ip
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	059b      	lsls	r3, r3, #22
 80023e2:	0d9a      	lsrs	r2, r3, #22
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	619a      	str	r2, [r3, #24]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)(void*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	33ed      	adds	r3, #237	; 0xed
 80023f0:	33ff      	adds	r3, #255	; 0xff
 80023f2:	0019      	movs	r1, r3
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	889a      	ldrh	r2, [r3, #4]
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	f7ff ff0f 	bl	8002220 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	b29a      	uxth	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4986      	ldr	r1, [pc, #536]	; (8002628 <PCD_EP_ISR_Handler+0x374>)
 8002410:	400a      	ands	r2, r1
 8002412:	b292      	uxth	r2, r2
 8002414:	801a      	strh	r2, [r3, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	0018      	movs	r0, r3
 800241a:	f002 fe11 	bl	8005040 <HAL_PCD_SetupStageCallback>
 800241e:	e2a1      	b.n	8002964 <PCD_EP_ISR_Handler+0x6b0>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002420:	230c      	movs	r3, #12
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	b21b      	sxth	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	db00      	blt.n	8002430 <PCD_EP_ISR_Handler+0x17c>
 800242e:	e299      	b.n	8002964 <PCD_EP_ISR_Handler+0x6b0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29a      	uxth	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	497a      	ldr	r1, [pc, #488]	; (8002628 <PCD_EP_ISR_Handler+0x374>)
 800243e:	400a      	ands	r2, r1
 8002440:	b292      	uxth	r2, r2
 8002442:	801a      	strh	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2250      	movs	r2, #80	; 0x50
 800244a:	5a9b      	ldrh	r3, [r3, r2]
 800244c:	b29b      	uxth	r3, r3
 800244e:	001a      	movs	r2, r3
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	18d3      	adds	r3, r2, r3
 8002458:	001a      	movs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	18d3      	adds	r3, r2, r3
 8002460:	4a70      	ldr	r2, [pc, #448]	; (8002624 <PCD_EP_ISR_Handler+0x370>)
 8002462:	4694      	mov	ip, r2
 8002464:	4463      	add	r3, ip
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	059b      	lsls	r3, r3, #22
 800246a:	0d9a      	lsrs	r2, r3, #22
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	619a      	str	r2, [r3, #24]
          
          if (ep->xfer_count != 0U)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d011      	beq.n	800249c <PCD_EP_ISR_Handler+0x1e8>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	6919      	ldr	r1, [r3, #16]
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	889a      	ldrh	r2, [r3, #4]
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	b29b      	uxth	r3, r3
 800248a:	f7ff fec9 	bl	8002220 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	18d2      	adds	r2, r2, r3
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	611a      	str	r2, [r3, #16]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2100      	movs	r1, #0
 80024a0:	0018      	movs	r0, r3
 80024a2:	f002 fde0 	bl	8005066 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2250      	movs	r2, #80	; 0x50
 80024ac:	5a9b      	ldrh	r3, [r3, r2]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	001a      	movs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	18d3      	adds	r3, r2, r3
 80024b8:	4a5a      	ldr	r2, [pc, #360]	; (8002624 <PCD_EP_ISR_Handler+0x370>)
 80024ba:	4694      	mov	ip, r2
 80024bc:	4463      	add	r3, ip
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2b3e      	cmp	r3, #62	; 0x3e
 80024c6:	d91b      	bls.n	8002500 <PCD_EP_ISR_Handler+0x24c>
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	095a      	lsrs	r2, r3, #5
 80024ce:	2316      	movs	r3, #22
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	801a      	strh	r2, [r3, #0]
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	221f      	movs	r2, #31
 80024da:	4013      	ands	r3, r2
 80024dc:	d105      	bne.n	80024ea <PCD_EP_ISR_Handler+0x236>
 80024de:	2116      	movs	r1, #22
 80024e0:	187b      	adds	r3, r7, r1
 80024e2:	881a      	ldrh	r2, [r3, #0]
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	3a01      	subs	r2, #1
 80024e8:	801a      	strh	r2, [r3, #0]
 80024ea:	2316      	movs	r3, #22
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	029b      	lsls	r3, r3, #10
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	4a4d      	ldr	r2, [pc, #308]	; (800262c <PCD_EP_ISR_Handler+0x378>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	801a      	strh	r2, [r3, #0]
 80024fe:	e017      	b.n	8002530 <PCD_EP_ISR_Handler+0x27c>
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	085a      	lsrs	r2, r3, #1
 8002506:	2316      	movs	r3, #22
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	801a      	strh	r2, [r3, #0]
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2201      	movs	r2, #1
 8002512:	4013      	ands	r3, r2
 8002514:	d005      	beq.n	8002522 <PCD_EP_ISR_Handler+0x26e>
 8002516:	2116      	movs	r1, #22
 8002518:	187b      	adds	r3, r7, r1
 800251a:	881a      	ldrh	r2, [r3, #0]
 800251c:	187b      	adds	r3, r7, r1
 800251e:	3201      	adds	r2, #1
 8002520:	801a      	strh	r2, [r3, #0]
 8002522:	2316      	movs	r3, #22
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	029b      	lsls	r3, r3, #10
 800252a:	b29a      	uxth	r2, r3
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	4a3d      	ldr	r2, [pc, #244]	; (8002630 <PCD_EP_ISR_Handler+0x37c>)
 800253a:	4013      	ands	r3, r2
 800253c:	b29c      	uxth	r4, r3
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	015b      	lsls	r3, r3, #5
 8002542:	4063      	eors	r3, r4
 8002544:	b29c      	uxth	r4, r3
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	019b      	lsls	r3, r3, #6
 800254a:	4063      	eors	r3, r4
 800254c:	b29c      	uxth	r4, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a38      	ldr	r2, [pc, #224]	; (8002634 <PCD_EP_ISR_Handler+0x380>)
 8002554:	4322      	orrs	r2, r4
 8002556:	b292      	uxth	r2, r2
 8002558:	801a      	strh	r2, [r3, #0]
 800255a:	e203      	b.n	8002964 <PCD_EP_ISR_Handler+0x6b0>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	001a      	movs	r2, r3
 8002562:	231d      	movs	r3, #29
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	18d3      	adds	r3, r2, r3
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	b29a      	uxth	r2, r3
 8002570:	210c      	movs	r1, #12
 8002572:	187b      	adds	r3, r7, r1
 8002574:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002576:	187b      	adds	r3, r7, r1
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	b29b      	uxth	r3, r3
 800257c:	b21b      	sxth	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	db00      	blt.n	8002584 <PCD_EP_ISR_Handler+0x2d0>
 8002582:	e0f9      	b.n	8002778 <PCD_EP_ISR_Handler+0x4c4>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	001a      	movs	r2, r3
 800258a:	201d      	movs	r0, #29
 800258c:	183b      	adds	r3, r7, r0
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	18d3      	adds	r3, r2, r3
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	b29a      	uxth	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0019      	movs	r1, r3
 800259e:	183b      	adds	r3, r7, r0
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	18cb      	adds	r3, r1, r3
 80025a6:	4920      	ldr	r1, [pc, #128]	; (8002628 <PCD_EP_ISR_Handler+0x374>)
 80025a8:	400a      	ands	r2, r1
 80025aa:	b292      	uxth	r2, r2
 80025ac:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[EPindex];
 80025ae:	183b      	adds	r3, r7, r0
 80025b0:	781a      	ldrb	r2, [r3, #0]
 80025b2:	0013      	movs	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	1a9b      	subs	r3, r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	3309      	adds	r3, #9
 80025bc:	33ff      	adds	r3, #255	; 0xff
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	18d3      	adds	r3, r2, r3
 80025c2:	61bb      	str	r3, [r7, #24]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	7a9b      	ldrb	r3, [r3, #10]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d135      	bne.n	8002638 <PCD_EP_ISR_Handler+0x384>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2250      	movs	r2, #80	; 0x50
 80025d2:	5a9b      	ldrh	r3, [r3, r2]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	001a      	movs	r2, r3
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	18d3      	adds	r3, r2, r3
 80025e0:	001a      	movs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	18d3      	adds	r3, r2, r3
 80025e8:	4a0e      	ldr	r2, [pc, #56]	; (8002624 <PCD_EP_ISR_Handler+0x370>)
 80025ea:	4694      	mov	ip, r2
 80025ec:	4463      	add	r3, ip
 80025ee:	881a      	ldrh	r2, [r3, #0]
 80025f0:	211e      	movs	r1, #30
 80025f2:	187b      	adds	r3, r7, r1
 80025f4:	0592      	lsls	r2, r2, #22
 80025f6:	0d92      	lsrs	r2, r2, #22
 80025f8:	801a      	strh	r2, [r3, #0]
          if (count != 0U)
 80025fa:	187b      	adds	r3, r7, r1
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d100      	bne.n	8002604 <PCD_EP_ISR_Handler+0x350>
 8002602:	e08e      	b.n	8002722 <PCD_EP_ISR_Handler+0x46e>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	6919      	ldr	r1, [r3, #16]
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	889a      	ldrh	r2, [r3, #4]
 8002610:	231e      	movs	r3, #30
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	f7ff fe03 	bl	8002220 <PCD_ReadPMA>
 800261a:	e082      	b.n	8002722 <PCD_EP_ISR_Handler+0x46e>
 800261c:	ffff8f0f 	.word	0xffff8f0f
 8002620:	00000402 	.word	0x00000402
 8002624:	00000406 	.word	0x00000406
 8002628:	00000f8f 	.word	0x00000f8f
 800262c:	ffff8000 	.word	0xffff8000
 8002630:	ffffbf8f 	.word	0xffffbf8f
 8002634:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	001a      	movs	r2, r3
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	18d3      	adds	r3, r2, r3
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	b29b      	uxth	r3, r3
 800264a:	001a      	movs	r2, r3
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	01db      	lsls	r3, r3, #7
 8002650:	401a      	ands	r2, r3
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	01db      	lsls	r3, r3, #7
 8002656:	429a      	cmp	r2, r3
 8002658:	d126      	bne.n	80026a8 <PCD_EP_ISR_Handler+0x3f4>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2250      	movs	r2, #80	; 0x50
 8002660:	5a9b      	ldrh	r3, [r3, r2]
 8002662:	b29b      	uxth	r3, r3
 8002664:	001a      	movs	r2, r3
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	18d3      	adds	r3, r2, r3
 800266e:	001a      	movs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	18d3      	adds	r3, r2, r3
 8002676:	4ac4      	ldr	r2, [pc, #784]	; (8002988 <PCD_EP_ISR_Handler+0x6d4>)
 8002678:	4694      	mov	ip, r2
 800267a:	4463      	add	r3, ip
 800267c:	881a      	ldrh	r2, [r3, #0]
 800267e:	211e      	movs	r1, #30
 8002680:	187b      	adds	r3, r7, r1
 8002682:	0592      	lsls	r2, r2, #22
 8002684:	0d92      	lsrs	r2, r2, #22
 8002686:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8002688:	187b      	adds	r3, r7, r1
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d031      	beq.n	80026f4 <PCD_EP_ISR_Handler+0x440>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	6919      	ldr	r1, [r3, #16]
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	88da      	ldrh	r2, [r3, #6]
 800269c:	231e      	movs	r3, #30
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	f7ff fdbd 	bl	8002220 <PCD_ReadPMA>
 80026a6:	e025      	b.n	80026f4 <PCD_EP_ISR_Handler+0x440>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2250      	movs	r2, #80	; 0x50
 80026ae:	5a9b      	ldrh	r3, [r3, r2]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	001a      	movs	r2, r3
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	18d3      	adds	r3, r2, r3
 80026bc:	001a      	movs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	18d3      	adds	r3, r2, r3
 80026c4:	4ab1      	ldr	r2, [pc, #708]	; (800298c <PCD_EP_ISR_Handler+0x6d8>)
 80026c6:	4694      	mov	ip, r2
 80026c8:	4463      	add	r3, ip
 80026ca:	881a      	ldrh	r2, [r3, #0]
 80026cc:	211e      	movs	r1, #30
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	0592      	lsls	r2, r2, #22
 80026d2:	0d92      	lsrs	r2, r2, #22
 80026d4:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 80026d6:	187b      	adds	r3, r7, r1
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <PCD_EP_ISR_Handler+0x440>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	6919      	ldr	r1, [r3, #16]
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	891a      	ldrh	r2, [r3, #8]
 80026ea:	231e      	movs	r3, #30
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	f7ff fd96 	bl	8002220 <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	001a      	movs	r2, r3
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	18d3      	adds	r3, r2, r3
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	b29b      	uxth	r3, r3
 8002706:	4aa2      	ldr	r2, [pc, #648]	; (8002990 <PCD_EP_ISR_Handler+0x6dc>)
 8002708:	4013      	ands	r3, r2
 800270a:	b29a      	uxth	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	0019      	movs	r1, r3
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	18cb      	adds	r3, r1, r3
 800271a:	499e      	ldr	r1, [pc, #632]	; (8002994 <PCD_EP_ISR_Handler+0x6e0>)
 800271c:	430a      	orrs	r2, r1
 800271e:	b292      	uxth	r2, r2
 8002720:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	211e      	movs	r1, #30
 8002728:	187b      	adds	r3, r7, r1
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	18d2      	adds	r2, r2, r3
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=count;
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	187b      	adds	r3, r7, r1
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	18d2      	adds	r2, r2, r3
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	611a      	str	r2, [r3, #16]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d006      	beq.n	8002756 <PCD_EP_ISR_Handler+0x4a2>
 8002748:	231e      	movs	r3, #30
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	881a      	ldrh	r2, [r3, #0]
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	429a      	cmp	r2, r3
 8002754:	d207      	bcs.n	8002766 <PCD_EP_ISR_Handler+0x4b2>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	781a      	ldrb	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	0011      	movs	r1, r2
 800275e:	0018      	movs	r0, r3
 8002760:	f002 fc81 	bl	8005066 <HAL_PCD_DataOutStageCallback>
 8002764:	e008      	b.n	8002778 <PCD_EP_ISR_Handler+0x4c4>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	7819      	ldrb	r1, [r3, #0]
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	691a      	ldr	r2, [r3, #16]
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff f840 	bl	80017f8 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002778:	230c      	movs	r3, #12
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	b29b      	uxth	r3, r3
 8002780:	001a      	movs	r2, r3
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	4013      	ands	r3, r2
 8002786:	d100      	bne.n	800278a <PCD_EP_ISR_Handler+0x4d6>
 8002788:	e0ec      	b.n	8002964 <PCD_EP_ISR_Handler+0x6b0>
      {
        ep = &hpcd->IN_ep[EPindex];
 800278a:	211d      	movs	r1, #29
 800278c:	187b      	adds	r3, r7, r1
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	0013      	movs	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	3328      	adds	r3, #40	; 0x28
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	18d3      	adds	r3, r2, r3
 800279e:	61bb      	str	r3, [r7, #24]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	001a      	movs	r2, r3
 80027a6:	0008      	movs	r0, r1
 80027a8:	187b      	adds	r3, r7, r1
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	18d3      	adds	r3, r2, r3
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	0019      	movs	r1, r3
 80027ba:	183b      	adds	r3, r7, r0
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	18cb      	adds	r3, r1, r3
 80027c2:	4975      	ldr	r1, [pc, #468]	; (8002998 <PCD_EP_ISR_Handler+0x6e4>)
 80027c4:	400a      	ands	r2, r1
 80027c6:	b292      	uxth	r2, r2
 80027c8:	801a      	strh	r2, [r3, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	7a9b      	ldrb	r3, [r3, #10]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d126      	bne.n	8002820 <PCD_EP_ISR_Handler+0x56c>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2250      	movs	r2, #80	; 0x50
 80027d8:	5a9b      	ldrh	r3, [r3, r2]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	001a      	movs	r2, r3
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	18d3      	adds	r3, r2, r3
 80027e6:	001a      	movs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	18d3      	adds	r3, r2, r3
 80027ee:	4a66      	ldr	r2, [pc, #408]	; (8002988 <PCD_EP_ISR_Handler+0x6d4>)
 80027f0:	4694      	mov	ip, r2
 80027f2:	4463      	add	r3, ip
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	059b      	lsls	r3, r3, #22
 80027f8:	0d9a      	lsrs	r2, r3, #22
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	619a      	str	r2, [r3, #24]
          if (ep->xfer_count != 0)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d100      	bne.n	8002808 <PCD_EP_ISR_Handler+0x554>
 8002806:	e07b      	b.n	8002900 <PCD_EP_ISR_Handler+0x64c>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	6919      	ldr	r1, [r3, #16]
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	889a      	ldrh	r2, [r3, #4]
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	b29b      	uxth	r3, r3
 800281a:	f7ff fcbf 	bl	800219c <PCD_WritePMA>
 800281e:	e06f      	b.n	8002900 <PCD_EP_ISR_Handler+0x64c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	001a      	movs	r2, r3
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	18d3      	adds	r3, r2, r3
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	b29b      	uxth	r3, r3
 8002832:	001a      	movs	r2, r3
 8002834:	2340      	movs	r3, #64	; 0x40
 8002836:	4013      	ands	r3, r2
 8002838:	2b40      	cmp	r3, #64	; 0x40
 800283a:	d125      	bne.n	8002888 <PCD_EP_ISR_Handler+0x5d4>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2250      	movs	r2, #80	; 0x50
 8002842:	5a9b      	ldrh	r3, [r3, r2]
 8002844:	b29b      	uxth	r3, r3
 8002846:	001a      	movs	r2, r3
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	18d3      	adds	r3, r2, r3
 8002850:	001a      	movs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	18d3      	adds	r3, r2, r3
 8002858:	4a4b      	ldr	r2, [pc, #300]	; (8002988 <PCD_EP_ISR_Handler+0x6d4>)
 800285a:	4694      	mov	ip, r2
 800285c:	4463      	add	r3, ip
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	059b      	lsls	r3, r3, #22
 8002862:	0d9a      	lsrs	r2, r3, #22
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d030      	beq.n	80028d2 <PCD_EP_ISR_Handler+0x61e>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	6919      	ldr	r1, [r3, #16]
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	88da      	ldrh	r2, [r3, #6]
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	b29b      	uxth	r3, r3
 8002882:	f7ff fc8b 	bl	800219c <PCD_WritePMA>
 8002886:	e024      	b.n	80028d2 <PCD_EP_ISR_Handler+0x61e>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2250      	movs	r2, #80	; 0x50
 800288e:	5a9b      	ldrh	r3, [r3, r2]
 8002890:	b29b      	uxth	r3, r3
 8002892:	001a      	movs	r2, r3
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	18d3      	adds	r3, r2, r3
 800289c:	001a      	movs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	18d3      	adds	r3, r2, r3
 80028a4:	4a39      	ldr	r2, [pc, #228]	; (800298c <PCD_EP_ISR_Handler+0x6d8>)
 80028a6:	4694      	mov	ip, r2
 80028a8:	4463      	add	r3, ip
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	059b      	lsls	r3, r3, #22
 80028ae:	0d9a      	lsrs	r2, r3, #22
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <PCD_EP_ISR_Handler+0x61e>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	6919      	ldr	r1, [r3, #16]
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	891a      	ldrh	r2, [r3, #8]
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	f7ff fc65 	bl	800219c <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN) 
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	001a      	movs	r2, r3
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	18d3      	adds	r3, r2, r3
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	4a2a      	ldr	r2, [pc, #168]	; (8002990 <PCD_EP_ISR_Handler+0x6dc>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	0019      	movs	r1, r3
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	18cb      	adds	r3, r1, r3
 80028f8:	4928      	ldr	r1, [pc, #160]	; (800299c <PCD_EP_ISR_Handler+0x6e8>)
 80028fa:	430a      	orrs	r2, r1
 80028fc:	b292      	uxth	r2, r2
 80028fe:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2250      	movs	r2, #80	; 0x50
 8002906:	5a9b      	ldrh	r3, [r3, r2]
 8002908:	b29b      	uxth	r3, r3
 800290a:	001a      	movs	r2, r3
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	18d3      	adds	r3, r2, r3
 8002914:	001a      	movs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	18d3      	adds	r3, r2, r3
 800291c:	4a1a      	ldr	r2, [pc, #104]	; (8002988 <PCD_EP_ISR_Handler+0x6d4>)
 800291e:	4694      	mov	ip, r2
 8002920:	4463      	add	r3, ip
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	059b      	lsls	r3, r3, #22
 8002926:	0d9a      	lsrs	r2, r3, #22
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=ep->xfer_count;
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	18d2      	adds	r2, r2, r3
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	611a      	str	r2, [r3, #16]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d107      	bne.n	8002952 <PCD_EP_ISR_Handler+0x69e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	781a      	ldrb	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	0011      	movs	r1, r2
 800294a:	0018      	movs	r0, r3
 800294c:	f002 fbac 	bl	80050a8 <HAL_PCD_DataInStageCallback>
 8002950:	e008      	b.n	8002964 <PCD_EP_ISR_Handler+0x6b0>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	7819      	ldrb	r1, [r3, #0]
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff f8c8 	bl	8001af4 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2244      	movs	r2, #68	; 0x44
 800296a:	5a9b      	ldrh	r3, [r3, r2]
 800296c:	b29a      	uxth	r2, r3
 800296e:	230e      	movs	r3, #14
 8002970:	18fb      	adds	r3, r7, r3
 8002972:	1c11      	adds	r1, r2, #0
 8002974:	8019      	strh	r1, [r3, #0]
 8002976:	b213      	sxth	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	da00      	bge.n	800297e <PCD_EP_ISR_Handler+0x6ca>
 800297c:	e4a7      	b.n	80022ce <PCD_EP_ISR_Handler+0x1a>
        }
      } 
    }
  }
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	0018      	movs	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	b009      	add	sp, #36	; 0x24
 8002986:	bd90      	pop	{r4, r7, pc}
 8002988:	00000402 	.word	0x00000402
 800298c:	00000406 	.word	0x00000406
 8002990:	00000f0f 	.word	0x00000f0f
 8002994:	ffff80c0 	.word	0xffff80c0
 8002998:	ffff8f0f 	.word	0xffff8f0f
 800299c:	ffffc080 	.word	0xffffc080

080029a0 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	0008      	movs	r0, r1
 80029aa:	0011      	movs	r1, r2
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	240a      	movs	r4, #10
 80029b0:	193b      	adds	r3, r7, r4
 80029b2:	1c02      	adds	r2, r0, #0
 80029b4:	801a      	strh	r2, [r3, #0]
 80029b6:	2308      	movs	r3, #8
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	1c0a      	adds	r2, r1, #0
 80029bc:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80029be:	193b      	adds	r3, r7, r4
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	2280      	movs	r2, #128	; 0x80
 80029c4:	4013      	ands	r3, r2
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00d      	beq.n	80029e8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80029cc:	230a      	movs	r3, #10
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	227f      	movs	r2, #127	; 0x7f
 80029d4:	401a      	ands	r2, r3
 80029d6:	0013      	movs	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	3328      	adds	r3, #40	; 0x28
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	18d3      	adds	r3, r2, r3
 80029e4:	617b      	str	r3, [r7, #20]
 80029e6:	e00b      	b.n	8002a00 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029e8:	230a      	movs	r3, #10
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	881a      	ldrh	r2, [r3, #0]
 80029ee:	0013      	movs	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	3309      	adds	r3, #9
 80029f8:	33ff      	adds	r3, #255	; 0xff
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	18d3      	adds	r3, r2, r3
 80029fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a00:	2308      	movs	r3, #8
 8002a02:	18fb      	adds	r3, r7, r3
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d107      	bne.n	8002a1a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	809a      	strh	r2, [r3, #4]
 8002a18:	e00b      	b.n	8002a32 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	0c1b      	lsrs	r3, r3, #16
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	0018      	movs	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b007      	add	sp, #28
 8002a3a:	bd90      	pop	{r4, r7, pc}

08002a3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d100      	bne.n	8002a54 <HAL_RCC_OscConfig+0x18>
 8002a52:	e08d      	b.n	8002b70 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a54:	4bc5      	ldr	r3, [pc, #788]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	220c      	movs	r2, #12
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d00e      	beq.n	8002a7e <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a60:	4bc2      	ldr	r3, [pc, #776]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	220c      	movs	r2, #12
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d116      	bne.n	8002a9a <HAL_RCC_OscConfig+0x5e>
 8002a6c:	4bbf      	ldr	r3, [pc, #764]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	23c0      	movs	r3, #192	; 0xc0
 8002a72:	025b      	lsls	r3, r3, #9
 8002a74:	401a      	ands	r2, r3
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	025b      	lsls	r3, r3, #9
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d10d      	bne.n	8002a9a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7e:	4bbb      	ldr	r3, [pc, #748]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	029b      	lsls	r3, r3, #10
 8002a86:	4013      	ands	r3, r2
 8002a88:	d100      	bne.n	8002a8c <HAL_RCC_OscConfig+0x50>
 8002a8a:	e070      	b.n	8002b6e <HAL_RCC_OscConfig+0x132>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d000      	beq.n	8002a96 <HAL_RCC_OscConfig+0x5a>
 8002a94:	e06b      	b.n	8002b6e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e329      	b.n	80030ee <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x76>
 8002aa2:	4bb2      	ldr	r3, [pc, #712]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4bb1      	ldr	r3, [pc, #708]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	0249      	lsls	r1, r1, #9
 8002aac:	430a      	orrs	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	e02f      	b.n	8002b12 <HAL_RCC_OscConfig+0xd6>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x98>
 8002aba:	4bac      	ldr	r3, [pc, #688]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4bab      	ldr	r3, [pc, #684]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002ac0:	49ab      	ldr	r1, [pc, #684]	; (8002d70 <HAL_RCC_OscConfig+0x334>)
 8002ac2:	400a      	ands	r2, r1
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	4ba9      	ldr	r3, [pc, #676]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	4ba8      	ldr	r3, [pc, #672]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002acc:	49a9      	ldr	r1, [pc, #676]	; (8002d74 <HAL_RCC_OscConfig+0x338>)
 8002ace:	400a      	ands	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	e01e      	b.n	8002b12 <HAL_RCC_OscConfig+0xd6>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	2b05      	cmp	r3, #5
 8002ada:	d10e      	bne.n	8002afa <HAL_RCC_OscConfig+0xbe>
 8002adc:	4ba3      	ldr	r3, [pc, #652]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4ba2      	ldr	r3, [pc, #648]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002ae2:	2180      	movs	r1, #128	; 0x80
 8002ae4:	02c9      	lsls	r1, r1, #11
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	4ba0      	ldr	r3, [pc, #640]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4b9f      	ldr	r3, [pc, #636]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002af0:	2180      	movs	r1, #128	; 0x80
 8002af2:	0249      	lsls	r1, r1, #9
 8002af4:	430a      	orrs	r2, r1
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	e00b      	b.n	8002b12 <HAL_RCC_OscConfig+0xd6>
 8002afa:	4b9c      	ldr	r3, [pc, #624]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	4b9b      	ldr	r3, [pc, #620]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002b00:	499b      	ldr	r1, [pc, #620]	; (8002d70 <HAL_RCC_OscConfig+0x334>)
 8002b02:	400a      	ands	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	4b99      	ldr	r3, [pc, #612]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	4b98      	ldr	r3, [pc, #608]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002b0c:	4999      	ldr	r1, [pc, #612]	; (8002d74 <HAL_RCC_OscConfig+0x338>)
 8002b0e:	400a      	ands	r2, r1
 8002b10:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d014      	beq.n	8002b44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1a:	f7fd fbbd 	bl	8000298 <HAL_GetTick>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b24:	f7fd fbb8 	bl	8000298 <HAL_GetTick>
 8002b28:	0002      	movs	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b64      	cmp	r3, #100	; 0x64
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e2db      	b.n	80030ee <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b36:	4b8d      	ldr	r3, [pc, #564]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	029b      	lsls	r3, r3, #10
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0xe8>
 8002b42:	e015      	b.n	8002b70 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7fd fba8 	bl	8000298 <HAL_GetTick>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b4e:	f7fd fba3 	bl	8000298 <HAL_GetTick>
 8002b52:	0002      	movs	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b64      	cmp	r3, #100	; 0x64
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e2c6      	b.n	80030ee <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b60:	4b82      	ldr	r3, [pc, #520]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	2380      	movs	r3, #128	; 0x80
 8002b66:	029b      	lsls	r3, r3, #10
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d1f0      	bne.n	8002b4e <HAL_RCC_OscConfig+0x112>
 8002b6c:	e000      	b.n	8002b70 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2202      	movs	r2, #2
 8002b76:	4013      	ands	r3, r2
 8002b78:	d100      	bne.n	8002b7c <HAL_RCC_OscConfig+0x140>
 8002b7a:	e06c      	b.n	8002c56 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b7c:	4b7b      	ldr	r3, [pc, #492]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	220c      	movs	r2, #12
 8002b82:	4013      	ands	r3, r2
 8002b84:	d00e      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b86:	4b79      	ldr	r3, [pc, #484]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	220c      	movs	r2, #12
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d11f      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x196>
 8002b92:	4b76      	ldr	r3, [pc, #472]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	23c0      	movs	r3, #192	; 0xc0
 8002b98:	025b      	lsls	r3, r3, #9
 8002b9a:	401a      	ands	r2, r3
 8002b9c:	2380      	movs	r3, #128	; 0x80
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d116      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba4:	4b71      	ldr	r3, [pc, #452]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	4013      	ands	r3, r2
 8002bac:	d005      	beq.n	8002bba <HAL_RCC_OscConfig+0x17e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d001      	beq.n	8002bba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e299      	b.n	80030ee <HAL_RCC_OscConfig+0x6b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bba:	4b6c      	ldr	r3, [pc, #432]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	22f8      	movs	r2, #248	; 0xf8
 8002bc0:	4393      	bics	r3, r2
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	00da      	lsls	r2, r3, #3
 8002bca:	4b68      	ldr	r3, [pc, #416]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd0:	e041      	b.n	8002c56 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d024      	beq.n	8002c24 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bda:	4b64      	ldr	r3, [pc, #400]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4b63      	ldr	r3, [pc, #396]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002be0:	2101      	movs	r1, #1
 8002be2:	430a      	orrs	r2, r1
 8002be4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7fd fb57 	bl	8000298 <HAL_GetTick>
 8002bea:	0003      	movs	r3, r0
 8002bec:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bf0:	f7fd fb52 	bl	8000298 <HAL_GetTick>
 8002bf4:	0002      	movs	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e275      	b.n	80030ee <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c02:	4b5a      	ldr	r3, [pc, #360]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2202      	movs	r2, #2
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d0f1      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c0c:	4b57      	ldr	r3, [pc, #348]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	22f8      	movs	r2, #248	; 0xf8
 8002c12:	4393      	bics	r3, r2
 8002c14:	0019      	movs	r1, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	00da      	lsls	r2, r3, #3
 8002c1c:	4b53      	ldr	r3, [pc, #332]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	e018      	b.n	8002c56 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c24:	4b51      	ldr	r3, [pc, #324]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4b50      	ldr	r3, [pc, #320]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	438a      	bics	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fd fb32 	bl	8000298 <HAL_GetTick>
 8002c34:	0003      	movs	r3, r0
 8002c36:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c3a:	f7fd fb2d 	bl	8000298 <HAL_GetTick>
 8002c3e:	0002      	movs	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e250      	b.n	80030ee <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4c:	4b47      	ldr	r3, [pc, #284]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2202      	movs	r2, #2
 8002c52:	4013      	ands	r3, r2
 8002c54:	d1f1      	bne.n	8002c3a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2208      	movs	r2, #8
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d036      	beq.n	8002cce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d019      	beq.n	8002c9c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c68:	4b40      	ldr	r3, [pc, #256]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c6c:	4b3f      	ldr	r3, [pc, #252]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002c6e:	2101      	movs	r1, #1
 8002c70:	430a      	orrs	r2, r1
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c74:	f7fd fb10 	bl	8000298 <HAL_GetTick>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7e:	f7fd fb0b 	bl	8000298 <HAL_GetTick>
 8002c82:	0002      	movs	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e22e      	b.n	80030ee <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c90:	4b36      	ldr	r3, [pc, #216]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	2202      	movs	r2, #2
 8002c96:	4013      	ands	r3, r2
 8002c98:	d0f1      	beq.n	8002c7e <HAL_RCC_OscConfig+0x242>
 8002c9a:	e018      	b.n	8002cce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c9c:	4b33      	ldr	r3, [pc, #204]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ca0:	4b32      	ldr	r3, [pc, #200]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	438a      	bics	r2, r1
 8002ca6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca8:	f7fd faf6 	bl	8000298 <HAL_GetTick>
 8002cac:	0003      	movs	r3, r0
 8002cae:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb2:	f7fd faf1 	bl	8000298 <HAL_GetTick>
 8002cb6:	0002      	movs	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e214      	b.n	80030ee <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc4:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	2202      	movs	r2, #2
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d1f1      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d100      	bne.n	8002cda <HAL_RCC_OscConfig+0x29e>
 8002cd8:	e0b6      	b.n	8002e48 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cda:	2317      	movs	r3, #23
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce2:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002ce4:	69da      	ldr	r2, [r3, #28]
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	055b      	lsls	r3, r3, #21
 8002cea:	4013      	ands	r3, r2
 8002cec:	d111      	bne.n	8002d12 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cee:	4b1f      	ldr	r3, [pc, #124]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002cf0:	69da      	ldr	r2, [r3, #28]
 8002cf2:	4b1e      	ldr	r3, [pc, #120]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002cf4:	2180      	movs	r1, #128	; 0x80
 8002cf6:	0549      	lsls	r1, r1, #21
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	61da      	str	r2, [r3, #28]
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002cfe:	69da      	ldr	r2, [r3, #28]
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	055b      	lsls	r3, r3, #21
 8002d04:	4013      	ands	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d0a:	2317      	movs	r3, #23
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d12:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <HAL_RCC_OscConfig+0x33c>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d11a      	bne.n	8002d54 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d1e:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <HAL_RCC_OscConfig+0x33c>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <HAL_RCC_OscConfig+0x33c>)
 8002d24:	2180      	movs	r1, #128	; 0x80
 8002d26:	0049      	lsls	r1, r1, #1
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d2c:	f7fd fab4 	bl	8000298 <HAL_GetTick>
 8002d30:	0003      	movs	r3, r0
 8002d32:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d36:	f7fd faaf 	bl	8000298 <HAL_GetTick>
 8002d3a:	0002      	movs	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b64      	cmp	r3, #100	; 0x64
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e1d2      	b.n	80030ee <HAL_RCC_OscConfig+0x6b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_OscConfig+0x33c>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4013      	ands	r3, r2
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d10f      	bne.n	8002d7c <HAL_RCC_OscConfig+0x340>
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002d5e:	6a1a      	ldr	r2, [r3, #32]
 8002d60:	4b02      	ldr	r3, [pc, #8]	; (8002d6c <HAL_RCC_OscConfig+0x330>)
 8002d62:	2101      	movs	r1, #1
 8002d64:	430a      	orrs	r2, r1
 8002d66:	621a      	str	r2, [r3, #32]
 8002d68:	e036      	b.n	8002dd8 <HAL_RCC_OscConfig+0x39c>
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	fffeffff 	.word	0xfffeffff
 8002d74:	fffbffff 	.word	0xfffbffff
 8002d78:	40007000 	.word	0x40007000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10c      	bne.n	8002d9e <HAL_RCC_OscConfig+0x362>
 8002d84:	4bca      	ldr	r3, [pc, #808]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002d86:	6a1a      	ldr	r2, [r3, #32]
 8002d88:	4bc9      	ldr	r3, [pc, #804]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	438a      	bics	r2, r1
 8002d8e:	621a      	str	r2, [r3, #32]
 8002d90:	4bc7      	ldr	r3, [pc, #796]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002d92:	6a1a      	ldr	r2, [r3, #32]
 8002d94:	4bc6      	ldr	r3, [pc, #792]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002d96:	2104      	movs	r1, #4
 8002d98:	438a      	bics	r2, r1
 8002d9a:	621a      	str	r2, [r3, #32]
 8002d9c:	e01c      	b.n	8002dd8 <HAL_RCC_OscConfig+0x39c>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b05      	cmp	r3, #5
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x384>
 8002da6:	4bc2      	ldr	r3, [pc, #776]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002da8:	6a1a      	ldr	r2, [r3, #32]
 8002daa:	4bc1      	ldr	r3, [pc, #772]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002dac:	2104      	movs	r1, #4
 8002dae:	430a      	orrs	r2, r1
 8002db0:	621a      	str	r2, [r3, #32]
 8002db2:	4bbf      	ldr	r3, [pc, #764]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002db4:	6a1a      	ldr	r2, [r3, #32]
 8002db6:	4bbe      	ldr	r3, [pc, #760]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002db8:	2101      	movs	r1, #1
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	621a      	str	r2, [r3, #32]
 8002dbe:	e00b      	b.n	8002dd8 <HAL_RCC_OscConfig+0x39c>
 8002dc0:	4bbb      	ldr	r3, [pc, #748]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002dc2:	6a1a      	ldr	r2, [r3, #32]
 8002dc4:	4bba      	ldr	r3, [pc, #744]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	438a      	bics	r2, r1
 8002dca:	621a      	str	r2, [r3, #32]
 8002dcc:	4bb8      	ldr	r3, [pc, #736]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002dce:	6a1a      	ldr	r2, [r3, #32]
 8002dd0:	4bb7      	ldr	r3, [pc, #732]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002dd2:	2104      	movs	r1, #4
 8002dd4:	438a      	bics	r2, r1
 8002dd6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d014      	beq.n	8002e0a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de0:	f7fd fa5a 	bl	8000298 <HAL_GetTick>
 8002de4:	0003      	movs	r3, r0
 8002de6:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de8:	e009      	b.n	8002dfe <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dea:	f7fd fa55 	bl	8000298 <HAL_GetTick>
 8002dee:	0002      	movs	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	4aaf      	ldr	r2, [pc, #700]	; (80030b4 <HAL_RCC_OscConfig+0x678>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e177      	b.n	80030ee <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dfe:	4bac      	ldr	r3, [pc, #688]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	2202      	movs	r2, #2
 8002e04:	4013      	ands	r3, r2
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x3ae>
 8002e08:	e013      	b.n	8002e32 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0a:	f7fd fa45 	bl	8000298 <HAL_GetTick>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e12:	e009      	b.n	8002e28 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e14:	f7fd fa40 	bl	8000298 <HAL_GetTick>
 8002e18:	0002      	movs	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	4aa5      	ldr	r2, [pc, #660]	; (80030b4 <HAL_RCC_OscConfig+0x678>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e162      	b.n	80030ee <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e28:	4ba1      	ldr	r3, [pc, #644]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e32:	2317      	movs	r3, #23
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d105      	bne.n	8002e48 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e3c:	4b9c      	ldr	r3, [pc, #624]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002e3e:	69da      	ldr	r2, [r3, #28]
 8002e40:	4b9b      	ldr	r3, [pc, #620]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002e42:	499d      	ldr	r1, [pc, #628]	; (80030b8 <HAL_RCC_OscConfig+0x67c>)
 8002e44:	400a      	ands	r2, r1
 8002e46:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d063      	beq.n	8002f1a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d12a      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e5a:	4b95      	ldr	r3, [pc, #596]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e5e:	4b94      	ldr	r3, [pc, #592]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002e60:	2104      	movs	r1, #4
 8002e62:	430a      	orrs	r2, r1
 8002e64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002e66:	4b92      	ldr	r3, [pc, #584]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e6a:	4b91      	ldr	r3, [pc, #580]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e72:	f7fd fa11 	bl	8000298 <HAL_GetTick>
 8002e76:	0003      	movs	r3, r0
 8002e78:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002e7c:	f7fd fa0c 	bl	8000298 <HAL_GetTick>
 8002e80:	0002      	movs	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e12f      	b.n	80030ee <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002e8e:	4b88      	ldr	r3, [pc, #544]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e92:	2202      	movs	r2, #2
 8002e94:	4013      	ands	r3, r2
 8002e96:	d0f1      	beq.n	8002e7c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002e98:	4b85      	ldr	r3, [pc, #532]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9c:	22f8      	movs	r2, #248	; 0xf8
 8002e9e:	4393      	bics	r3, r2
 8002ea0:	0019      	movs	r1, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	00da      	lsls	r2, r3, #3
 8002ea8:	4b81      	ldr	r3, [pc, #516]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	635a      	str	r2, [r3, #52]	; 0x34
 8002eae:	e034      	b.n	8002f1a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	3305      	adds	r3, #5
 8002eb6:	d111      	bne.n	8002edc <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002eb8:	4b7d      	ldr	r3, [pc, #500]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ebc:	4b7c      	ldr	r3, [pc, #496]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002ebe:	2104      	movs	r1, #4
 8002ec0:	438a      	bics	r2, r1
 8002ec2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ec4:	4b7a      	ldr	r3, [pc, #488]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec8:	22f8      	movs	r2, #248	; 0xf8
 8002eca:	4393      	bics	r3, r2
 8002ecc:	0019      	movs	r1, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	00da      	lsls	r2, r3, #3
 8002ed4:	4b76      	ldr	r3, [pc, #472]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	635a      	str	r2, [r3, #52]	; 0x34
 8002eda:	e01e      	b.n	8002f1a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002edc:	4b74      	ldr	r3, [pc, #464]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee0:	4b73      	ldr	r3, [pc, #460]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002ee2:	2104      	movs	r1, #4
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002ee8:	4b71      	ldr	r3, [pc, #452]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eec:	4b70      	ldr	r3, [pc, #448]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002eee:	2101      	movs	r1, #1
 8002ef0:	438a      	bics	r2, r1
 8002ef2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef4:	f7fd f9d0 	bl	8000298 <HAL_GetTick>
 8002ef8:	0003      	movs	r3, r0
 8002efa:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002efe:	f7fd f9cb 	bl	8000298 <HAL_GetTick>
 8002f02:	0002      	movs	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e0ee      	b.n	80030ee <HAL_RCC_OscConfig+0x6b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f10:	4b67      	ldr	r3, [pc, #412]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f14:	2202      	movs	r2, #2
 8002f16:	4013      	ands	r3, r2
 8002f18:	d1f1      	bne.n	8002efe <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	4013      	ands	r3, r2
 8002f22:	d05c      	beq.n	8002fde <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002f24:	4b62      	ldr	r3, [pc, #392]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	220c      	movs	r2, #12
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b0c      	cmp	r3, #12
 8002f2e:	d00e      	beq.n	8002f4e <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002f30:	4b5f      	ldr	r3, [pc, #380]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	220c      	movs	r2, #12
 8002f36:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d114      	bne.n	8002f66 <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002f3c:	4b5c      	ldr	r3, [pc, #368]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	23c0      	movs	r3, #192	; 0xc0
 8002f42:	025b      	lsls	r3, r3, #9
 8002f44:	401a      	ands	r2, r3
 8002f46:	23c0      	movs	r3, #192	; 0xc0
 8002f48:	025b      	lsls	r3, r3, #9
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d10b      	bne.n	8002f66 <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002f4e:	4b58      	ldr	r3, [pc, #352]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	025b      	lsls	r3, r3, #9
 8002f56:	4013      	ands	r3, r2
 8002f58:	d040      	beq.n	8002fdc <HAL_RCC_OscConfig+0x5a0>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d03c      	beq.n	8002fdc <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e0c3      	b.n	80030ee <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d01b      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002f6e:	4b50      	ldr	r3, [pc, #320]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f72:	4b4f      	ldr	r3, [pc, #316]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002f74:	2180      	movs	r1, #128	; 0x80
 8002f76:	0249      	lsls	r1, r1, #9
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7fd f98c 	bl	8000298 <HAL_GetTick>
 8002f80:	0003      	movs	r3, r0
 8002f82:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f86:	f7fd f987 	bl	8000298 <HAL_GetTick>
 8002f8a:	0002      	movs	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e0aa      	b.n	80030ee <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002f98:	4b45      	ldr	r3, [pc, #276]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	025b      	lsls	r3, r3, #9
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x54a>
 8002fa4:	e01b      	b.n	8002fde <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002fa6:	4b42      	ldr	r3, [pc, #264]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002faa:	4b41      	ldr	r3, [pc, #260]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002fac:	4943      	ldr	r1, [pc, #268]	; (80030bc <HAL_RCC_OscConfig+0x680>)
 8002fae:	400a      	ands	r2, r1
 8002fb0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb2:	f7fd f971 	bl	8000298 <HAL_GetTick>
 8002fb6:	0003      	movs	r3, r0
 8002fb8:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fbc:	f7fd f96c 	bl	8000298 <HAL_GetTick>
 8002fc0:	0002      	movs	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e08f      	b.n	80030ee <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002fce:	4b38      	ldr	r3, [pc, #224]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	025b      	lsls	r3, r3, #9
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x580>
 8002fda:	e000      	b.n	8002fde <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002fdc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d100      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x5ac>
 8002fe6:	e081      	b.n	80030ec <HAL_RCC_OscConfig+0x6b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fe8:	4b31      	ldr	r3, [pc, #196]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	220c      	movs	r2, #12
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d100      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x5ba>
 8002ff4:	e078      	b.n	80030e8 <HAL_RCC_OscConfig+0x6ac>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d14c      	bne.n	8003098 <HAL_RCC_OscConfig+0x65c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffe:	4b2c      	ldr	r3, [pc, #176]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8003004:	492e      	ldr	r1, [pc, #184]	; (80030c0 <HAL_RCC_OscConfig+0x684>)
 8003006:	400a      	ands	r2, r1
 8003008:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7fd f945 	bl	8000298 <HAL_GetTick>
 800300e:	0003      	movs	r3, r0
 8003010:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003014:	f7fd f940 	bl	8000298 <HAL_GetTick>
 8003018:	0002      	movs	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e063      	b.n	80030ee <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003026:	4b22      	ldr	r3, [pc, #136]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	2380      	movs	r3, #128	; 0x80
 800302c:	049b      	lsls	r3, r3, #18
 800302e:	4013      	ands	r3, r2
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003032:	4b1f      	ldr	r3, [pc, #124]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	220f      	movs	r2, #15
 8003038:	4393      	bics	r3, r2
 800303a:	0019      	movs	r1, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003040:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8003042:	430a      	orrs	r2, r1
 8003044:	62da      	str	r2, [r3, #44]	; 0x2c
 8003046:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4a1e      	ldr	r2, [pc, #120]	; (80030c4 <HAL_RCC_OscConfig+0x688>)
 800304c:	4013      	ands	r3, r2
 800304e:	0019      	movs	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	431a      	orrs	r2, r3
 800305a:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 800305c:	430a      	orrs	r2, r1
 800305e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003060:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 8003066:	2180      	movs	r1, #128	; 0x80
 8003068:	0449      	lsls	r1, r1, #17
 800306a:	430a      	orrs	r2, r1
 800306c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306e:	f7fd f913 	bl	8000298 <HAL_GetTick>
 8003072:	0003      	movs	r3, r0
 8003074:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x64e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003078:	f7fd f90e 	bl	8000298 <HAL_GetTick>
 800307c:	0002      	movs	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x64e>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e031      	b.n	80030ee <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800308a:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	2380      	movs	r3, #128	; 0x80
 8003090:	049b      	lsls	r3, r3, #18
 8003092:	4013      	ands	r3, r2
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0x63c>
 8003096:	e029      	b.n	80030ec <HAL_RCC_OscConfig+0x6b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <HAL_RCC_OscConfig+0x674>)
 800309e:	4908      	ldr	r1, [pc, #32]	; (80030c0 <HAL_RCC_OscConfig+0x684>)
 80030a0:	400a      	ands	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a4:	f7fd f8f8 	bl	8000298 <HAL_GetTick>
 80030a8:	0003      	movs	r3, r0
 80030aa:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ac:	e015      	b.n	80030da <HAL_RCC_OscConfig+0x69e>
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	40021000 	.word	0x40021000
 80030b4:	00001388 	.word	0x00001388
 80030b8:	efffffff 	.word	0xefffffff
 80030bc:	fffeffff 	.word	0xfffeffff
 80030c0:	feffffff 	.word	0xfeffffff
 80030c4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c8:	f7fd f8e6 	bl	8000298 <HAL_GetTick>
 80030cc:	0002      	movs	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x69e>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e009      	b.n	80030ee <HAL_RCC_OscConfig+0x6b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030da:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <HAL_RCC_OscConfig+0x6bc>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	049b      	lsls	r3, r3, #18
 80030e2:	4013      	ands	r3, r2
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x68c>
 80030e6:	e001      	b.n	80030ec <HAL_RCC_OscConfig+0x6b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e000      	b.n	80030ee <HAL_RCC_OscConfig+0x6b2>
    }
  }
  
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	0018      	movs	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b006      	add	sp, #24
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	40021000 	.word	0x40021000

080030fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800310a:	4b7b      	ldr	r3, [pc, #492]	; (80032f8 <HAL_RCC_ClockConfig+0x1fc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2201      	movs	r2, #1
 8003110:	4013      	ands	r3, r2
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d911      	bls.n	800313c <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003118:	4b77      	ldr	r3, [pc, #476]	; (80032f8 <HAL_RCC_ClockConfig+0x1fc>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2201      	movs	r2, #1
 800311e:	4393      	bics	r3, r2
 8003120:	0019      	movs	r1, r3
 8003122:	4b75      	ldr	r3, [pc, #468]	; (80032f8 <HAL_RCC_ClockConfig+0x1fc>)
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800312a:	4b73      	ldr	r3, [pc, #460]	; (80032f8 <HAL_RCC_ClockConfig+0x1fc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2201      	movs	r2, #1
 8003130:	4013      	ands	r3, r2
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0d8      	b.n	80032ee <HAL_RCC_ClockConfig+0x1f2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2202      	movs	r2, #2
 8003142:	4013      	ands	r3, r2
 8003144:	d009      	beq.n	800315a <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003146:	4b6d      	ldr	r3, [pc, #436]	; (80032fc <HAL_RCC_ClockConfig+0x200>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	22f0      	movs	r2, #240	; 0xf0
 800314c:	4393      	bics	r3, r2
 800314e:	0019      	movs	r1, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	4b69      	ldr	r3, [pc, #420]	; (80032fc <HAL_RCC_ClockConfig+0x200>)
 8003156:	430a      	orrs	r2, r1
 8003158:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2201      	movs	r2, #1
 8003160:	4013      	ands	r3, r2
 8003162:	d100      	bne.n	8003166 <HAL_RCC_ClockConfig+0x6a>
 8003164:	e089      	b.n	800327a <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b63      	ldr	r3, [pc, #396]	; (80032fc <HAL_RCC_ClockConfig+0x200>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	029b      	lsls	r3, r3, #10
 8003176:	4013      	ands	r3, r2
 8003178:	d120      	bne.n	80031bc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e0b7      	b.n	80032ee <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003186:	4b5d      	ldr	r3, [pc, #372]	; (80032fc <HAL_RCC_ClockConfig+0x200>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	049b      	lsls	r3, r3, #18
 800318e:	4013      	ands	r3, r2
 8003190:	d114      	bne.n	80031bc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0ab      	b.n	80032ee <HAL_RCC_ClockConfig+0x1f2>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b03      	cmp	r3, #3
 800319c:	d107      	bne.n	80031ae <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800319e:	4b57      	ldr	r3, [pc, #348]	; (80032fc <HAL_RCC_ClockConfig+0x200>)
 80031a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031a2:	2380      	movs	r3, #128	; 0x80
 80031a4:	025b      	lsls	r3, r3, #9
 80031a6:	4013      	ands	r3, r2
 80031a8:	d108      	bne.n	80031bc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e09f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1f2>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ae:	4b53      	ldr	r3, [pc, #332]	; (80032fc <HAL_RCC_ClockConfig+0x200>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2202      	movs	r2, #2
 80031b4:	4013      	ands	r3, r2
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e098      	b.n	80032ee <HAL_RCC_ClockConfig+0x1f2>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031bc:	4b4f      	ldr	r3, [pc, #316]	; (80032fc <HAL_RCC_ClockConfig+0x200>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2203      	movs	r2, #3
 80031c2:	4393      	bics	r3, r2
 80031c4:	0019      	movs	r1, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	4b4c      	ldr	r3, [pc, #304]	; (80032fc <HAL_RCC_ClockConfig+0x200>)
 80031cc:	430a      	orrs	r2, r1
 80031ce:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d0:	f7fd f862 	bl	8000298 <HAL_GetTick>
 80031d4:	0003      	movs	r3, r0
 80031d6:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d111      	bne.n	8003204 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031e0:	e009      	b.n	80031f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e2:	f7fd f859 	bl	8000298 <HAL_GetTick>
 80031e6:	0002      	movs	r2, r0
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	4a44      	ldr	r2, [pc, #272]	; (8003300 <HAL_RCC_ClockConfig+0x204>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e07b      	b.n	80032ee <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80031f6:	4b41      	ldr	r3, [pc, #260]	; (80032fc <HAL_RCC_ClockConfig+0x200>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	220c      	movs	r2, #12
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d1ef      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xe6>
 8003202:	e03a      	b.n	800327a <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d111      	bne.n	8003230 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800320c:	e009      	b.n	8003222 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800320e:	f7fd f843 	bl	8000298 <HAL_GetTick>
 8003212:	0002      	movs	r2, r0
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	4a39      	ldr	r2, [pc, #228]	; (8003300 <HAL_RCC_ClockConfig+0x204>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e065      	b.n	80032ee <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003222:	4b36      	ldr	r3, [pc, #216]	; (80032fc <HAL_RCC_ClockConfig+0x200>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	220c      	movs	r2, #12
 8003228:	4013      	ands	r3, r2
 800322a:	2b08      	cmp	r3, #8
 800322c:	d1ef      	bne.n	800320e <HAL_RCC_ClockConfig+0x112>
 800322e:	e024      	b.n	800327a <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b03      	cmp	r3, #3
 8003236:	d11b      	bne.n	8003270 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8003238:	e009      	b.n	800324e <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323a:	f7fd f82d 	bl	8000298 <HAL_GetTick>
 800323e:	0002      	movs	r2, r0
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	4a2e      	ldr	r2, [pc, #184]	; (8003300 <HAL_RCC_ClockConfig+0x204>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e04f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 800324e:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <HAL_RCC_ClockConfig+0x200>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	220c      	movs	r2, #12
 8003254:	4013      	ands	r3, r2
 8003256:	2b0c      	cmp	r3, #12
 8003258:	d1ef      	bne.n	800323a <HAL_RCC_ClockConfig+0x13e>
 800325a:	e00e      	b.n	800327a <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800325c:	f7fd f81c 	bl	8000298 <HAL_GetTick>
 8003260:	0002      	movs	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	4a26      	ldr	r2, [pc, #152]	; (8003300 <HAL_RCC_ClockConfig+0x204>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e03e      	b.n	80032ee <HAL_RCC_ClockConfig+0x1f2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003270:	4b22      	ldr	r3, [pc, #136]	; (80032fc <HAL_RCC_ClockConfig+0x200>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	220c      	movs	r2, #12
 8003276:	4013      	ands	r3, r2
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800327a:	4b1f      	ldr	r3, [pc, #124]	; (80032f8 <HAL_RCC_ClockConfig+0x1fc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2201      	movs	r2, #1
 8003280:	4013      	ands	r3, r2
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d211      	bcs.n	80032ac <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003288:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <HAL_RCC_ClockConfig+0x1fc>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2201      	movs	r2, #1
 800328e:	4393      	bics	r3, r2
 8003290:	0019      	movs	r1, r3
 8003292:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <HAL_RCC_ClockConfig+0x1fc>)
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800329a:	4b17      	ldr	r3, [pc, #92]	; (80032f8 <HAL_RCC_ClockConfig+0x1fc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2201      	movs	r2, #1
 80032a0:	4013      	ands	r3, r2
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d001      	beq.n	80032ac <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e020      	b.n	80032ee <HAL_RCC_ClockConfig+0x1f2>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2204      	movs	r2, #4
 80032b2:	4013      	ands	r3, r2
 80032b4:	d009      	beq.n	80032ca <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80032b6:	4b11      	ldr	r3, [pc, #68]	; (80032fc <HAL_RCC_ClockConfig+0x200>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4a12      	ldr	r2, [pc, #72]	; (8003304 <HAL_RCC_ClockConfig+0x208>)
 80032bc:	4013      	ands	r3, r2
 80032be:	0019      	movs	r1, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <HAL_RCC_ClockConfig+0x200>)
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032ca:	f000 f821 	bl	8003310 <HAL_RCC_GetSysClockFreq>
 80032ce:	0001      	movs	r1, r0
 80032d0:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <HAL_RCC_ClockConfig+0x200>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	091b      	lsrs	r3, r3, #4
 80032d6:	220f      	movs	r2, #15
 80032d8:	4013      	ands	r3, r2
 80032da:	4a0b      	ldr	r2, [pc, #44]	; (8003308 <HAL_RCC_ClockConfig+0x20c>)
 80032dc:	5cd3      	ldrb	r3, [r2, r3]
 80032de:	000a      	movs	r2, r1
 80032e0:	40da      	lsrs	r2, r3
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <HAL_RCC_ClockConfig+0x210>)
 80032e4:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80032e6:	2000      	movs	r0, #0
 80032e8:	f7fc ffae 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	0018      	movs	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b004      	add	sp, #16
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	40022000 	.word	0x40022000
 80032fc:	40021000 	.word	0x40021000
 8003300:	00001388 	.word	0x00001388
 8003304:	fffff8ff 	.word	0xfffff8ff
 8003308:	08005a54 	.word	0x08005a54
 800330c:	200000b8 	.word	0x200000b8

08003310 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003310:	b590      	push	{r4, r7, lr}
 8003312:	b08f      	sub	sp, #60	; 0x3c
 8003314:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003316:	2314      	movs	r3, #20
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	4a37      	ldr	r2, [pc, #220]	; (80033f8 <HAL_RCC_GetSysClockFreq+0xe8>)
 800331c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800331e:	c313      	stmia	r3!, {r0, r1, r4}
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003324:	1d3b      	adds	r3, r7, #4
 8003326:	4a35      	ldr	r2, [pc, #212]	; (80033fc <HAL_RCC_GetSysClockFreq+0xec>)
 8003328:	ca13      	ldmia	r2!, {r0, r1, r4}
 800332a:	c313      	stmia	r3!, {r0, r1, r4}
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003334:	2300      	movs	r3, #0
 8003336:	62bb      	str	r3, [r7, #40]	; 0x28
 8003338:	2300      	movs	r3, #0
 800333a:	637b      	str	r3, [r7, #52]	; 0x34
 800333c:	2300      	movs	r3, #0
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003344:	4b2e      	ldr	r3, [pc, #184]	; (8003400 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334c:	220c      	movs	r2, #12
 800334e:	4013      	ands	r3, r2
 8003350:	2b08      	cmp	r3, #8
 8003352:	d006      	beq.n	8003362 <HAL_RCC_GetSysClockFreq+0x52>
 8003354:	2b0c      	cmp	r3, #12
 8003356:	d043      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0xd0>
 8003358:	2b04      	cmp	r3, #4
 800335a:	d144      	bne.n	80033e6 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800335c:	4b29      	ldr	r3, [pc, #164]	; (8003404 <HAL_RCC_GetSysClockFreq+0xf4>)
 800335e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003360:	e044      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	0c9b      	lsrs	r3, r3, #18
 8003366:	220f      	movs	r2, #15
 8003368:	4013      	ands	r3, r2
 800336a:	2214      	movs	r2, #20
 800336c:	18ba      	adds	r2, r7, r2
 800336e:	5cd3      	ldrb	r3, [r2, r3]
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003372:	4b23      	ldr	r3, [pc, #140]	; (8003400 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	220f      	movs	r2, #15
 8003378:	4013      	ands	r3, r2
 800337a:	1d3a      	adds	r2, r7, #4
 800337c:	5cd3      	ldrb	r3, [r2, r3]
 800337e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003382:	23c0      	movs	r3, #192	; 0xc0
 8003384:	025b      	lsls	r3, r3, #9
 8003386:	401a      	ands	r2, r3
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	025b      	lsls	r3, r3, #9
 800338c:	429a      	cmp	r2, r3
 800338e:	d109      	bne.n	80033a4 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003392:	481c      	ldr	r0, [pc, #112]	; (8003404 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003394:	f7fc feb8 	bl	8000108 <__udivsi3>
 8003398:	0003      	movs	r3, r0
 800339a:	001a      	movs	r2, r3
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	4353      	muls	r3, r2
 80033a0:	637b      	str	r3, [r7, #52]	; 0x34
 80033a2:	e01a      	b.n	80033da <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80033a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a6:	23c0      	movs	r3, #192	; 0xc0
 80033a8:	025b      	lsls	r3, r3, #9
 80033aa:	401a      	ands	r2, r3
 80033ac:	23c0      	movs	r3, #192	; 0xc0
 80033ae:	025b      	lsls	r3, r3, #9
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d109      	bne.n	80033c8 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 80033b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033b6:	4814      	ldr	r0, [pc, #80]	; (8003408 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033b8:	f7fc fea6 	bl	8000108 <__udivsi3>
 80033bc:	0003      	movs	r3, r0
 80033be:	001a      	movs	r2, r3
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	4353      	muls	r3, r2
 80033c4:	637b      	str	r3, [r7, #52]	; 0x34
 80033c6:	e008      	b.n	80033da <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80033c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033ca:	480e      	ldr	r0, [pc, #56]	; (8003404 <HAL_RCC_GetSysClockFreq+0xf4>)
 80033cc:	f7fc fe9c 	bl	8000108 <__udivsi3>
 80033d0:	0003      	movs	r3, r0
 80033d2:	001a      	movs	r2, r3
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	4353      	muls	r3, r2
 80033d8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 80033da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033dc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033de:	e005      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033e4:	e002      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033e6:	4b07      	ldr	r3, [pc, #28]	; (8003404 <HAL_RCC_GetSysClockFreq+0xf4>)
 80033e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033ea:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80033ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80033ee:	0018      	movs	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b00f      	add	sp, #60	; 0x3c
 80033f4:	bd90      	pop	{r4, r7, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	0800597c 	.word	0x0800597c
 80033fc:	0800598c 	.word	0x0800598c
 8003400:	40021000 	.word	0x40021000
 8003404:	007a1200 	.word	0x007a1200
 8003408:	02dc6c00 	.word	0x02dc6c00

0800340c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003410:	4b02      	ldr	r3, [pc, #8]	; (800341c <HAL_RCC_GetHCLKFreq+0x10>)
 8003412:	681b      	ldr	r3, [r3, #0]
}
 8003414:	0018      	movs	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	200000b8 	.word	0x200000b8

08003420 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	2380      	movs	r3, #128	; 0x80
 8003436:	025b      	lsls	r3, r3, #9
 8003438:	4013      	ands	r3, r2
 800343a:	d100      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800343c:	e08f      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800343e:	2317      	movs	r3, #23
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	2200      	movs	r2, #0
 8003444:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003446:	4b6f      	ldr	r3, [pc, #444]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003448:	69da      	ldr	r2, [r3, #28]
 800344a:	2380      	movs	r3, #128	; 0x80
 800344c:	055b      	lsls	r3, r3, #21
 800344e:	4013      	ands	r3, r2
 8003450:	d111      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003452:	4b6c      	ldr	r3, [pc, #432]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003454:	69da      	ldr	r2, [r3, #28]
 8003456:	4b6b      	ldr	r3, [pc, #428]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003458:	2180      	movs	r1, #128	; 0x80
 800345a:	0549      	lsls	r1, r1, #21
 800345c:	430a      	orrs	r2, r1
 800345e:	61da      	str	r2, [r3, #28]
 8003460:	4b68      	ldr	r3, [pc, #416]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003462:	69da      	ldr	r2, [r3, #28]
 8003464:	2380      	movs	r3, #128	; 0x80
 8003466:	055b      	lsls	r3, r3, #21
 8003468:	4013      	ands	r3, r2
 800346a:	60bb      	str	r3, [r7, #8]
 800346c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800346e:	2317      	movs	r3, #23
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	2201      	movs	r2, #1
 8003474:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003476:	4b64      	ldr	r3, [pc, #400]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	2380      	movs	r3, #128	; 0x80
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	4013      	ands	r3, r2
 8003480:	d11a      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003482:	4b61      	ldr	r3, [pc, #388]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	4b60      	ldr	r3, [pc, #384]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003488:	2180      	movs	r1, #128	; 0x80
 800348a:	0049      	lsls	r1, r1, #1
 800348c:	430a      	orrs	r2, r1
 800348e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003490:	f7fc ff02 	bl	8000298 <HAL_GetTick>
 8003494:	0003      	movs	r3, r0
 8003496:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003498:	e008      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349a:	f7fc fefd 	bl	8000298 <HAL_GetTick>
 800349e:	0002      	movs	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b64      	cmp	r3, #100	; 0x64
 80034a6:	d901      	bls.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e0a6      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ac:	4b56      	ldr	r3, [pc, #344]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	2380      	movs	r3, #128	; 0x80
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	4013      	ands	r3, r2
 80034b6:	d0f0      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034b8:	4b52      	ldr	r3, [pc, #328]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80034ba:	6a1a      	ldr	r2, [r3, #32]
 80034bc:	23c0      	movs	r3, #192	; 0xc0
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4013      	ands	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d034      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	23c0      	movs	r3, #192	; 0xc0
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4013      	ands	r3, r2
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d02c      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034da:	4b4a      	ldr	r3, [pc, #296]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4a4b      	ldr	r2, [pc, #300]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034e4:	4b47      	ldr	r3, [pc, #284]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80034e6:	6a1a      	ldr	r2, [r3, #32]
 80034e8:	4b46      	ldr	r3, [pc, #280]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80034ea:	2180      	movs	r1, #128	; 0x80
 80034ec:	0249      	lsls	r1, r1, #9
 80034ee:	430a      	orrs	r2, r1
 80034f0:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034f2:	4b44      	ldr	r3, [pc, #272]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80034f4:	6a1a      	ldr	r2, [r3, #32]
 80034f6:	4b43      	ldr	r3, [pc, #268]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80034f8:	4945      	ldr	r1, [pc, #276]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80034fa:	400a      	ands	r2, r1
 80034fc:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034fe:	4b41      	ldr	r3, [pc, #260]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2201      	movs	r2, #1
 8003508:	4013      	ands	r3, r2
 800350a:	d013      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fc fec4 	bl	8000298 <HAL_GetTick>
 8003510:	0003      	movs	r3, r0
 8003512:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003514:	e009      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003516:	f7fc febf 	bl	8000298 <HAL_GetTick>
 800351a:	0002      	movs	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	4a3c      	ldr	r2, [pc, #240]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e067      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352a:	4b36      	ldr	r3, [pc, #216]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	2202      	movs	r2, #2
 8003530:	4013      	ands	r3, r2
 8003532:	d0f0      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003534:	4b33      	ldr	r3, [pc, #204]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	4a34      	ldr	r2, [pc, #208]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800353a:	4013      	ands	r3, r2
 800353c:	0019      	movs	r1, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	4b30      	ldr	r3, [pc, #192]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003544:	430a      	orrs	r2, r1
 8003546:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003548:	2317      	movs	r3, #23
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d105      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003552:	4b2c      	ldr	r3, [pc, #176]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003554:	69da      	ldr	r2, [r3, #28]
 8003556:	4b2b      	ldr	r3, [pc, #172]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003558:	492f      	ldr	r1, [pc, #188]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800355a:	400a      	ands	r2, r1
 800355c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2201      	movs	r2, #1
 8003564:	4013      	ands	r3, r2
 8003566:	d009      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003568:	4b26      	ldr	r3, [pc, #152]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	2203      	movs	r2, #3
 800356e:	4393      	bics	r3, r2
 8003570:	0019      	movs	r1, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	4b23      	ldr	r3, [pc, #140]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003578:	430a      	orrs	r2, r1
 800357a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2202      	movs	r2, #2
 8003582:	4013      	ands	r3, r2
 8003584:	d009      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003586:	4b1f      	ldr	r3, [pc, #124]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	4a24      	ldr	r2, [pc, #144]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800358c:	4013      	ands	r3, r2
 800358e:	0019      	movs	r1, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003596:	430a      	orrs	r2, r1
 8003598:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2220      	movs	r2, #32
 80035a0:	4013      	ands	r3, r2
 80035a2:	d009      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035a4:	4b17      	ldr	r3, [pc, #92]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	2210      	movs	r2, #16
 80035aa:	4393      	bics	r3, r2
 80035ac:	0019      	movs	r1, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691a      	ldr	r2, [r3, #16]
 80035b2:	4b14      	ldr	r3, [pc, #80]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80035b4:	430a      	orrs	r2, r1
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	029b      	lsls	r3, r3, #10
 80035c0:	4013      	ands	r3, r2
 80035c2:	d009      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035c4:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	2280      	movs	r2, #128	; 0x80
 80035ca:	4393      	bics	r3, r2
 80035cc:	0019      	movs	r1, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80035d4:	430a      	orrs	r2, r1
 80035d6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	2380      	movs	r3, #128	; 0x80
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4013      	ands	r3, r2
 80035e2:	d009      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035e4:	4b07      	ldr	r3, [pc, #28]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	2240      	movs	r2, #64	; 0x40
 80035ea:	4393      	bics	r3, r2
 80035ec:	0019      	movs	r1, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695a      	ldr	r2, [r3, #20]
 80035f2:	4b04      	ldr	r3, [pc, #16]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80035f4:	430a      	orrs	r2, r1
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	0018      	movs	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	b006      	add	sp, #24
 8003600:	bd80      	pop	{r7, pc}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	40021000 	.word	0x40021000
 8003608:	40007000 	.word	0x40007000
 800360c:	fffffcff 	.word	0xfffffcff
 8003610:	fffeffff 	.word	0xfffeffff
 8003614:	00001388 	.word	0x00001388
 8003618:	efffffff 	.word	0xefffffff
 800361c:	fffcffff 	.word	0xfffcffff

08003620 <USBD_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	000a      	movs	r2, r1
 800362a:	1cfb      	adds	r3, r7, #3
 800362c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0;
 800362e:	230f      	movs	r3, #15
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	2200      	movs	r2, #0
 8003634:	701a      	strb	r2, [r3, #0]
  
  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	2304      	movs	r3, #4
 800363a:	2203      	movs	r2, #3
 800363c:	2181      	movs	r1, #129	; 0x81
 800363e:	f001 fe35 	bl	80052ac <USBD_LL_OpenEP>
                 HID_EPIN_ADDR,
                 USBD_EP_TYPE_INTR,
                 HID_EPIN_SIZE);  
  
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 8003642:	2010      	movs	r0, #16
 8003644:	f001 ffba 	bl	80055bc <USBD_static_malloc>
 8003648:	0001      	movs	r1, r0
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	2386      	movs	r3, #134	; 0x86
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	50d1      	str	r1, [r2, r3]
  
  if(pdev->pClassData == NULL)
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	2386      	movs	r3, #134	; 0x86
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	58d3      	ldr	r3, [r2, r3]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d104      	bne.n	8003668 <USBD_HID_Init+0x48>
  {
    ret = 1; 
 800365e:	230f      	movs	r3, #15
 8003660:	18fb      	adds	r3, r7, r3
 8003662:	2201      	movs	r2, #1
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	e005      	b.n	8003674 <USBD_HID_Init+0x54>
  }
  else
  {
    ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	2386      	movs	r3, #134	; 0x86
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	58d3      	ldr	r3, [r2, r3]
 8003670:	2200      	movs	r2, #0
 8003672:	731a      	strb	r2, [r3, #12]
  }
  return ret;
 8003674:	230f      	movs	r3, #15
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	781b      	ldrb	r3, [r3, #0]
}
 800367a:	0018      	movs	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	b004      	add	sp, #16
 8003680:	bd80      	pop	{r7, pc}

08003682 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	000a      	movs	r2, r1
 800368c:	1cfb      	adds	r3, r7, #3
 800368e:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev,
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2181      	movs	r1, #129	; 0x81
 8003694:	0018      	movs	r0, r3
 8003696:	f001 fe40 	bl	800531a <USBD_LL_CloseEP>
                  HID_EPIN_ADDR);
  
  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	2386      	movs	r3, #134	; 0x86
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	58d3      	ldr	r3, [r2, r3]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <USBD_HID_DeInit+0x3c>
  {
    USBD_free(pdev->pClassData);
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	2386      	movs	r3, #134	; 0x86
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	58d3      	ldr	r3, [r2, r3]
 80036ae:	0018      	movs	r0, r3
 80036b0:	f001 ff90 	bl	80055d4 <USBD_static_free>
    pdev->pClassData = NULL;
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	2386      	movs	r3, #134	; 0x86
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	2100      	movs	r1, #0
 80036bc:	50d1      	str	r1, [r2, r3]
  } 
  
  return USBD_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	0018      	movs	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b002      	add	sp, #8
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0;
 80036d2:	2316      	movs	r3, #22
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	2200      	movs	r2, #0
 80036d8:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	613b      	str	r3, [r7, #16]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	2386      	movs	r3, #134	; 0x86
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	58d3      	ldr	r3, [r2, r3]
 80036e6:	60fb      	str	r3, [r7, #12]
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	001a      	movs	r2, r3
 80036ee:	2360      	movs	r3, #96	; 0x60
 80036f0:	4013      	ands	r3, r2
 80036f2:	d036      	beq.n	8003762 <USBD_HID_Setup+0x9a>
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d000      	beq.n	80036fa <USBD_HID_Setup+0x32>
 80036f8:	e077      	b.n	80037ea <USBD_HID_Setup+0x122>
  {
  case USB_REQ_TYPE_CLASS :  
    switch (req->bRequest)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	785b      	ldrb	r3, [r3, #1]
 80036fe:	2b03      	cmp	r3, #3
 8003700:	d00e      	beq.n	8003720 <USBD_HID_Setup+0x58>
 8003702:	dc02      	bgt.n	800370a <USBD_HID_Setup+0x42>
 8003704:	2b02      	cmp	r3, #2
 8003706:	d01b      	beq.n	8003740 <USBD_HID_Setup+0x78>
 8003708:	e022      	b.n	8003750 <USBD_HID_Setup+0x88>
 800370a:	2b0a      	cmp	r3, #10
 800370c:	d00f      	beq.n	800372e <USBD_HID_Setup+0x66>
 800370e:	2b0b      	cmp	r3, #11
 8003710:	d11e      	bne.n	8003750 <USBD_HID_Setup+0x88>
    {
      
      
    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	885b      	ldrh	r3, [r3, #2]
 8003716:	b2db      	uxtb	r3, r3
 8003718:	001a      	movs	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	601a      	str	r2, [r3, #0]
      break;
 800371e:	e01f      	b.n	8003760 <USBD_HID_Setup+0x98>
      
    case HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&hhid->Protocol,
 8003720:	68f9      	ldr	r1, [r7, #12]
      USBD_CtlSendData (pdev, 
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	0018      	movs	r0, r3
 8003728:	f001 f860 	bl	80047ec <USBD_CtlSendData>
                        1);    
      break;
 800372c:	e018      	b.n	8003760 <USBD_HID_Setup+0x98>
      
    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	885b      	ldrh	r3, [r3, #2]
 8003732:	0a1b      	lsrs	r3, r3, #8
 8003734:	b29b      	uxth	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	001a      	movs	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	605a      	str	r2, [r3, #4]
      break;
 800373e:	e00f      	b.n	8003760 <USBD_HID_Setup+0x98>
      
    case HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&hhid->IdleState,
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	1d19      	adds	r1, r3, #4
      USBD_CtlSendData (pdev, 
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	0018      	movs	r0, r3
 800374a:	f001 f84f 	bl	80047ec <USBD_CtlSendData>
                        1);        
      break;      
 800374e:	e007      	b.n	8003760 <USBD_HID_Setup+0x98>
      
    default:
      USBD_CtlError (pdev, req);
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	0011      	movs	r1, r2
 8003756:	0018      	movs	r0, r3
 8003758:	f000 ffc8 	bl	80046ec <USBD_CtlError>
      return USBD_FAIL; 
 800375c:	2302      	movs	r3, #2
 800375e:	e045      	b.n	80037ec <USBD_HID_Setup+0x124>
    }
    break;
 8003760:	e043      	b.n	80037ea <USBD_HID_Setup+0x122>
    
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	785b      	ldrb	r3, [r3, #1]
 8003766:	2b0a      	cmp	r3, #10
 8003768:	d02f      	beq.n	80037ca <USBD_HID_Setup+0x102>
 800376a:	2b0b      	cmp	r3, #11
 800376c:	d036      	beq.n	80037dc <USBD_HID_Setup+0x114>
 800376e:	2b06      	cmp	r3, #6
 8003770:	d13b      	bne.n	80037ea <USBD_HID_Setup+0x122>
    {
    case USB_REQ_GET_DESCRIPTOR: 
      if( req->wValue >> 8 == HID_REPORT_DESC)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	885b      	ldrh	r3, [r3, #2]
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b22      	cmp	r3, #34	; 0x22
 800377c:	d10b      	bne.n	8003796 <USBD_HID_Setup+0xce>
      {
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	88db      	ldrh	r3, [r3, #6]
 8003782:	2216      	movs	r2, #22
 8003784:	18ba      	adds	r2, r7, r2
 8003786:	b299      	uxth	r1, r3
 8003788:	292d      	cmp	r1, #45	; 0x2d
 800378a:	d900      	bls.n	800378e <USBD_HID_Setup+0xc6>
 800378c:	232d      	movs	r3, #45	; 0x2d
 800378e:	8013      	strh	r3, [r2, #0]
        pbuf = HID_MOUSE_ReportDesc;
 8003790:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <USBD_HID_Setup+0x12c>)
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	e010      	b.n	80037b8 <USBD_HID_Setup+0xf0>
      }
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	885b      	ldrh	r3, [r3, #2]
 800379a:	0a1b      	lsrs	r3, r3, #8
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b21      	cmp	r3, #33	; 0x21
 80037a0:	d10a      	bne.n	80037b8 <USBD_HID_Setup+0xf0>
      {
        pbuf = USBD_HID_Desc;   
 80037a2:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <USBD_HID_Setup+0x130>)
 80037a4:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	88db      	ldrh	r3, [r3, #6]
 80037aa:	2216      	movs	r2, #22
 80037ac:	18ba      	adds	r2, r7, r2
 80037ae:	b299      	uxth	r1, r3
 80037b0:	2909      	cmp	r1, #9
 80037b2:	d900      	bls.n	80037b6 <USBD_HID_Setup+0xee>
 80037b4:	2309      	movs	r3, #9
 80037b6:	8013      	strh	r3, [r2, #0]
      }
      
      USBD_CtlSendData (pdev, 
 80037b8:	2316      	movs	r3, #22
 80037ba:	18fb      	adds	r3, r7, r3
 80037bc:	881a      	ldrh	r2, [r3, #0]
 80037be:	6939      	ldr	r1, [r7, #16]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	0018      	movs	r0, r3
 80037c4:	f001 f812 	bl	80047ec <USBD_CtlSendData>
                        pbuf,
                        len);
      
      break;
 80037c8:	e00f      	b.n	80037ea <USBD_HID_Setup+0x122>
      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
                        (uint8_t *)&hhid->AltSetting,
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	3308      	adds	r3, #8
 80037ce:	0019      	movs	r1, r3
      USBD_CtlSendData (pdev,
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	0018      	movs	r0, r3
 80037d6:	f001 f809 	bl	80047ec <USBD_CtlSendData>
                        1);
      break;
 80037da:	e006      	b.n	80037ea <USBD_HID_Setup+0x122>
      
    case USB_REQ_SET_INTERFACE :
      hhid->AltSetting = (uint8_t)(req->wValue);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	885b      	ldrh	r3, [r3, #2]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	001a      	movs	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	609a      	str	r2, [r3, #8]
      break;
 80037e8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return USBD_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	0018      	movs	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b006      	add	sp, #24
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20000074 	.word	0x20000074
 80037f8:	2000005c 	.word	0x2000005c

080037fc <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport     (USBD_HandleTypeDef  *pdev, 
                                 uint8_t *report,
                                 uint16_t len)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	1dbb      	adds	r3, r7, #6
 8003808:	801a      	strh	r2, [r3, #0]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	2386      	movs	r3, #134	; 0x86
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	58d3      	ldr	r3, [r2, r3]
 8003812:	617b      	str	r3, [r7, #20]
  
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	23fe      	movs	r3, #254	; 0xfe
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	5cd3      	ldrb	r3, [r2, r3]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d10d      	bne.n	800383c <USBD_HID_SendReport+0x40>
  {
    if(hhid->state == HID_IDLE)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	7b1b      	ldrb	r3, [r3, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d109      	bne.n	800383c <USBD_HID_SendReport+0x40>
    {
      hhid->state = HID_BUSY;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2201      	movs	r2, #1
 800382c:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit (pdev, 
 800382e:	1dbb      	adds	r3, r7, #6
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	2181      	movs	r1, #129	; 0x81
 8003838:	f001 fe50 	bl	80054dc <USBD_LL_Transmit>
                        HID_EPIN_ADDR,                                      
                        report,
                        len);
    }
  }
  return USBD_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	0018      	movs	r0, r3
 8003840:	46bd      	mov	sp, r7
 8003842:	b006      	add	sp, #24
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <USBD_HID_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetCfgDesc (uint16_t *length)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_CfgDesc);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2222      	movs	r2, #34	; 0x22
 8003854:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8003856:	4b02      	ldr	r3, [pc, #8]	; (8003860 <USBD_HID_GetCfgDesc+0x18>)
}
 8003858:	0018      	movs	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	b002      	add	sp, #8
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000038 	.word	0x20000038

08003864 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn (USBD_HandleTypeDef *pdev, 
                              uint8_t epnum)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	000a      	movs	r2, r1
 800386e:	1cfb      	adds	r3, r7, #3
 8003870:	701a      	strb	r2, [r3, #0]
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	2386      	movs	r3, #134	; 0x86
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	58d3      	ldr	r3, [r2, r3]
 800387a:	2200      	movs	r2, #0
 800387c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	0018      	movs	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	b002      	add	sp, #8
 8003886:	bd80      	pop	{r7, pc}

08003888 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	220a      	movs	r2, #10
 8003894:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8003896:	4b02      	ldr	r3, [pc, #8]	; (80038a0 <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 8003898:	0018      	movs	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	b002      	add	sp, #8
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20000068 	.word	0x20000068

080038a4 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	1dfb      	adds	r3, r7, #7
 80038b0:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 80038b8:	2302      	movs	r3, #2
 80038ba:	e020      	b.n	80038fe <USBD_Init+0x5a>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	2385      	movs	r3, #133	; 0x85
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	58d3      	ldr	r3, [r2, r3]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d004      	beq.n	80038d2 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	2385      	movs	r3, #133	; 0x85
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	2100      	movs	r1, #0
 80038d0:	50d1      	str	r1, [r2, r3]
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d004      	beq.n	80038e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	2384      	movs	r3, #132	; 0x84
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	68b9      	ldr	r1, [r7, #8]
 80038e0:	50d1      	str	r1, [r2, r3]
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	23fe      	movs	r3, #254	; 0xfe
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	2101      	movs	r1, #1
 80038ea:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1dfa      	adds	r2, r7, #7
 80038f0:	7812      	ldrb	r2, [r2, #0]
 80038f2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	0018      	movs	r0, r3
 80038f8:	f001 fc62 	bl	80051c0 <USBD_LL_Init>
  
  return USBD_OK; 
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	0018      	movs	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	b004      	add	sp, #16
 8003904:	bd80      	pop	{r7, pc}

08003906 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8003910:	230f      	movs	r3, #15
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	2200      	movs	r2, #0
 8003916:	701a      	strb	r2, [r3, #0]
  if(pclass != 0)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	2385      	movs	r3, #133	; 0x85
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	6839      	ldr	r1, [r7, #0]
 8003926:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8003928:	230f      	movs	r3, #15
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]
 8003930:	e003      	b.n	800393a <USBD_RegisterClass+0x34>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8003932:	230f      	movs	r3, #15
 8003934:	18fb      	adds	r3, r7, r3
 8003936:	2202      	movs	r2, #2
 8003938:	701a      	strb	r2, [r3, #0]
  }
  
  return status;
 800393a:	230f      	movs	r3, #15
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	781b      	ldrb	r3, [r3, #0]
}
 8003940:	0018      	movs	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	b004      	add	sp, #16
 8003946:	bd80      	pop	{r7, pc}

08003948 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	0018      	movs	r0, r3
 8003954:	f001 fc84 	bl	8005260 <USBD_LL_Start>
  
  return USBD_OK;  
 8003958:	2300      	movs	r3, #0
}
 800395a:	0018      	movs	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	b002      	add	sp, #8
 8003960:	bd80      	pop	{r7, pc}

08003962 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	0018      	movs	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	b002      	add	sp, #8
 8003972:	bd80      	pop	{r7, pc}

08003974 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	000a      	movs	r2, r1
 800397e:	1cfb      	adds	r3, r7, #3
 8003980:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8003982:	230f      	movs	r3, #15
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	2202      	movs	r2, #2
 8003988:	701a      	strb	r2, [r3, #0]
  
  if(pdev->pClass != NULL)
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	2385      	movs	r3, #133	; 0x85
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	58d3      	ldr	r3, [r2, r3]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00f      	beq.n	80039b6 <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	2385      	movs	r3, #133	; 0x85
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	58d3      	ldr	r3, [r2, r3]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	1cfa      	adds	r2, r7, #3
 80039a2:	7811      	ldrb	r1, [r2, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	0010      	movs	r0, r2
 80039a8:	4798      	blx	r3
 80039aa:	1e03      	subs	r3, r0, #0
 80039ac:	d103      	bne.n	80039b6 <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 80039ae:	230f      	movs	r3, #15
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	2200      	movs	r2, #0
 80039b4:	701a      	strb	r2, [r3, #0]
    }
  }
  return ret; 
 80039b6:	230f      	movs	r3, #15
 80039b8:	18fb      	adds	r3, r7, r3
 80039ba:	781b      	ldrb	r3, [r3, #0]
}
 80039bc:	0018      	movs	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	b004      	add	sp, #16
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	000a      	movs	r2, r1
 80039ce:	1cfb      	adds	r3, r7, #3
 80039d0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	2385      	movs	r3, #133	; 0x85
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	58d3      	ldr	r3, [r2, r3]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	1cfa      	adds	r2, r7, #3
 80039de:	7811      	ldrb	r1, [r2, #0]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	0010      	movs	r0, r2
 80039e4:	4798      	blx	r3
  return USBD_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	0018      	movs	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2282      	movs	r2, #130	; 0x82
 80039fe:	0092      	lsls	r2, r2, #2
 8003a00:	4694      	mov	ip, r2
 8003a02:	4463      	add	r3, ip
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	0011      	movs	r1, r2
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f000 fe34 	bl	8004676 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	23fa      	movs	r3, #250	; 0xfa
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	2101      	movs	r1, #1
 8003a16:	50d1      	str	r1, [r2, r3]
  pdev->ep0_data_len = pdev->request.wLength;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a22      	ldr	r2, [pc, #136]	; (8003aa4 <USBD_LL_SetupStage+0xb4>)
 8003a1c:	5a9b      	ldrh	r3, [r3, r2]
 8003a1e:	0019      	movs	r1, r3
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	23fc      	movs	r3, #252	; 0xfc
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	50d1      	str	r1, [r2, r3]
  
  switch (pdev->request.bmRequest & 0x1F) 
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	2382      	movs	r3, #130	; 0x82
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	5cd3      	ldrb	r3, [r2, r3]
 8003a30:	001a      	movs	r2, r3
 8003a32:	231f      	movs	r3, #31
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d00d      	beq.n	8003a56 <USBD_LL_SetupStage+0x66>
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d015      	beq.n	8003a6a <USBD_LL_SetupStage+0x7a>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d11d      	bne.n	8003a7e <USBD_LL_SetupStage+0x8e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2282      	movs	r2, #130	; 0x82
 8003a46:	0092      	lsls	r2, r2, #2
 8003a48:	189a      	adds	r2, r3, r2
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	0011      	movs	r1, r2
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f000 f9be 	bl	8003dd0 <USBD_StdDevReq>
    break;
 8003a54:	e020      	b.n	8003a98 <USBD_LL_SetupStage+0xa8>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2282      	movs	r2, #130	; 0x82
 8003a5a:	0092      	lsls	r2, r2, #2
 8003a5c:	189a      	adds	r2, r3, r2
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	0011      	movs	r1, r2
 8003a62:	0018      	movs	r0, r3
 8003a64:	f000 fa08 	bl	8003e78 <USBD_StdItfReq>
    break;
 8003a68:	e016      	b.n	8003a98 <USBD_LL_SetupStage+0xa8>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2282      	movs	r2, #130	; 0x82
 8003a6e:	0092      	lsls	r2, r2, #2
 8003a70:	189a      	adds	r2, r3, r2
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	0011      	movs	r1, r2
 8003a76:	0018      	movs	r0, r3
 8003a78:	f000 fa3d 	bl	8003ef6 <USBD_StdEPReq>
    break;
 8003a7c:	e00c      	b.n	8003a98 <USBD_LL_SetupStage+0xa8>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	2382      	movs	r3, #130	; 0x82
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	5cd3      	ldrb	r3, [r2, r3]
 8003a86:	227f      	movs	r2, #127	; 0x7f
 8003a88:	4393      	bics	r3, r2
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	0011      	movs	r1, r2
 8003a90:	0018      	movs	r0, r3
 8003a92:	f001 fc6e 	bl	8005372 <USBD_LL_StallEP>
    break;
 8003a96:	46c0      	nop			; (mov r8, r8)
  }  
  return USBD_OK;  
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b002      	add	sp, #8
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	0000020e 	.word	0x0000020e

08003aa8 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	200b      	movs	r0, #11
 8003ab4:	183b      	adds	r3, r7, r0
 8003ab6:	1c0a      	adds	r2, r1, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8003aba:	183b      	adds	r3, r7, r0
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d13e      	bne.n	8003b40 <USBD_LL_DataOutStage+0x98>
  {
    pep = &pdev->ep_out[0];
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3305      	adds	r3, #5
 8003ac6:	33ff      	adds	r3, #255	; 0xff
 8003ac8:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	23fa      	movs	r3, #250	; 0xfa
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	58d3      	ldr	r3, [r2, r3]
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d14c      	bne.n	8003b70 <USBD_LL_DataOutStage+0xc8>
    {
      if(pep->rem_length > pep->maxpacket)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d914      	bls.n	8003b0c <USBD_LL_DataOutStage+0x64>
      {
        pep->rem_length -=  pep->maxpacket;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	1ad2      	subs	r2, r2, r3
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d900      	bls.n	8003afe <USBD_LL_DataOutStage+0x56>
 8003afc:	001a      	movs	r2, r3
        USBD_CtlContinueRx (pdev, 
 8003afe:	b292      	uxth	r2, r2
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	0018      	movs	r0, r3
 8003b06:	f000 fea4 	bl	8004852 <USBD_CtlContinueRx>
 8003b0a:	e031      	b.n	8003b70 <USBD_LL_DataOutStage+0xc8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	2385      	movs	r3, #133	; 0x85
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	58d3      	ldr	r3, [r2, r3]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00d      	beq.n	8003b36 <USBD_LL_DataOutStage+0x8e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	23fe      	movs	r3, #254	; 0xfe
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	5cd3      	ldrb	r3, [r2, r3]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d107      	bne.n	8003b36 <USBD_LL_DataOutStage+0x8e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	2385      	movs	r3, #133	; 0x85
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	58d3      	ldr	r3, [r2, r3]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	0010      	movs	r0, r2
 8003b34:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f000 fe9d 	bl	8004878 <USBD_CtlSendStatus>
 8003b3e:	e017      	b.n	8003b70 <USBD_LL_DataOutStage+0xc8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	2385      	movs	r3, #133	; 0x85
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	58d3      	ldr	r3, [r2, r3]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d010      	beq.n	8003b70 <USBD_LL_DataOutStage+0xc8>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	23fe      	movs	r3, #254	; 0xfe
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataOut != NULL)&&
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d10a      	bne.n	8003b70 <USBD_LL_DataOutStage+0xc8>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	2385      	movs	r3, #133	; 0x85
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	58d3      	ldr	r3, [r2, r3]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	220b      	movs	r2, #11
 8003b66:	18ba      	adds	r2, r7, r2
 8003b68:	7811      	ldrb	r1, [r2, #0]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	0010      	movs	r0, r2
 8003b6e:	4798      	blx	r3
  }  
  return USBD_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	0018      	movs	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b006      	add	sp, #24
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b086      	sub	sp, #24
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	200b      	movs	r0, #11
 8003b86:	183b      	adds	r3, r7, r0
 8003b88:	1c0a      	adds	r2, r1, #0
 8003b8a:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8003b8c:	183b      	adds	r3, r7, r0
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d000      	beq.n	8003b96 <USBD_LL_DataInStage+0x1c>
 8003b94:	e077      	b.n	8003c86 <USBD_LL_DataInStage+0x10c>
  {
    pep = &pdev->ep_in[0];
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	3314      	adds	r3, #20
 8003b9a:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	23fa      	movs	r3, #250	; 0xfa
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	58d3      	ldr	r3, [r2, r3]
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d15e      	bne.n	8003c66 <USBD_LL_DataInStage+0xec>
    {
      if(pep->rem_length > pep->maxpacket)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d915      	bls.n	8003be0 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	1ad2      	subs	r2, r2, r3
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f000 fe2d 	bl	800482c <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2100      	movs	r1, #0
 8003bda:	f001 fcb7 	bl	800554c <USBD_LL_PrepareReceive>
 8003bde:	e042      	b.n	8003c66 <USBD_LL_DataInStage+0xec>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	0019      	movs	r1, r3
 8003bea:	0010      	movs	r0, r2
 8003bec:	f7fc fb12 	bl	8000214 <__aeabi_uidivmod>
 8003bf0:	1e0b      	subs	r3, r1, #0
 8003bf2:	d11f      	bne.n	8003c34 <USBD_LL_DataInStage+0xba>
           (pep->total_length >= pep->maxpacket) &&
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d319      	bcc.n	8003c34 <USBD_LL_DataInStage+0xba>
             (pep->total_length < pdev->ep0_data_len ))
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	68f9      	ldr	r1, [r7, #12]
 8003c06:	23fc      	movs	r3, #252	; 0xfc
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	58cb      	ldr	r3, [r1, r3]
           (pep->total_length >= pep->maxpacket) &&
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d211      	bcs.n	8003c34 <USBD_LL_DataInStage+0xba>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	2100      	movs	r1, #0
 8003c16:	0018      	movs	r0, r3
 8003c18:	f000 fe08 	bl	800482c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	23fc      	movs	r3, #252	; 0xfc
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	2100      	movs	r1, #0
 8003c24:	50d1      	str	r1, [r2, r3]
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	f001 fc8d 	bl	800554c <USBD_LL_PrepareReceive>
 8003c32:	e018      	b.n	8003c66 <USBD_LL_DataInStage+0xec>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	2385      	movs	r3, #133	; 0x85
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	58d3      	ldr	r3, [r2, r3]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00d      	beq.n	8003c5e <USBD_LL_DataInStage+0xe4>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	23fe      	movs	r3, #254	; 0xfe
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	5cd3      	ldrb	r3, [r2, r3]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d107      	bne.n	8003c5e <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	2385      	movs	r3, #133	; 0x85
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	58d3      	ldr	r3, [r2, r3]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	0010      	movs	r0, r2
 8003c5c:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	0018      	movs	r0, r3
 8003c62:	f000 fe1d 	bl	80048a0 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	2380      	movs	r3, #128	; 0x80
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	5cd3      	ldrb	r3, [r2, r3]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d121      	bne.n	8003cb6 <USBD_LL_DataInStage+0x13c>
    {
      USBD_RunTestMode(pdev); 
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	0018      	movs	r0, r3
 8003c76:	f7ff fe74 	bl	8003962 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	2380      	movs	r3, #128	; 0x80
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	2100      	movs	r1, #0
 8003c82:	54d1      	strb	r1, [r2, r3]
 8003c84:	e017      	b.n	8003cb6 <USBD_LL_DataInStage+0x13c>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	2385      	movs	r3, #133	; 0x85
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	58d3      	ldr	r3, [r2, r3]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d010      	beq.n	8003cb6 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	23fe      	movs	r3, #254	; 0xfe
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataIn != NULL)&& 
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d10a      	bne.n	8003cb6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	2385      	movs	r3, #133	; 0x85
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	58d3      	ldr	r3, [r2, r3]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	220b      	movs	r2, #11
 8003cac:	18ba      	adds	r2, r7, r2
 8003cae:	7811      	ldrb	r1, [r2, #0]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	0010      	movs	r0, r2
 8003cb4:	4798      	blx	r3
  }  
  return USBD_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	0018      	movs	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b006      	add	sp, #24
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	2340      	movs	r3, #64	; 0x40
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2100      	movs	r1, #0
 8003cd0:	f001 faec 	bl	80052ac <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	2388      	movs	r3, #136	; 0x88
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	2140      	movs	r1, #64	; 0x40
 8003cdc:	50d1      	str	r1, [r2, r3]
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	2340      	movs	r3, #64	; 0x40
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2180      	movs	r1, #128	; 0x80
 8003ce6:	f001 fae1 	bl	80052ac <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2240      	movs	r2, #64	; 0x40
 8003cee:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	23fe      	movs	r3, #254	; 0xfe
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	54d1      	strb	r1, [r2, r3]
  
  if (pdev->pClassData) 
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	2386      	movs	r3, #134	; 0x86
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	58d3      	ldr	r3, [r2, r3]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <USBD_LL_Reset+0x5c>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	2385      	movs	r3, #133	; 0x85
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	58d3      	ldr	r3, [r2, r3]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	b2d9      	uxtb	r1, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	0018      	movs	r0, r3
 8003d1a:	4790      	blx	r2
 
  
  return USBD_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	0018      	movs	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b002      	add	sp, #8
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	000a      	movs	r2, r1
 8003d30:	1cfb      	adds	r3, r7, #3
 8003d32:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	1cfa      	adds	r2, r7, #3
 8003d38:	7812      	ldrb	r2, [r2, #0]
 8003d3a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	0018      	movs	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b002      	add	sp, #8
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	23fe      	movs	r3, #254	; 0xfe
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	5cd1      	ldrb	r1, [r2, r3]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	23fe      	movs	r3, #254	; 0xfe
 8003d5a:	33ff      	adds	r3, #255	; 0xff
 8003d5c:	54d1      	strb	r1, [r2, r3]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	23fe      	movs	r3, #254	; 0xfe
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	2104      	movs	r1, #4
 8003d66:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b002      	add	sp, #8
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	23fe      	movs	r3, #254	; 0xfe
 8003d7e:	33ff      	adds	r3, #255	; 0xff
 8003d80:	5cd1      	ldrb	r1, [r2, r3]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	23fe      	movs	r3, #254	; 0xfe
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	0018      	movs	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b002      	add	sp, #8
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	23fe      	movs	r3, #254	; 0xfe
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	5cd3      	ldrb	r3, [r2, r3]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d10e      	bne.n	8003dc6 <USBD_LL_SOF+0x32>
  {
    if(pdev->pClass->SOF != NULL)
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	2385      	movs	r3, #133	; 0x85
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	58d3      	ldr	r3, [r2, r3]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d007      	beq.n	8003dc6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	2385      	movs	r3, #133	; 0x85
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	58d3      	ldr	r3, [r2, r3]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	0010      	movs	r0, r2
 8003dc4:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	0018      	movs	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b002      	add	sp, #8
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8003dda:	230f      	movs	r3, #15
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]
  
  switch (req->bRequest) 
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	785b      	ldrb	r3, [r3, #1]
 8003de6:	2b09      	cmp	r3, #9
 8003de8:	d835      	bhi.n	8003e56 <USBD_StdDevReq+0x86>
 8003dea:	009a      	lsls	r2, r3, #2
 8003dec:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <USBD_StdDevReq+0xa4>)
 8003dee:	18d3      	adds	r3, r2, r3
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	469f      	mov	pc, r3
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	0011      	movs	r1, r2
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f000 f992 	bl	8004124 <USBD_GetDescriptor>
    break;
 8003e00:	e030      	b.n	8003e64 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	0011      	movs	r1, r2
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f000 fa95 	bl	8004338 <USBD_SetAddress>
    break;
 8003e0e:	e029      	b.n	8003e64 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	0011      	movs	r1, r2
 8003e16:	0018      	movs	r0, r3
 8003e18:	f000 fadc 	bl	80043d4 <USBD_SetConfig>
    break;
 8003e1c:	e022      	b.n	8003e64 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	0011      	movs	r1, r2
 8003e24:	0018      	movs	r0, r3
 8003e26:	f000 fb71 	bl	800450c <USBD_GetConfig>
    break;
 8003e2a:	e01b      	b.n	8003e64 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	0011      	movs	r1, r2
 8003e32:	0018      	movs	r0, r3
 8003e34:	f000 fba2 	bl	800457c <USBD_GetStatus>
    break;
 8003e38:	e014      	b.n	8003e64 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	0011      	movs	r1, r2
 8003e40:	0018      	movs	r0, r3
 8003e42:	f000 fbca 	bl	80045da <USBD_SetFeature>
    break;
 8003e46:	e00d      	b.n	8003e64 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	0011      	movs	r1, r2
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f000 fbe2 	bl	8004618 <USBD_ClrFeature>
    break;
 8003e54:	e006      	b.n	8003e64 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	0011      	movs	r1, r2
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f000 fc45 	bl	80046ec <USBD_CtlError>
    break;
 8003e62:	46c0      	nop			; (mov r8, r8)
  }
  
  return ret;
 8003e64:	230f      	movs	r3, #15
 8003e66:	18fb      	adds	r3, r7, r3
 8003e68:	781b      	ldrb	r3, [r3, #0]
}
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b004      	add	sp, #16
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	080059e0 	.word	0x080059e0

08003e78 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8003e82:	230f      	movs	r3, #15
 8003e84:	18fb      	adds	r3, r7, r3
 8003e86:	2200      	movs	r2, #0
 8003e88:	701a      	strb	r2, [r3, #0]
  
  switch (pdev->dev_state) 
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	23fe      	movs	r3, #254	; 0xfe
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	5cd3      	ldrb	r3, [r2, r3]
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d122      	bne.n	8003edc <USBD_StdItfReq+0x64>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	889b      	ldrh	r3, [r3, #4]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d816      	bhi.n	8003ece <USBD_StdItfReq+0x56>
    {
      pdev->pClass->Setup (pdev, req); 
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	2385      	movs	r3, #133	; 0x85
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	58d3      	ldr	r3, [r2, r3]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	6839      	ldr	r1, [r7, #0]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	0010      	movs	r0, r2
 8003eb0:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	88db      	ldrh	r3, [r3, #6]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d117      	bne.n	8003eea <USBD_StdItfReq+0x72>
 8003eba:	230f      	movs	r3, #15
 8003ebc:	18fb      	adds	r3, r7, r3
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d112      	bne.n	8003eea <USBD_StdItfReq+0x72>
      {
         USBD_CtlSendStatus(pdev);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f000 fcd6 	bl	8004878 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8003ecc:	e00d      	b.n	8003eea <USBD_StdItfReq+0x72>
       USBD_CtlError(pdev , req);
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	0011      	movs	r1, r2
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f000 fc09 	bl	80046ec <USBD_CtlError>
    break;
 8003eda:	e006      	b.n	8003eea <USBD_StdItfReq+0x72>
    
  default:
     USBD_CtlError(pdev , req);
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	0011      	movs	r1, r2
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f000 fc02 	bl	80046ec <USBD_CtlError>
    break;
 8003ee8:	e000      	b.n	8003eec <USBD_StdItfReq+0x74>
    break;
 8003eea:	46c0      	nop			; (mov r8, r8)
  }
  return USBD_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	0018      	movs	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b004      	add	sp, #16
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b084      	sub	sp, #16
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8003f00:	230f      	movs	r3, #15
 8003f02:	18fb      	adds	r3, r7, r3
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	889a      	ldrh	r2, [r3, #4]
 8003f0c:	230e      	movs	r3, #14
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	701a      	strb	r2, [r3, #0]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	001a      	movs	r2, r3
 8003f18:	2360      	movs	r3, #96	; 0x60
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d10a      	bne.n	8003f36 <USBD_StdEPReq+0x40>
  {
    pdev->pClass->Setup (pdev, req);
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	2385      	movs	r3, #133	; 0x85
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	58d3      	ldr	r3, [r2, r3]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	6839      	ldr	r1, [r7, #0]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	0010      	movs	r0, r2
 8003f30:	4798      	blx	r3
    
    return USBD_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e0f1      	b.n	800411a <USBD_StdEPReq+0x224>
  }
  
  switch (req->bRequest) 
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	785b      	ldrb	r3, [r3, #1]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d04e      	beq.n	8003fdc <USBD_StdEPReq+0xe6>
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d003      	beq.n	8003f4a <USBD_StdEPReq+0x54>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d100      	bne.n	8003f48 <USBD_StdEPReq+0x52>
 8003f46:	e090      	b.n	800406a <USBD_StdEPReq+0x174>
      break;
    }
    break;
    
  default:
    break;
 8003f48:	e0e4      	b.n	8004114 <USBD_StdEPReq+0x21e>
    switch (pdev->dev_state) 
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	23fe      	movs	r3, #254	; 0xfe
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	5cd3      	ldrb	r3, [r2, r3]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d002      	beq.n	8003f5c <USBD_StdEPReq+0x66>
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d013      	beq.n	8003f82 <USBD_StdEPReq+0x8c>
 8003f5a:	e036      	b.n	8003fca <USBD_StdEPReq+0xd4>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003f5c:	230e      	movs	r3, #14
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d038      	beq.n	8003fd8 <USBD_StdEPReq+0xe2>
 8003f66:	230e      	movs	r3, #14
 8003f68:	18fb      	adds	r3, r7, r3
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b80      	cmp	r3, #128	; 0x80
 8003f6e:	d033      	beq.n	8003fd8 <USBD_StdEPReq+0xe2>
        USBD_LL_StallEP(pdev , ep_addr);
 8003f70:	230e      	movs	r3, #14
 8003f72:	18fb      	adds	r3, r7, r3
 8003f74:	781a      	ldrb	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	0011      	movs	r1, r2
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f001 f9f9 	bl	8005372 <USBD_LL_StallEP>
      break;	
 8003f80:	e02a      	b.n	8003fd8 <USBD_StdEPReq+0xe2>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	885b      	ldrh	r3, [r3, #2]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d111      	bne.n	8003fae <USBD_StdEPReq+0xb8>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003f8a:	230e      	movs	r3, #14
 8003f8c:	18fb      	adds	r3, r7, r3
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00c      	beq.n	8003fae <USBD_StdEPReq+0xb8>
 8003f94:	230e      	movs	r3, #14
 8003f96:	18fb      	adds	r3, r7, r3
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b80      	cmp	r3, #128	; 0x80
 8003f9c:	d007      	beq.n	8003fae <USBD_StdEPReq+0xb8>
          USBD_LL_StallEP(pdev , ep_addr);
 8003f9e:	230e      	movs	r3, #14
 8003fa0:	18fb      	adds	r3, r7, r3
 8003fa2:	781a      	ldrb	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	0011      	movs	r1, r2
 8003fa8:	0018      	movs	r0, r3
 8003faa:	f001 f9e2 	bl	8005372 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	2385      	movs	r3, #133	; 0x85
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	58d3      	ldr	r3, [r2, r3]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	6839      	ldr	r1, [r7, #0]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	0010      	movs	r0, r2
 8003fbe:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f000 fc58 	bl	8004878 <USBD_CtlSendStatus>
      break;
 8003fc8:	e007      	b.n	8003fda <USBD_StdEPReq+0xe4>
      USBD_CtlError(pdev , req);
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	0011      	movs	r1, r2
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f000 fb8b 	bl	80046ec <USBD_CtlError>
      break;    
 8003fd6:	e000      	b.n	8003fda <USBD_StdEPReq+0xe4>
      break;	
 8003fd8:	46c0      	nop			; (mov r8, r8)
    break;
 8003fda:	e09b      	b.n	8004114 <USBD_StdEPReq+0x21e>
    switch (pdev->dev_state) 
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	23fe      	movs	r3, #254	; 0xfe
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	5cd3      	ldrb	r3, [r2, r3]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d002      	beq.n	8003fee <USBD_StdEPReq+0xf8>
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d013      	beq.n	8004014 <USBD_StdEPReq+0x11e>
 8003fec:	e032      	b.n	8004054 <USBD_StdEPReq+0x15e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003fee:	230e      	movs	r3, #14
 8003ff0:	18fb      	adds	r3, r7, r3
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d034      	beq.n	8004062 <USBD_StdEPReq+0x16c>
 8003ff8:	230e      	movs	r3, #14
 8003ffa:	18fb      	adds	r3, r7, r3
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b80      	cmp	r3, #128	; 0x80
 8004000:	d02f      	beq.n	8004062 <USBD_StdEPReq+0x16c>
        USBD_LL_StallEP(pdev , ep_addr);
 8004002:	230e      	movs	r3, #14
 8004004:	18fb      	adds	r3, r7, r3
 8004006:	781a      	ldrb	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	0011      	movs	r1, r2
 800400c:	0018      	movs	r0, r3
 800400e:	f001 f9b0 	bl	8005372 <USBD_LL_StallEP>
      break;	
 8004012:	e026      	b.n	8004062 <USBD_StdEPReq+0x16c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	885b      	ldrh	r3, [r3, #2]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d124      	bne.n	8004066 <USBD_StdEPReq+0x170>
        if ((ep_addr & 0x7F) != 0x00) 
 800401c:	230e      	movs	r3, #14
 800401e:	18fb      	adds	r3, r7, r3
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	227f      	movs	r2, #127	; 0x7f
 8004024:	4013      	ands	r3, r2
 8004026:	d010      	beq.n	800404a <USBD_StdEPReq+0x154>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8004028:	230e      	movs	r3, #14
 800402a:	18fb      	adds	r3, r7, r3
 800402c:	781a      	ldrb	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	0011      	movs	r1, r2
 8004032:	0018      	movs	r0, r3
 8004034:	f001 f9c9 	bl	80053ca <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	2385      	movs	r3, #133	; 0x85
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	58d3      	ldr	r3, [r2, r3]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	6839      	ldr	r1, [r7, #0]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	0010      	movs	r0, r2
 8004048:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	0018      	movs	r0, r3
 800404e:	f000 fc13 	bl	8004878 <USBD_CtlSendStatus>
      break;
 8004052:	e008      	b.n	8004066 <USBD_StdEPReq+0x170>
      USBD_CtlError(pdev , req);
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	0011      	movs	r1, r2
 800405a:	0018      	movs	r0, r3
 800405c:	f000 fb46 	bl	80046ec <USBD_CtlError>
      break;    
 8004060:	e002      	b.n	8004068 <USBD_StdEPReq+0x172>
      break;	
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	e056      	b.n	8004114 <USBD_StdEPReq+0x21e>
      break;
 8004066:	46c0      	nop			; (mov r8, r8)
    break;
 8004068:	e054      	b.n	8004114 <USBD_StdEPReq+0x21e>
    switch (pdev->dev_state) 
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	23fe      	movs	r3, #254	; 0xfe
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	5cd3      	ldrb	r3, [r2, r3]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d002      	beq.n	800407c <USBD_StdEPReq+0x186>
 8004076:	2b03      	cmp	r3, #3
 8004078:	d00f      	beq.n	800409a <USBD_StdEPReq+0x1a4>
 800407a:	e042      	b.n	8004102 <USBD_StdEPReq+0x20c>
      if ((ep_addr & 0x7F) != 0x00) 
 800407c:	230e      	movs	r3, #14
 800407e:	18fb      	adds	r3, r7, r3
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	227f      	movs	r2, #127	; 0x7f
 8004084:	4013      	ands	r3, r2
 8004086:	d043      	beq.n	8004110 <USBD_StdEPReq+0x21a>
        USBD_LL_StallEP(pdev , ep_addr);
 8004088:	230e      	movs	r3, #14
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	781a      	ldrb	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	0011      	movs	r1, r2
 8004092:	0018      	movs	r0, r3
 8004094:	f001 f96d 	bl	8005372 <USBD_LL_StallEP>
      break;	
 8004098:	e03a      	b.n	8004110 <USBD_StdEPReq+0x21a>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800409a:	230e      	movs	r3, #14
 800409c:	18fb      	adds	r3, r7, r3
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	b25b      	sxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	da0a      	bge.n	80040bc <USBD_StdEPReq+0x1c6>
 80040a6:	230e      	movs	r3, #14
 80040a8:	18fb      	adds	r3, r7, r3
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	227f      	movs	r2, #127	; 0x7f
 80040ae:	4013      	ands	r3, r2
 80040b0:	3301      	adds	r3, #1
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	18d3      	adds	r3, r2, r3
 80040b8:	3304      	adds	r3, #4
 80040ba:	e009      	b.n	80040d0 <USBD_StdEPReq+0x1da>
                                         &pdev->ep_out[ep_addr & 0x7F];
 80040bc:	230e      	movs	r3, #14
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	227f      	movs	r2, #127	; 0x7f
 80040c4:	4013      	ands	r3, r2
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80040c6:	3310      	adds	r3, #16
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	18d3      	adds	r3, r2, r3
 80040ce:	3304      	adds	r3, #4
 80040d0:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80040d2:	230e      	movs	r3, #14
 80040d4:	18fb      	adds	r3, r7, r3
 80040d6:	781a      	ldrb	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	0011      	movs	r1, r2
 80040dc:	0018      	movs	r0, r3
 80040de:	f001 f9a0 	bl	8005422 <USBD_LL_IsStallEP>
 80040e2:	1e03      	subs	r3, r0, #0
 80040e4:	d003      	beq.n	80040ee <USBD_StdEPReq+0x1f8>
        pep->status = 0x0001;     
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	2201      	movs	r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	e002      	b.n	80040f4 <USBD_StdEPReq+0x1fe>
        pep->status = 0x0000;  
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 80040f4:	68b9      	ldr	r1, [r7, #8]
      USBD_CtlSendData (pdev,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2202      	movs	r2, #2
 80040fa:	0018      	movs	r0, r3
 80040fc:	f000 fb76 	bl	80047ec <USBD_CtlSendData>
      break;
 8004100:	e007      	b.n	8004112 <USBD_StdEPReq+0x21c>
      USBD_CtlError(pdev , req);
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	0011      	movs	r1, r2
 8004108:	0018      	movs	r0, r3
 800410a:	f000 faef 	bl	80046ec <USBD_CtlError>
      break;
 800410e:	e000      	b.n	8004112 <USBD_StdEPReq+0x21c>
      break;	
 8004110:	46c0      	nop			; (mov r8, r8)
    break;
 8004112:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 8004114:	230f      	movs	r3, #15
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	781b      	ldrb	r3, [r3, #0]
}
 800411a:	0018      	movs	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	b004      	add	sp, #16
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	885b      	ldrh	r3, [r3, #2]
 8004132:	0a1b      	lsrs	r3, r3, #8
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b07      	cmp	r3, #7
 8004138:	d900      	bls.n	800413c <USBD_GetDescriptor+0x18>
 800413a:	e0ce      	b.n	80042da <USBD_GetDescriptor+0x1b6>
 800413c:	009a      	lsls	r2, r3, #2
 800413e:	4b7c      	ldr	r3, [pc, #496]	; (8004330 <USBD_GetDescriptor+0x20c>)
 8004140:	18d3      	adds	r3, r2, r3
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	2384      	movs	r3, #132	; 0x84
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	58d3      	ldr	r3, [r2, r3]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	7c12      	ldrb	r2, [r2, #16]
 8004154:	210a      	movs	r1, #10
 8004156:	1879      	adds	r1, r7, r1
 8004158:	0010      	movs	r0, r2
 800415a:	4798      	blx	r3
 800415c:	0003      	movs	r3, r0
 800415e:	60fb      	str	r3, [r7, #12]
    break;
 8004160:	e0c2      	b.n	80042e8 <USBD_GetDescriptor+0x1c4>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	7c1b      	ldrb	r3, [r3, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10f      	bne.n	800418a <USBD_GetDescriptor+0x66>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	2385      	movs	r3, #133	; 0x85
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	58d3      	ldr	r3, [r2, r3]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	220a      	movs	r2, #10
 8004176:	18ba      	adds	r2, r7, r2
 8004178:	0010      	movs	r0, r2
 800417a:	4798      	blx	r3
 800417c:	0003      	movs	r3, r0
 800417e:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	3301      	adds	r3, #1
 8004184:	2202      	movs	r2, #2
 8004186:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8004188:	e0ae      	b.n	80042e8 <USBD_GetDescriptor+0x1c4>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	2385      	movs	r3, #133	; 0x85
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	58d3      	ldr	r3, [r2, r3]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	220a      	movs	r2, #10
 8004196:	18ba      	adds	r2, r7, r2
 8004198:	0010      	movs	r0, r2
 800419a:	4798      	blx	r3
 800419c:	0003      	movs	r3, r0
 800419e:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	3301      	adds	r3, #1
 80041a4:	2202      	movs	r2, #2
 80041a6:	701a      	strb	r2, [r3, #0]
    break;
 80041a8:	e09e      	b.n	80042e8 <USBD_GetDescriptor+0x1c4>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	885b      	ldrh	r3, [r3, #2]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b05      	cmp	r3, #5
 80041b2:	d858      	bhi.n	8004266 <USBD_GetDescriptor+0x142>
 80041b4:	009a      	lsls	r2, r3, #2
 80041b6:	4b5f      	ldr	r3, [pc, #380]	; (8004334 <USBD_GetDescriptor+0x210>)
 80041b8:	18d3      	adds	r3, r2, r3
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	2384      	movs	r3, #132	; 0x84
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	58d3      	ldr	r3, [r2, r3]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	7c12      	ldrb	r2, [r2, #16]
 80041cc:	210a      	movs	r1, #10
 80041ce:	1879      	adds	r1, r7, r1
 80041d0:	0010      	movs	r0, r2
 80041d2:	4798      	blx	r3
 80041d4:	0003      	movs	r3, r0
 80041d6:	60fb      	str	r3, [r7, #12]
      break;
 80041d8:	e04c      	b.n	8004274 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	2384      	movs	r3, #132	; 0x84
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	58d3      	ldr	r3, [r2, r3]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	7c12      	ldrb	r2, [r2, #16]
 80041e8:	210a      	movs	r1, #10
 80041ea:	1879      	adds	r1, r7, r1
 80041ec:	0010      	movs	r0, r2
 80041ee:	4798      	blx	r3
 80041f0:	0003      	movs	r3, r0
 80041f2:	60fb      	str	r3, [r7, #12]
      break;
 80041f4:	e03e      	b.n	8004274 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	2384      	movs	r3, #132	; 0x84
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	58d3      	ldr	r3, [r2, r3]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	7c12      	ldrb	r2, [r2, #16]
 8004204:	210a      	movs	r1, #10
 8004206:	1879      	adds	r1, r7, r1
 8004208:	0010      	movs	r0, r2
 800420a:	4798      	blx	r3
 800420c:	0003      	movs	r3, r0
 800420e:	60fb      	str	r3, [r7, #12]
      break;
 8004210:	e030      	b.n	8004274 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	2384      	movs	r3, #132	; 0x84
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	58d3      	ldr	r3, [r2, r3]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	7c12      	ldrb	r2, [r2, #16]
 8004220:	210a      	movs	r1, #10
 8004222:	1879      	adds	r1, r7, r1
 8004224:	0010      	movs	r0, r2
 8004226:	4798      	blx	r3
 8004228:	0003      	movs	r3, r0
 800422a:	60fb      	str	r3, [r7, #12]
      break;
 800422c:	e022      	b.n	8004274 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	2384      	movs	r3, #132	; 0x84
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	58d3      	ldr	r3, [r2, r3]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	7c12      	ldrb	r2, [r2, #16]
 800423c:	210a      	movs	r1, #10
 800423e:	1879      	adds	r1, r7, r1
 8004240:	0010      	movs	r0, r2
 8004242:	4798      	blx	r3
 8004244:	0003      	movs	r3, r0
 8004246:	60fb      	str	r3, [r7, #12]
      break;
 8004248:	e014      	b.n	8004274 <USBD_GetDescriptor+0x150>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	2384      	movs	r3, #132	; 0x84
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	58d3      	ldr	r3, [r2, r3]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	7c12      	ldrb	r2, [r2, #16]
 8004258:	210a      	movs	r1, #10
 800425a:	1879      	adds	r1, r7, r1
 800425c:	0010      	movs	r0, r2
 800425e:	4798      	blx	r3
 8004260:	0003      	movs	r3, r0
 8004262:	60fb      	str	r3, [r7, #12]
      break;
 8004264:	e006      	b.n	8004274 <USBD_GetDescriptor+0x150>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	0011      	movs	r1, r2
 800426c:	0018      	movs	r0, r3
 800426e:	f000 fa3d 	bl	80046ec <USBD_CtlError>
      return;
 8004272:	e059      	b.n	8004328 <USBD_GetDescriptor+0x204>
#endif   
    }
    break;
 8004274:	e038      	b.n	80042e8 <USBD_GetDescriptor+0x1c4>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	7c1b      	ldrb	r3, [r3, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <USBD_GetDescriptor+0x172>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	2385      	movs	r3, #133	; 0x85
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	58d3      	ldr	r3, [r2, r3]
 8004286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004288:	220a      	movs	r2, #10
 800428a:	18ba      	adds	r2, r7, r2
 800428c:	0010      	movs	r0, r2
 800428e:	4798      	blx	r3
 8004290:	0003      	movs	r3, r0
 8004292:	60fb      	str	r3, [r7, #12]
      break;
 8004294:	e028      	b.n	80042e8 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	0011      	movs	r1, r2
 800429c:	0018      	movs	r0, r3
 800429e:	f000 fa25 	bl	80046ec <USBD_CtlError>
      return;
 80042a2:	e041      	b.n	8004328 <USBD_GetDescriptor+0x204>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	7c1b      	ldrb	r3, [r3, #16]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10f      	bne.n	80042cc <USBD_GetDescriptor+0x1a8>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	2385      	movs	r3, #133	; 0x85
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	58d3      	ldr	r3, [r2, r3]
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	220a      	movs	r2, #10
 80042b8:	18ba      	adds	r2, r7, r2
 80042ba:	0010      	movs	r0, r2
 80042bc:	4798      	blx	r3
 80042be:	0003      	movs	r3, r0
 80042c0:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3301      	adds	r3, #1
 80042c6:	2207      	movs	r2, #7
 80042c8:	701a      	strb	r2, [r3, #0]
      break; 
 80042ca:	e00d      	b.n	80042e8 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	0011      	movs	r1, r2
 80042d2:	0018      	movs	r0, r3
 80042d4:	f000 fa0a 	bl	80046ec <USBD_CtlError>
      return;
 80042d8:	e026      	b.n	8004328 <USBD_GetDescriptor+0x204>
    }

  default: 
     USBD_CtlError(pdev , req);
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	0011      	movs	r1, r2
 80042e0:	0018      	movs	r0, r3
 80042e2:	f000 fa03 	bl	80046ec <USBD_CtlError>
    return;
 80042e6:	e01f      	b.n	8004328 <USBD_GetDescriptor+0x204>
  }
  
  if((len != 0)&& (req->wLength != 0))
 80042e8:	230a      	movs	r3, #10
 80042ea:	18fb      	adds	r3, r7, r3
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d01a      	beq.n	8004328 <USBD_GetDescriptor+0x204>
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	88db      	ldrh	r3, [r3, #6]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d016      	beq.n	8004328 <USBD_GetDescriptor+0x204>
  {
    
    len = MIN(len , req->wLength);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	88da      	ldrh	r2, [r3, #6]
 80042fe:	230a      	movs	r3, #10
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	1c18      	adds	r0, r3, #0
 8004306:	1c11      	adds	r1, r2, #0
 8004308:	b28a      	uxth	r2, r1
 800430a:	b283      	uxth	r3, r0
 800430c:	429a      	cmp	r2, r3
 800430e:	d900      	bls.n	8004312 <USBD_GetDescriptor+0x1ee>
 8004310:	1c01      	adds	r1, r0, #0
 8004312:	b28a      	uxth	r2, r1
 8004314:	210a      	movs	r1, #10
 8004316:	187b      	adds	r3, r7, r1
 8004318:	801a      	strh	r2, [r3, #0]
    
    USBD_CtlSendData (pdev, 
 800431a:	187b      	adds	r3, r7, r1
 800431c:	881a      	ldrh	r2, [r3, #0]
 800431e:	68f9      	ldr	r1, [r7, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	0018      	movs	r0, r3
 8004324:	f000 fa62 	bl	80047ec <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8004328:	46bd      	mov	sp, r7
 800432a:	b004      	add	sp, #16
 800432c:	bd80      	pop	{r7, pc}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	08005a08 	.word	0x08005a08
 8004334:	08005a28 	.word	0x08005a28

08004338 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004338:	b590      	push	{r4, r7, lr}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	889b      	ldrh	r3, [r3, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d13a      	bne.n	80043c0 <USBD_SetAddress+0x88>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	88db      	ldrh	r3, [r3, #6]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d136      	bne.n	80043c0 <USBD_SetAddress+0x88>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	885b      	ldrh	r3, [r3, #2]
 8004356:	b2da      	uxtb	r2, r3
 8004358:	230f      	movs	r3, #15
 800435a:	18fb      	adds	r3, r7, r3
 800435c:	217f      	movs	r1, #127	; 0x7f
 800435e:	400a      	ands	r2, r1
 8004360:	701a      	strb	r2, [r3, #0]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	23fe      	movs	r3, #254	; 0xfe
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	5cd3      	ldrb	r3, [r2, r3]
 800436a:	2b03      	cmp	r3, #3
 800436c:	d106      	bne.n	800437c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev , req);
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	0011      	movs	r1, r2
 8004374:	0018      	movs	r0, r3
 8004376:	f000 f9b9 	bl	80046ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800437a:	e027      	b.n	80043cc <USBD_SetAddress+0x94>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	240f      	movs	r4, #15
 8004380:	1939      	adds	r1, r7, r4
 8004382:	23ff      	movs	r3, #255	; 0xff
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	7809      	ldrb	r1, [r1, #0]
 8004388:	54d1      	strb	r1, [r2, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800438a:	193b      	adds	r3, r7, r4
 800438c:	781a      	ldrb	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	0011      	movs	r1, r2
 8004392:	0018      	movs	r0, r3
 8004394:	f001 f876 	bl	8005484 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	0018      	movs	r0, r3
 800439c:	f000 fa6c 	bl	8004878 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80043a0:	193b      	adds	r3, r7, r4
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d005      	beq.n	80043b4 <USBD_SetAddress+0x7c>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	23fe      	movs	r3, #254	; 0xfe
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	2102      	movs	r1, #2
 80043b0:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80043b2:	e00b      	b.n	80043cc <USBD_SetAddress+0x94>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	23fe      	movs	r3, #254	; 0xfe
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	2101      	movs	r1, #1
 80043bc:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80043be:	e005      	b.n	80043cc <USBD_SetAddress+0x94>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	0011      	movs	r1, r2
 80043c6:	0018      	movs	r0, r3
 80043c8:	f000 f990 	bl	80046ec <USBD_CtlError>
  } 
}
 80043cc:	46c0      	nop			; (mov r8, r8)
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b005      	add	sp, #20
 80043d2:	bd90      	pop	{r4, r7, pc}

080043d4 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	885b      	ldrh	r3, [r3, #2]
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	4b48      	ldr	r3, [pc, #288]	; (8004508 <USBD_SetConfig+0x134>)
 80043e6:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80043e8:	4b47      	ldr	r3, [pc, #284]	; (8004508 <USBD_SetConfig+0x134>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d906      	bls.n	80043fe <USBD_SetConfig+0x2a>
  {            
     USBD_CtlError(pdev , req);                              
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	0011      	movs	r1, r2
 80043f6:	0018      	movs	r0, r3
 80043f8:	f000 f978 	bl	80046ec <USBD_CtlError>
 80043fc:	e081      	b.n	8004502 <USBD_SetConfig+0x12e>
  } 
  else 
  {
    switch (pdev->dev_state) 
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	23fe      	movs	r3, #254	; 0xfe
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	5cd3      	ldrb	r3, [r2, r3]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d002      	beq.n	8004410 <USBD_SetConfig+0x3c>
 800440a:	2b03      	cmp	r3, #3
 800440c:	d029      	beq.n	8004462 <USBD_SetConfig+0x8e>
 800440e:	e071      	b.n	80044f4 <USBD_SetConfig+0x120>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8004410:	4b3d      	ldr	r3, [pc, #244]	; (8004508 <USBD_SetConfig+0x134>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d01f      	beq.n	8004458 <USBD_SetConfig+0x84>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8004418:	4b3b      	ldr	r3, [pc, #236]	; (8004508 <USBD_SetConfig+0x134>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	001a      	movs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	23fe      	movs	r3, #254	; 0xfe
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	2103      	movs	r1, #3
 800442a:	54d1      	strb	r1, [r2, r3]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800442c:	4b36      	ldr	r3, [pc, #216]	; (8004508 <USBD_SetConfig+0x134>)
 800442e:	781a      	ldrb	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	0011      	movs	r1, r2
 8004434:	0018      	movs	r0, r3
 8004436:	f7ff fa9d 	bl	8003974 <USBD_SetClassConfig>
 800443a:	0003      	movs	r3, r0
 800443c:	2b02      	cmp	r3, #2
 800443e:	d106      	bne.n	800444e <USBD_SetConfig+0x7a>
        {
          USBD_CtlError(pdev , req);  
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	0011      	movs	r1, r2
 8004446:	0018      	movs	r0, r3
 8004448:	f000 f950 	bl	80046ec <USBD_CtlError>
          return;
 800444c:	e059      	b.n	8004502 <USBD_SetConfig+0x12e>
        }
        USBD_CtlSendStatus(pdev);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	0018      	movs	r0, r3
 8004452:	f000 fa11 	bl	8004878 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8004456:	e054      	b.n	8004502 <USBD_SetConfig+0x12e>
         USBD_CtlSendStatus(pdev);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	0018      	movs	r0, r3
 800445c:	f000 fa0c 	bl	8004878 <USBD_CtlSendStatus>
      break;
 8004460:	e04f      	b.n	8004502 <USBD_SetConfig+0x12e>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8004462:	4b29      	ldr	r3, [pc, #164]	; (8004508 <USBD_SetConfig+0x134>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d115      	bne.n	8004496 <USBD_SetConfig+0xc2>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	23fe      	movs	r3, #254	; 0xfe
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	2102      	movs	r1, #2
 8004472:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;          
 8004474:	4b24      	ldr	r3, [pc, #144]	; (8004508 <USBD_SetConfig+0x134>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	001a      	movs	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800447e:	4b22      	ldr	r3, [pc, #136]	; (8004508 <USBD_SetConfig+0x134>)
 8004480:	781a      	ldrb	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	0011      	movs	r1, r2
 8004486:	0018      	movs	r0, r3
 8004488:	f7ff fa9c 	bl	80039c4 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	0018      	movs	r0, r3
 8004490:	f000 f9f2 	bl	8004878 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8004494:	e035      	b.n	8004502 <USBD_SetConfig+0x12e>
      else  if (cfgidx != pdev->dev_config) 
 8004496:	4b1c      	ldr	r3, [pc, #112]	; (8004508 <USBD_SetConfig+0x134>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	001a      	movs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d022      	beq.n	80044ea <USBD_SetConfig+0x116>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	0011      	movs	r1, r2
 80044ae:	0018      	movs	r0, r3
 80044b0:	f7ff fa88 	bl	80039c4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80044b4:	4b14      	ldr	r3, [pc, #80]	; (8004508 <USBD_SetConfig+0x134>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	001a      	movs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80044be:	4b12      	ldr	r3, [pc, #72]	; (8004508 <USBD_SetConfig+0x134>)
 80044c0:	781a      	ldrb	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	0011      	movs	r1, r2
 80044c6:	0018      	movs	r0, r3
 80044c8:	f7ff fa54 	bl	8003974 <USBD_SetClassConfig>
 80044cc:	0003      	movs	r3, r0
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d106      	bne.n	80044e0 <USBD_SetConfig+0x10c>
          USBD_CtlError(pdev , req);  
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	0011      	movs	r1, r2
 80044d8:	0018      	movs	r0, r3
 80044da:	f000 f907 	bl	80046ec <USBD_CtlError>
          return;
 80044de:	e010      	b.n	8004502 <USBD_SetConfig+0x12e>
        USBD_CtlSendStatus(pdev);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	0018      	movs	r0, r3
 80044e4:	f000 f9c8 	bl	8004878 <USBD_CtlSendStatus>
      break;
 80044e8:	e00b      	b.n	8004502 <USBD_SetConfig+0x12e>
        USBD_CtlSendStatus(pdev);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f000 f9c3 	bl	8004878 <USBD_CtlSendStatus>
      break;
 80044f2:	e006      	b.n	8004502 <USBD_SetConfig+0x12e>
      
    default:					
       USBD_CtlError(pdev , req);                     
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	0011      	movs	r1, r2
 80044fa:	0018      	movs	r0, r3
 80044fc:	f000 f8f6 	bl	80046ec <USBD_CtlError>
      break;
 8004500:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8004502:	46bd      	mov	sp, r7
 8004504:	b002      	add	sp, #8
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000128 	.word	0x20000128

0800450c <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	88db      	ldrh	r3, [r3, #6]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d006      	beq.n	800452c <USBD_GetConfig+0x20>
  {                   
     USBD_CtlError(pdev , req);
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	0011      	movs	r1, r2
 8004524:	0018      	movs	r0, r3
 8004526:	f000 f8e1 	bl	80046ec <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800452a:	e023      	b.n	8004574 <USBD_GetConfig+0x68>
    switch (pdev->dev_state )  
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	23fe      	movs	r3, #254	; 0xfe
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	5cd3      	ldrb	r3, [r2, r3]
 8004534:	2b02      	cmp	r3, #2
 8004536:	d002      	beq.n	800453e <USBD_GetConfig+0x32>
 8004538:	2b03      	cmp	r3, #3
 800453a:	d00c      	beq.n	8004556 <USBD_GetConfig+0x4a>
 800453c:	e013      	b.n	8004566 <USBD_GetConfig+0x5a>
      pdev->dev_default_config = 0;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3308      	adds	r3, #8
 8004548:	0019      	movs	r1, r3
      USBD_CtlSendData (pdev, 
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	0018      	movs	r0, r3
 8004550:	f000 f94c 	bl	80047ec <USBD_CtlSendData>
      break;
 8004554:	e00e      	b.n	8004574 <USBD_GetConfig+0x68>
                        (uint8_t *)&pdev->dev_config,
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	1d19      	adds	r1, r3, #4
      USBD_CtlSendData (pdev, 
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	0018      	movs	r0, r3
 8004560:	f000 f944 	bl	80047ec <USBD_CtlSendData>
      break;
 8004564:	e006      	b.n	8004574 <USBD_GetConfig+0x68>
       USBD_CtlError(pdev , req);
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	0011      	movs	r1, r2
 800456c:	0018      	movs	r0, r3
 800456e:	f000 f8bd 	bl	80046ec <USBD_CtlError>
      break;
 8004572:	46c0      	nop			; (mov r8, r8)
}
 8004574:	46c0      	nop			; (mov r8, r8)
 8004576:	46bd      	mov	sp, r7
 8004578:	b002      	add	sp, #8
 800457a:	bd80      	pop	{r7, pc}

0800457c <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	23fe      	movs	r3, #254	; 0xfe
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	5cd3      	ldrb	r3, [r2, r3]
 800458e:	3b02      	subs	r3, #2
 8004590:	2b01      	cmp	r3, #1
 8004592:	d817      	bhi.n	80045c4 <USBD_GetStatus+0x48>
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
#else
    pdev->dev_config_status = 0;                                   
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	60da      	str	r2, [r3, #12]
#endif
                      
    if (pdev->dev_remote_wakeup) 
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	2381      	movs	r3, #129	; 0x81
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	58d3      	ldr	r3, [r2, r3]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d005      	beq.n	80045b2 <USBD_GetStatus+0x36>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	2202      	movs	r2, #2
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	330c      	adds	r3, #12
 80045b6:	0019      	movs	r1, r3
    USBD_CtlSendData (pdev, 
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	0018      	movs	r0, r3
 80045be:	f000 f915 	bl	80047ec <USBD_CtlSendData>
                      2);
    break;
 80045c2:	e006      	b.n	80045d2 <USBD_GetStatus+0x56>
    
  default :
    USBD_CtlError(pdev , req);                        
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	0011      	movs	r1, r2
 80045ca:	0018      	movs	r0, r3
 80045cc:	f000 f88e 	bl	80046ec <USBD_CtlError>
    break;
 80045d0:	46c0      	nop			; (mov r8, r8)
  }
}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	46bd      	mov	sp, r7
 80045d6:	b002      	add	sp, #8
 80045d8:	bd80      	pop	{r7, pc}

080045da <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	885b      	ldrh	r3, [r3, #2]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d111      	bne.n	8004610 <USBD_SetFeature+0x36>
  {
    pdev->dev_remote_wakeup = 1;  
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	2381      	movs	r3, #129	; 0x81
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	2101      	movs	r1, #1
 80045f4:	50d1      	str	r1, [r2, r3]
    pdev->pClass->Setup (pdev, req);   
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	2385      	movs	r3, #133	; 0x85
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	58d3      	ldr	r3, [r2, r3]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	6839      	ldr	r1, [r7, #0]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	0010      	movs	r0, r2
 8004606:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	0018      	movs	r0, r3
 800460c:	f000 f934 	bl	8004878 <USBD_CtlSendStatus>
  }

}
 8004610:	46c0      	nop			; (mov r8, r8)
 8004612:	46bd      	mov	sp, r7
 8004614:	b002      	add	sp, #8
 8004616:	bd80      	pop	{r7, pc}

08004618 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	23fe      	movs	r3, #254	; 0xfe
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	5cd3      	ldrb	r3, [r2, r3]
 800462a:	3b02      	subs	r3, #2
 800462c:	2b01      	cmp	r3, #1
 800462e:	d816      	bhi.n	800465e <USBD_ClrFeature+0x46>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	885b      	ldrh	r3, [r3, #2]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d119      	bne.n	800466c <USBD_ClrFeature+0x54>
    {
      pdev->dev_remote_wakeup = 0; 
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	2381      	movs	r3, #129	; 0x81
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	2100      	movs	r1, #0
 8004640:	50d1      	str	r1, [r2, r3]
      pdev->pClass->Setup (pdev, req);   
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	2385      	movs	r3, #133	; 0x85
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	58d3      	ldr	r3, [r2, r3]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	6839      	ldr	r1, [r7, #0]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	0010      	movs	r0, r2
 8004652:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	0018      	movs	r0, r3
 8004658:	f000 f90e 	bl	8004878 <USBD_CtlSendStatus>
    }
    break;
 800465c:	e006      	b.n	800466c <USBD_ClrFeature+0x54>
    
  default :
     USBD_CtlError(pdev , req);
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	0011      	movs	r1, r2
 8004664:	0018      	movs	r0, r3
 8004666:	f000 f841 	bl	80046ec <USBD_CtlError>
    break;
 800466a:	e000      	b.n	800466e <USBD_ClrFeature+0x56>
    break;
 800466c:	46c0      	nop			; (mov r8, r8)
  }
}
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	46bd      	mov	sp, r7
 8004672:	b002      	add	sp, #8
 8004674:	bd80      	pop	{r7, pc}

08004676 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781a      	ldrb	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	785a      	ldrb	r2, [r3, #1]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	3302      	adds	r3, #2
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	b29a      	uxth	r2, r3
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	3303      	adds	r3, #3
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	18d3      	adds	r3, r2, r3
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	3304      	adds	r3, #4
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	3305      	adds	r3, #5
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	021b      	lsls	r3, r3, #8
 80046be:	b29b      	uxth	r3, r3
 80046c0:	18d3      	adds	r3, r2, r3
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	3306      	adds	r3, #6
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	3307      	adds	r3, #7
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	021b      	lsls	r3, r3, #8
 80046da:	b29b      	uxth	r3, r3
 80046dc:	18d3      	adds	r3, r2, r3
 80046de:	b29a      	uxth	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	80da      	strh	r2, [r3, #6]

}
 80046e4:	46c0      	nop			; (mov r8, r8)
 80046e6:	46bd      	mov	sp, r7
 80046e8:	b002      	add	sp, #8
 80046ea:	bd80      	pop	{r7, pc}

080046ec <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2180      	movs	r1, #128	; 0x80
 80046fa:	0018      	movs	r0, r3
 80046fc:	f000 fe39 	bl	8005372 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2100      	movs	r1, #0
 8004704:	0018      	movs	r0, r3
 8004706:	f000 fe34 	bl	8005372 <USBD_LL_StallEP>
}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	46bd      	mov	sp, r7
 800470e:	b002      	add	sp, #8
 8004710:	bd80      	pop	{r7, pc}

08004712 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004712:	b590      	push	{r4, r7, lr}
 8004714:	b087      	sub	sp, #28
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800471e:	2317      	movs	r3, #23
 8004720:	18fb      	adds	r3, r7, r3
 8004722:	2200      	movs	r2, #0
 8004724:	701a      	strb	r2, [r3, #0]
  
  if (desc != NULL) 
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d03e      	beq.n	80047aa <USBD_GetString+0x98>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	0018      	movs	r0, r3
 8004730:	f000 f83f 	bl	80047b2 <USBD_GetLen>
 8004734:	0003      	movs	r3, r0
 8004736:	3301      	adds	r3, #1
 8004738:	b29b      	uxth	r3, r3
 800473a:	18db      	adds	r3, r3, r3
 800473c:	b29a      	uxth	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	8819      	ldrh	r1, [r3, #0]
 8004746:	2417      	movs	r4, #23
 8004748:	193b      	adds	r3, r7, r4
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	193a      	adds	r2, r7, r4
 800474e:	1c58      	adds	r0, r3, #1
 8004750:	7010      	strb	r0, [r2, #0]
 8004752:	001a      	movs	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	189b      	adds	r3, r3, r2
 8004758:	b2ca      	uxtb	r2, r1
 800475a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800475c:	193b      	adds	r3, r7, r4
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	193a      	adds	r2, r7, r4
 8004762:	1c59      	adds	r1, r3, #1
 8004764:	7011      	strb	r1, [r2, #0]
 8004766:	001a      	movs	r2, r3
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	189b      	adds	r3, r3, r2
 800476c:	2203      	movs	r2, #3
 800476e:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8004770:	e017      	b.n	80047a2 <USBD_GetString+0x90>
    {
      unicode[idx++] = *desc++;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	60fa      	str	r2, [r7, #12]
 8004778:	2417      	movs	r4, #23
 800477a:	193a      	adds	r2, r7, r4
 800477c:	7812      	ldrb	r2, [r2, #0]
 800477e:	1939      	adds	r1, r7, r4
 8004780:	1c50      	adds	r0, r2, #1
 8004782:	7008      	strb	r0, [r1, #0]
 8004784:	0011      	movs	r1, r2
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	1852      	adds	r2, r2, r1
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 800478e:	193b      	adds	r3, r7, r4
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	193a      	adds	r2, r7, r4
 8004794:	1c59      	adds	r1, r3, #1
 8004796:	7011      	strb	r1, [r2, #0]
 8004798:	001a      	movs	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	189b      	adds	r3, r3, r2
 800479e:	2200      	movs	r2, #0
 80047a0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1e3      	bne.n	8004772 <USBD_GetString+0x60>
    }
  } 
}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	46bd      	mov	sp, r7
 80047ae:	b007      	add	sp, #28
 80047b0:	bd90      	pop	{r4, r7, pc}

080047b2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 80047ba:	230f      	movs	r3, #15
 80047bc:	18fb      	adds	r3, r7, r3
 80047be:	2200      	movs	r2, #0
 80047c0:	701a      	strb	r2, [r3, #0]

    while (*buf != '\0') 
 80047c2:	e008      	b.n	80047d6 <USBD_GetLen+0x24>
    {
        len++;
 80047c4:	210f      	movs	r1, #15
 80047c6:	187b      	adds	r3, r7, r1
 80047c8:	781a      	ldrb	r2, [r3, #0]
 80047ca:	187b      	adds	r3, r7, r1
 80047cc:	3201      	adds	r2, #1
 80047ce:	701a      	strb	r2, [r3, #0]
        buf++;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3301      	adds	r3, #1
 80047d4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f2      	bne.n	80047c4 <USBD_GetLen+0x12>
    }

    return len;
 80047de:	230f      	movs	r3, #15
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	781b      	ldrb	r3, [r3, #0]
}
 80047e4:	0018      	movs	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	b004      	add	sp, #16
 80047ea:	bd80      	pop	{r7, pc}

080047ec <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	1dbb      	adds	r3, r7, #6
 80047f8:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	23fa      	movs	r3, #250	; 0xfa
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	2102      	movs	r1, #2
 8004802:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8004804:	1dbb      	adds	r3, r7, #6
 8004806:	881a      	ldrh	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 800480c:	1dbb      	adds	r3, r7, #6
 800480e:	881a      	ldrh	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8004814:	1dbb      	adds	r3, r7, #6
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	2100      	movs	r1, #0
 800481e:	f000 fe5d 	bl	80054dc <USBD_LL_Transmit>
  
  return USBD_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	0018      	movs	r0, r3
 8004826:	46bd      	mov	sp, r7
 8004828:	b004      	add	sp, #16
 800482a:	bd80      	pop	{r7, pc}

0800482c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	1dbb      	adds	r3, r7, #6
 8004838:	801a      	strh	r2, [r3, #0]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800483a:	1dbb      	adds	r3, r7, #6
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	2100      	movs	r1, #0
 8004844:	f000 fe4a 	bl	80054dc <USBD_LL_Transmit>
  
  return USBD_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	0018      	movs	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	b004      	add	sp, #16
 8004850:	bd80      	pop	{r7, pc}

08004852 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b084      	sub	sp, #16
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	1dbb      	adds	r3, r7, #6
 800485e:	801a      	strh	r2, [r3, #0]

  USBD_LL_PrepareReceive (pdev,
 8004860:	1dbb      	adds	r3, r7, #6
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	2100      	movs	r1, #0
 800486a:	f000 fe6f 	bl	800554c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	0018      	movs	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	b004      	add	sp, #16
 8004876:	bd80      	pop	{r7, pc}

08004878 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	23fa      	movs	r3, #250	; 0xfa
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	2104      	movs	r1, #4
 8004888:	50d1      	str	r1, [r2, r3]
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	2300      	movs	r3, #0
 800488e:	2200      	movs	r2, #0
 8004890:	2100      	movs	r1, #0
 8004892:	f000 fe23 	bl	80054dc <USBD_LL_Transmit>
  
  return USBD_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	0018      	movs	r0, r3
 800489a:	46bd      	mov	sp, r7
 800489c:	b002      	add	sp, #8
 800489e:	bd80      	pop	{r7, pc}

080048a0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	23fa      	movs	r3, #250	; 0xfa
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	2105      	movs	r1, #5
 80048b0:	50d1      	str	r1, [r2, r3]
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	2300      	movs	r3, #0
 80048b6:	2200      	movs	r2, #0
 80048b8:	2100      	movs	r1, #0
 80048ba:	f000 fe47 	bl	800554c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	0018      	movs	r0, r3
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b002      	add	sp, #8
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <Keyboard_GPIO_Init>:
		{KEY_ID_PAD_1,			KEY_ID_PAD_2,		KEY_ID_PAD_3,		KEY_ID_PAD_ENTER},	//ROW 3
		{KEY_ID_PAD_0,			KEY_ID_PAD_DOT,		KEY_ID_NOKEY,		KEY_ID_NOKEY}		//ROW 4
};

void Keyboard_GPIO_Init(const keyboard_gpio_config_t *config)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
	keyboardUserGPIOConfig.keyboardDebounceFunction = config->keyboardDebounceFunction;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <Keyboard_GPIO_Init+0x38>)
 80048d6:	609a      	str	r2, [r3, #8]
	keyboardUserGPIOConfig.keyboardGPIOInitFunction = config->keyboardGPIOInitFunction;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	4b08      	ldr	r3, [pc, #32]	; (8004900 <Keyboard_GPIO_Init+0x38>)
 80048de:	601a      	str	r2, [r3, #0]
	keyboardUserGPIOConfig.keyboardGPIOReadFunction = config->keyboardGPIOReadFunction;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	4b06      	ldr	r3, [pc, #24]	; (8004900 <Keyboard_GPIO_Init+0x38>)
 80048e6:	60da      	str	r2, [r3, #12]
	keyboardUserGPIOConfig.keyboardGPIOWriteFunction = config->keyboardGPIOWriteFunction;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	4b04      	ldr	r3, [pc, #16]	; (8004900 <Keyboard_GPIO_Init+0x38>)
 80048ee:	605a      	str	r2, [r3, #4]

	keyboardUserGPIOConfig.keyboardGPIOInitFunction();
 80048f0:	4b03      	ldr	r3, [pc, #12]	; (8004900 <Keyboard_GPIO_Init+0x38>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4798      	blx	r3
}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	46bd      	mov	sp, r7
 80048fa:	b002      	add	sp, #8
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	46c0      	nop			; (mov r8, r8)
 8004900:	20000144 	.word	0x20000144

08004904 <Keyboard_Column_Activate>:

void Keyboard_Column_Activate(const uint8_t column)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	0002      	movs	r2, r0
 800490c:	1dfb      	adds	r3, r7, #7
 800490e:	701a      	strb	r2, [r3, #0]
	keyboardUserGPIOConfig.keyboardGPIOWriteFunction(column, KEYBOARD_COLUMN_ACTIVE);
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <Keyboard_Column_Activate+0x24>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	1dfa      	adds	r2, r7, #7
 8004916:	7812      	ldrb	r2, [r2, #0]
 8004918:	2101      	movs	r1, #1
 800491a:	0010      	movs	r0, r2
 800491c:	4798      	blx	r3
}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	46bd      	mov	sp, r7
 8004922:	b002      	add	sp, #8
 8004924:	bd80      	pop	{r7, pc}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	20000144 	.word	0x20000144

0800492c <Keyboard_Column_Deactivate>:

void Keyboard_Column_Deactivate(const uint8_t column)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	0002      	movs	r2, r0
 8004934:	1dfb      	adds	r3, r7, #7
 8004936:	701a      	strb	r2, [r3, #0]
	keyboardUserGPIOConfig.keyboardGPIOWriteFunction(column, KEYBOARD_COLUMN_NOT_ACTIVE);
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <Keyboard_Column_Deactivate+0x24>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	1dfa      	adds	r2, r7, #7
 800493e:	7812      	ldrb	r2, [r2, #0]
 8004940:	2100      	movs	r1, #0
 8004942:	0010      	movs	r0, r2
 8004944:	4798      	blx	r3
}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	46bd      	mov	sp, r7
 800494a:	b002      	add	sp, #8
 800494c:	bd80      	pop	{r7, pc}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	20000144 	.word	0x20000144

08004954 <Keyboard_Row_Read>:
	keyboardUserGPIOConfig.keyboardDebounceFunction(time);
}


bool Keyboard_Row_Read(const uint8_t row)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	0002      	movs	r2, r0
 800495c:	1dfb      	adds	r3, r7, #7
 800495e:	701a      	strb	r2, [r3, #0]
	return keyboardUserGPIOConfig.keyboardGPIOReadFunction(row);
 8004960:	4b05      	ldr	r3, [pc, #20]	; (8004978 <Keyboard_Row_Read+0x24>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	1dfa      	adds	r2, r7, #7
 8004966:	7812      	ldrb	r2, [r2, #0]
 8004968:	0010      	movs	r0, r2
 800496a:	4798      	blx	r3
 800496c:	0003      	movs	r3, r0
}
 800496e:	0018      	movs	r0, r3
 8004970:	46bd      	mov	sp, r7
 8004972:	b002      	add	sp, #8
 8004974:	bd80      	pop	{r7, pc}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	20000144 	.word	0x20000144

0800497c <Keyboard_Matrix_Read>:

uint8_t Keyboard_Matrix_Read(pressed_keys_array_t *pressedArray)
{
 800497c:	b590      	push	{r4, r7, lr}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
	uint8_t pressedKeysCounter = 0;
 8004984:	230f      	movs	r3, #15
 8004986:	18fb      	adds	r3, r7, r3
 8004988:	2200      	movs	r2, #0
 800498a:	701a      	strb	r2, [r3, #0]
	uint8_t	columnCounter = 0;
 800498c:	230e      	movs	r3, #14
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
	uint8_t rowCounter = 0;
 8004994:	230d      	movs	r3, #13
 8004996:	18fb      	adds	r3, r7, r3
 8004998:	2200      	movs	r2, #0
 800499a:	701a      	strb	r2, [r3, #0]
	uint8_t flushArrayIndex = 0;
 800499c:	210c      	movs	r1, #12
 800499e:	187b      	adds	r3, r7, r1
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]

	for(flushArrayIndex = 0; flushArrayIndex < KEYBOARD_NUMBER_OF_KEYS; flushArrayIndex++)
 80049a4:	187b      	adds	r3, r7, r1
 80049a6:	2200      	movs	r2, #0
 80049a8:	701a      	strb	r2, [r3, #0]
 80049aa:	e00a      	b.n	80049c2 <Keyboard_Matrix_Read+0x46>
	{
		pressedArray->actualArray[flushArrayIndex] = KEY_ID_NOKEY;
 80049ac:	200c      	movs	r0, #12
 80049ae:	183b      	adds	r3, r7, r0
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	2100      	movs	r1, #0
 80049b6:	54d1      	strb	r1, [r2, r3]
	for(flushArrayIndex = 0; flushArrayIndex < KEYBOARD_NUMBER_OF_KEYS; flushArrayIndex++)
 80049b8:	183b      	adds	r3, r7, r0
 80049ba:	781a      	ldrb	r2, [r3, #0]
 80049bc:	183b      	adds	r3, r7, r0
 80049be:	3201      	adds	r2, #1
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	230c      	movs	r3, #12
 80049c4:	18fb      	adds	r3, r7, r3
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b10      	cmp	r3, #16
 80049ca:	d9ef      	bls.n	80049ac <Keyboard_Matrix_Read+0x30>
	}

	for(columnCounter = 0; columnCounter < KEYBOARD_COLUMNS; columnCounter++)
 80049cc:	230e      	movs	r3, #14
 80049ce:	18fb      	adds	r3, r7, r3
 80049d0:	2200      	movs	r2, #0
 80049d2:	701a      	strb	r2, [r3, #0]
 80049d4:	e03e      	b.n	8004a54 <Keyboard_Matrix_Read+0xd8>
	{
		Keyboard_Column_Activate(columnCounter);
 80049d6:	230e      	movs	r3, #14
 80049d8:	18fb      	adds	r3, r7, r3
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	0018      	movs	r0, r3
 80049de:	f7ff ff91 	bl	8004904 <Keyboard_Column_Activate>
		//Keyboard_Debounce(KEYBOARD_DEBOUNCE_MS);
		for(rowCounter = 0; rowCounter < KEYBOARD_ROWS; rowCounter++)
 80049e2:	230d      	movs	r3, #13
 80049e4:	18fb      	adds	r3, r7, r3
 80049e6:	2200      	movs	r2, #0
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	e021      	b.n	8004a30 <Keyboard_Matrix_Read+0xb4>
		{
			if(Keyboard_Row_Read(rowCounter) == true)
 80049ec:	230d      	movs	r3, #13
 80049ee:	18fb      	adds	r3, r7, r3
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	0018      	movs	r0, r3
 80049f4:	f7ff ffae 	bl	8004954 <Keyboard_Row_Read>
 80049f8:	1e03      	subs	r3, r0, #0
 80049fa:	d013      	beq.n	8004a24 <Keyboard_Matrix_Read+0xa8>
			{
				pressedArray->actualArray[pressedKeysCounter] = keyboardIDMap[rowCounter][columnCounter];
 80049fc:	230d      	movs	r3, #13
 80049fe:	18fb      	adds	r3, r7, r3
 8004a00:	7819      	ldrb	r1, [r3, #0]
 8004a02:	230e      	movs	r3, #14
 8004a04:	18fb      	adds	r3, r7, r3
 8004a06:	781a      	ldrb	r2, [r3, #0]
 8004a08:	240f      	movs	r4, #15
 8004a0a:	193b      	adds	r3, r7, r4
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	4817      	ldr	r0, [pc, #92]	; (8004a6c <Keyboard_Matrix_Read+0xf0>)
 8004a10:	0089      	lsls	r1, r1, #2
 8004a12:	1841      	adds	r1, r0, r1
 8004a14:	5c89      	ldrb	r1, [r1, r2]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	54d1      	strb	r1, [r2, r3]
				pressedKeysCounter++;
 8004a1a:	193b      	adds	r3, r7, r4
 8004a1c:	781a      	ldrb	r2, [r3, #0]
 8004a1e:	193b      	adds	r3, r7, r4
 8004a20:	3201      	adds	r2, #1
 8004a22:	701a      	strb	r2, [r3, #0]
		for(rowCounter = 0; rowCounter < KEYBOARD_ROWS; rowCounter++)
 8004a24:	210d      	movs	r1, #13
 8004a26:	187b      	adds	r3, r7, r1
 8004a28:	781a      	ldrb	r2, [r3, #0]
 8004a2a:	187b      	adds	r3, r7, r1
 8004a2c:	3201      	adds	r2, #1
 8004a2e:	701a      	strb	r2, [r3, #0]
 8004a30:	230d      	movs	r3, #13
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d9d8      	bls.n	80049ec <Keyboard_Matrix_Read+0x70>
			}
		}
		Keyboard_Column_Deactivate(columnCounter);
 8004a3a:	210e      	movs	r1, #14
 8004a3c:	000c      	movs	r4, r1
 8004a3e:	187b      	adds	r3, r7, r1
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	0018      	movs	r0, r3
 8004a44:	f7ff ff72 	bl	800492c <Keyboard_Column_Deactivate>
	for(columnCounter = 0; columnCounter < KEYBOARD_COLUMNS; columnCounter++)
 8004a48:	0021      	movs	r1, r4
 8004a4a:	187b      	adds	r3, r7, r1
 8004a4c:	781a      	ldrb	r2, [r3, #0]
 8004a4e:	187b      	adds	r3, r7, r1
 8004a50:	3201      	adds	r2, #1
 8004a52:	701a      	strb	r2, [r3, #0]
 8004a54:	230e      	movs	r3, #14
 8004a56:	18fb      	adds	r3, r7, r3
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d9bb      	bls.n	80049d6 <Keyboard_Matrix_Read+0x5a>
	}

	return pressedKeysCounter;
 8004a5e:	230f      	movs	r3, #15
 8004a60:	18fb      	adds	r3, r7, r3
 8004a62:	781b      	ldrb	r3, [r3, #0]

}
 8004a64:	0018      	movs	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	b005      	add	sp, #20
 8004a6a:	bd90      	pop	{r4, r7, pc}
 8004a6c:	200000a4 	.word	0x200000a4

08004a70 <User_Key_Init>:

/* Private user code ---------------- -----------------------------------------*/
/* USER CODE BEGIN 0 */

void User_Key_Init()
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
	/*
	 * Rows
	 */
	GPIO_InitTypeDef keyGPIOStruct;
	keyGPIOStruct.Mode = GPIO_MODE_INPUT;
 8004a76:	1d3b      	adds	r3, r7, #4
 8004a78:	2200      	movs	r2, #0
 8004a7a:	605a      	str	r2, [r3, #4]
	keyGPIOStruct.Pull = GPIO_PULLDOWN;
 8004a7c:	1d3b      	adds	r3, r7, #4
 8004a7e:	2202      	movs	r2, #2
 8004a80:	609a      	str	r2, [r3, #8]
	keyGPIOStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8004a82:	1d3b      	adds	r3, r7, #4
 8004a84:	22f8      	movs	r2, #248	; 0xf8
 8004a86:	0212      	lsls	r2, r2, #8
 8004a88:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOB, &keyGPIOStruct);
 8004a8a:	1d3b      	adds	r3, r7, #4
 8004a8c:	4a0c      	ldr	r2, [pc, #48]	; (8004ac0 <User_Key_Init+0x50>)
 8004a8e:	0019      	movs	r1, r3
 8004a90:	0010      	movs	r0, r2
 8004a92:	f7fb fd03 	bl	800049c <HAL_GPIO_Init>

	/*
	 * Columns
	 */
	keyGPIOStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a96:	1d3b      	adds	r3, r7, #4
 8004a98:	2201      	movs	r2, #1
 8004a9a:	605a      	str	r2, [r3, #4]
	keyGPIOStruct.Pull = GPIO_NOPULL;
 8004a9c:	1d3b      	adds	r3, r7, #4
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	609a      	str	r2, [r3, #8]
	keyGPIOStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3;
 8004aa2:	1d3b      	adds	r3, r7, #4
 8004aa4:	220f      	movs	r2, #15
 8004aa6:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOA, &keyGPIOStruct);
 8004aa8:	1d3a      	adds	r2, r7, #4
 8004aaa:	2390      	movs	r3, #144	; 0x90
 8004aac:	05db      	lsls	r3, r3, #23
 8004aae:	0011      	movs	r1, r2
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f7fb fcf3 	bl	800049c <HAL_GPIO_Init>

}
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b006      	add	sp, #24
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	48000400 	.word	0x48000400

08004ac4 <User_Key_Debounce>:

void User_Key_Debounce(uint16_t time)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	0002      	movs	r2, r0
 8004acc:	1dbb      	adds	r3, r7, #6
 8004ace:	801a      	strh	r2, [r3, #0]
	HAL_Delay(time);
 8004ad0:	1dbb      	adds	r3, r7, #6
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f7fb fbe9 	bl	80002ac <HAL_Delay>
}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	46bd      	mov	sp, r7
 8004ade:	b002      	add	sp, #8
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <User_Key_Write>:

void User_Key_Write(uint8_t column, bool state)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	0002      	movs	r2, r0
 8004aea:	1dfb      	adds	r3, r7, #7
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	1dbb      	adds	r3, r7, #6
 8004af0:	1c0a      	adds	r2, r1, #0
 8004af2:	701a      	strb	r2, [r3, #0]
	switch(column)
 8004af4:	1dfb      	adds	r3, r7, #7
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d011      	beq.n	8004b20 <User_Key_Write+0x3e>
 8004afc:	dc02      	bgt.n	8004b04 <User_Key_Write+0x22>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d005      	beq.n	8004b0e <User_Key_Write+0x2c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, state);
			break;
		}
		default:
		{
			break;
 8004b02:	e028      	b.n	8004b56 <User_Key_Write+0x74>
	switch(column)
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d014      	beq.n	8004b32 <User_Key_Write+0x50>
 8004b08:	2b03      	cmp	r3, #3
 8004b0a:	d01b      	beq.n	8004b44 <User_Key_Write+0x62>
			break;
 8004b0c:	e023      	b.n	8004b56 <User_Key_Write+0x74>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, state);
 8004b0e:	1dbb      	adds	r3, r7, #6
 8004b10:	781a      	ldrb	r2, [r3, #0]
 8004b12:	2390      	movs	r3, #144	; 0x90
 8004b14:	05db      	lsls	r3, r3, #23
 8004b16:	2101      	movs	r1, #1
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f7fb fe58 	bl	80007ce <HAL_GPIO_WritePin>
			break;
 8004b1e:	e01a      	b.n	8004b56 <User_Key_Write+0x74>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, state);
 8004b20:	1dbb      	adds	r3, r7, #6
 8004b22:	781a      	ldrb	r2, [r3, #0]
 8004b24:	2390      	movs	r3, #144	; 0x90
 8004b26:	05db      	lsls	r3, r3, #23
 8004b28:	2102      	movs	r1, #2
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f7fb fe4f 	bl	80007ce <HAL_GPIO_WritePin>
			break;
 8004b30:	e011      	b.n	8004b56 <User_Key_Write+0x74>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, state);
 8004b32:	1dbb      	adds	r3, r7, #6
 8004b34:	781a      	ldrb	r2, [r3, #0]
 8004b36:	2390      	movs	r3, #144	; 0x90
 8004b38:	05db      	lsls	r3, r3, #23
 8004b3a:	2104      	movs	r1, #4
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f7fb fe46 	bl	80007ce <HAL_GPIO_WritePin>
			break;
 8004b42:	e008      	b.n	8004b56 <User_Key_Write+0x74>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, state);
 8004b44:	1dbb      	adds	r3, r7, #6
 8004b46:	781a      	ldrb	r2, [r3, #0]
 8004b48:	2390      	movs	r3, #144	; 0x90
 8004b4a:	05db      	lsls	r3, r3, #23
 8004b4c:	2108      	movs	r1, #8
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f7fb fe3d 	bl	80007ce <HAL_GPIO_WritePin>
			break;
 8004b54:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	b002      	add	sp, #8
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <User_Key_Read>:

bool User_Key_Read(uint8_t row)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	0002      	movs	r2, r0
 8004b68:	1dfb      	adds	r3, r7, #7
 8004b6a:	701a      	strb	r2, [r3, #0]
	bool state = false;
 8004b6c:	230f      	movs	r3, #15
 8004b6e:	18fb      	adds	r3, r7, r3
 8004b70:	2200      	movs	r2, #0
 8004b72:	701a      	strb	r2, [r3, #0]

	switch(row)
 8004b74:	1dfb      	adds	r3, r7, #7
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d84f      	bhi.n	8004c1c <User_Key_Read+0xbc>
 8004b7c:	009a      	lsls	r2, r3, #2
 8004b7e:	4b2b      	ldr	r3, [pc, #172]	; (8004c2c <User_Key_Read+0xcc>)
 8004b80:	18d3      	adds	r3, r2, r3
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	469f      	mov	pc, r3
	{
		case 0:
		{
			state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8004b86:	2380      	movs	r3, #128	; 0x80
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	4a29      	ldr	r2, [pc, #164]	; (8004c30 <User_Key_Read+0xd0>)
 8004b8c:	0019      	movs	r1, r3
 8004b8e:	0010      	movs	r0, r2
 8004b90:	f7fb fe00 	bl	8000794 <HAL_GPIO_ReadPin>
 8004b94:	0003      	movs	r3, r0
 8004b96:	001a      	movs	r2, r3
 8004b98:	230f      	movs	r3, #15
 8004b9a:	18fb      	adds	r3, r7, r3
 8004b9c:	1e51      	subs	r1, r2, #1
 8004b9e:	418a      	sbcs	r2, r1
 8004ba0:	701a      	strb	r2, [r3, #0]
			break;
 8004ba2:	e03c      	b.n	8004c1e <User_Key_Read+0xbe>
		}
		case 1:
		{
			state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8004ba4:	2380      	movs	r3, #128	; 0x80
 8004ba6:	01db      	lsls	r3, r3, #7
 8004ba8:	4a21      	ldr	r2, [pc, #132]	; (8004c30 <User_Key_Read+0xd0>)
 8004baa:	0019      	movs	r1, r3
 8004bac:	0010      	movs	r0, r2
 8004bae:	f7fb fdf1 	bl	8000794 <HAL_GPIO_ReadPin>
 8004bb2:	0003      	movs	r3, r0
 8004bb4:	001a      	movs	r2, r3
 8004bb6:	230f      	movs	r3, #15
 8004bb8:	18fb      	adds	r3, r7, r3
 8004bba:	1e51      	subs	r1, r2, #1
 8004bbc:	418a      	sbcs	r2, r1
 8004bbe:	701a      	strb	r2, [r3, #0]
			break;
 8004bc0:	e02d      	b.n	8004c1e <User_Key_Read+0xbe>
		}
		case 2:
		{
			state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	019b      	lsls	r3, r3, #6
 8004bc6:	4a1a      	ldr	r2, [pc, #104]	; (8004c30 <User_Key_Read+0xd0>)
 8004bc8:	0019      	movs	r1, r3
 8004bca:	0010      	movs	r0, r2
 8004bcc:	f7fb fde2 	bl	8000794 <HAL_GPIO_ReadPin>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	001a      	movs	r2, r3
 8004bd4:	230f      	movs	r3, #15
 8004bd6:	18fb      	adds	r3, r7, r3
 8004bd8:	1e51      	subs	r1, r2, #1
 8004bda:	418a      	sbcs	r2, r1
 8004bdc:	701a      	strb	r2, [r3, #0]
			break;
 8004bde:	e01e      	b.n	8004c1e <User_Key_Read+0xbe>
		}
		case 3:
		{
			state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8004be0:	2380      	movs	r3, #128	; 0x80
 8004be2:	015b      	lsls	r3, r3, #5
 8004be4:	4a12      	ldr	r2, [pc, #72]	; (8004c30 <User_Key_Read+0xd0>)
 8004be6:	0019      	movs	r1, r3
 8004be8:	0010      	movs	r0, r2
 8004bea:	f7fb fdd3 	bl	8000794 <HAL_GPIO_ReadPin>
 8004bee:	0003      	movs	r3, r0
 8004bf0:	001a      	movs	r2, r3
 8004bf2:	230f      	movs	r3, #15
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	1e51      	subs	r1, r2, #1
 8004bf8:	418a      	sbcs	r2, r1
 8004bfa:	701a      	strb	r2, [r3, #0]
			break;
 8004bfc:	e00f      	b.n	8004c1e <User_Key_Read+0xbe>
		}
		case 4:
		{
			state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8004bfe:	2380      	movs	r3, #128	; 0x80
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	4a0b      	ldr	r2, [pc, #44]	; (8004c30 <User_Key_Read+0xd0>)
 8004c04:	0019      	movs	r1, r3
 8004c06:	0010      	movs	r0, r2
 8004c08:	f7fb fdc4 	bl	8000794 <HAL_GPIO_ReadPin>
 8004c0c:	0003      	movs	r3, r0
 8004c0e:	001a      	movs	r2, r3
 8004c10:	230f      	movs	r3, #15
 8004c12:	18fb      	adds	r3, r7, r3
 8004c14:	1e51      	subs	r1, r2, #1
 8004c16:	418a      	sbcs	r2, r1
 8004c18:	701a      	strb	r2, [r3, #0]
			break;
 8004c1a:	e000      	b.n	8004c1e <User_Key_Read+0xbe>
		}
		default:
		{
			break;
 8004c1c:	46c0      	nop			; (mov r8, r8)
		}
	}

	return state;
 8004c1e:	230f      	movs	r3, #15
 8004c20:	18fb      	adds	r3, r7, r3
 8004c22:	781b      	ldrb	r3, [r3, #0]

}
 8004c24:	0018      	movs	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	b004      	add	sp, #16
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	08005a40 	.word	0x08005a40
 8004c30:	48000400 	.word	0x48000400

08004c34 <Key_HID_Init>:

void Key_HID_Init()
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
	MX_USB_DEVICE_Init();
 8004c38:	f000 f9b2 	bl	8004fa0 <MX_USB_DEVICE_Init>
}
 8004c3c:	46c0      	nop			; (mov r8, r8)
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
	...

08004c44 <Key_HID_Send>:

void Key_HID_Send(uint8_t *report)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
	USBD_HID_SendReport(&hUsbDeviceFS, report, REPORT_SIZE);
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <Key_HID_Send+0x1c>)
 8004c50:	2208      	movs	r2, #8
 8004c52:	0018      	movs	r0, r3
 8004c54:	f7fe fdd2 	bl	80037fc <USBD_HID_SendReport>
}
 8004c58:	46c0      	nop			; (mov r8, r8)
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	b002      	add	sp, #8
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	2000015c 	.word	0x2000015c

08004c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08c      	sub	sp, #48	; 0x30
 8004c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	volatile pressed_keys_array_t keysArray;
	volatile uint8_t pressedKeysNumber = 0;
 8004c6a:	231b      	movs	r3, #27
 8004c6c:	18fb      	adds	r3, r7, r3
 8004c6e:	2200      	movs	r2, #0
 8004c70:	701a      	strb	r2, [r3, #0]
	keyboard_gpio_config_t keyGpioInit;
	uint8_t temporaryReport[REPORT_SIZE] = {0};
 8004c72:	003b      	movs	r3, r7
 8004c74:	0018      	movs	r0, r3
 8004c76:	2308      	movs	r3, #8
 8004c78:	001a      	movs	r2, r3
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	f000 fe6a 	bl	8005954 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004c80:	f7fb face 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004c84:	f000 f848 	bl	8004d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004c88:	f000 f89a 	bl	8004dc0 <MX_GPIO_Init>
  Key_HID_Init();
 8004c8c:	f7ff ffd2 	bl	8004c34 <Key_HID_Init>
  /* USER CODE BEGIN 2 */
  keyGpioInit.keyboardGPIOInitFunction = User_Key_Init;
 8004c90:	2108      	movs	r1, #8
 8004c92:	187b      	adds	r3, r7, r1
 8004c94:	4a1c      	ldr	r2, [pc, #112]	; (8004d08 <main+0xa4>)
 8004c96:	601a      	str	r2, [r3, #0]
  keyGpioInit.keyboardDebounceFunction = User_Key_Debounce;
 8004c98:	187b      	adds	r3, r7, r1
 8004c9a:	4a1c      	ldr	r2, [pc, #112]	; (8004d0c <main+0xa8>)
 8004c9c:	609a      	str	r2, [r3, #8]
  keyGpioInit.keyboardGPIOReadFunction = User_Key_Read;
 8004c9e:	187b      	adds	r3, r7, r1
 8004ca0:	4a1b      	ldr	r2, [pc, #108]	; (8004d10 <main+0xac>)
 8004ca2:	60da      	str	r2, [r3, #12]
  keyGpioInit.keyboardGPIOWriteFunction = User_Key_Write;
 8004ca4:	187b      	adds	r3, r7, r1
 8004ca6:	4a1b      	ldr	r2, [pc, #108]	; (8004d14 <main+0xb0>)
 8004ca8:	605a      	str	r2, [r3, #4]

  Keyboard_GPIO_Init(&keyGpioInit);
 8004caa:	187b      	adds	r3, r7, r1
 8004cac:	0018      	movs	r0, r3
 8004cae:	f7ff fe0b 	bl	80048c8 <Keyboard_GPIO_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  pressedKeysNumber = Keyboard_Matrix_Read(&keysArray);
 8004cb2:	231c      	movs	r3, #28
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f7ff fe60 	bl	800497c <Keyboard_Matrix_Read>
 8004cbc:	0003      	movs	r3, r0
 8004cbe:	001a      	movs	r2, r3
 8004cc0:	231b      	movs	r3, #27
 8004cc2:	18fb      	adds	r3, r7, r3
 8004cc4:	701a      	strb	r2, [r3, #0]
	  for(uint8_t cnt = 0; cnt < REPORT_SIZE; cnt++)
 8004cc6:	232f      	movs	r3, #47	; 0x2f
 8004cc8:	18fb      	adds	r3, r7, r3
 8004cca:	2200      	movs	r2, #0
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	e010      	b.n	8004cf2 <main+0x8e>
	  {
		  temporaryReport[cnt+2] = keysArray.actualArray[cnt];
 8004cd0:	202f      	movs	r0, #47	; 0x2f
 8004cd2:	183b      	adds	r3, r7, r0
 8004cd4:	781a      	ldrb	r2, [r3, #0]
 8004cd6:	183b      	adds	r3, r7, r0
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	3302      	adds	r3, #2
 8004cdc:	211c      	movs	r1, #28
 8004cde:	1879      	adds	r1, r7, r1
 8004ce0:	5c8a      	ldrb	r2, [r1, r2]
 8004ce2:	b2d1      	uxtb	r1, r2
 8004ce4:	003a      	movs	r2, r7
 8004ce6:	54d1      	strb	r1, [r2, r3]
	  for(uint8_t cnt = 0; cnt < REPORT_SIZE; cnt++)
 8004ce8:	183b      	adds	r3, r7, r0
 8004cea:	781a      	ldrb	r2, [r3, #0]
 8004cec:	183b      	adds	r3, r7, r0
 8004cee:	3201      	adds	r2, #1
 8004cf0:	701a      	strb	r2, [r3, #0]
 8004cf2:	232f      	movs	r3, #47	; 0x2f
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b07      	cmp	r3, #7
 8004cfa:	d9e9      	bls.n	8004cd0 <main+0x6c>
	  }
	  Key_HID_Send(temporaryReport);
 8004cfc:	003b      	movs	r3, r7
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f7ff ffa0 	bl	8004c44 <Key_HID_Send>
	  pressedKeysNumber = Keyboard_Matrix_Read(&keysArray);
 8004d04:	e7d5      	b.n	8004cb2 <main+0x4e>
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	08004a71 	.word	0x08004a71
 8004d0c:	08004ac5 	.word	0x08004ac5
 8004d10:	08004b61 	.word	0x08004b61
 8004d14:	08004ae3 	.word	0x08004ae3

08004d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d18:	b590      	push	{r4, r7, lr}
 8004d1a:	b099      	sub	sp, #100	; 0x64
 8004d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d1e:	242c      	movs	r4, #44	; 0x2c
 8004d20:	193b      	adds	r3, r7, r4
 8004d22:	0018      	movs	r0, r3
 8004d24:	2334      	movs	r3, #52	; 0x34
 8004d26:	001a      	movs	r2, r3
 8004d28:	2100      	movs	r1, #0
 8004d2a:	f000 fe13 	bl	8005954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d2e:	231c      	movs	r3, #28
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	0018      	movs	r0, r3
 8004d34:	2310      	movs	r3, #16
 8004d36:	001a      	movs	r2, r3
 8004d38:	2100      	movs	r1, #0
 8004d3a:	f000 fe0b 	bl	8005954 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d3e:	003b      	movs	r3, r7
 8004d40:	0018      	movs	r0, r3
 8004d42:	231c      	movs	r3, #28
 8004d44:	001a      	movs	r2, r3
 8004d46:	2100      	movs	r1, #0
 8004d48:	f000 fe04 	bl	8005954 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8004d4c:	193b      	adds	r3, r7, r4
 8004d4e:	2220      	movs	r2, #32
 8004d50:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004d52:	193b      	adds	r3, r7, r4
 8004d54:	2201      	movs	r2, #1
 8004d56:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004d58:	193b      	adds	r3, r7, r4
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d5e:	193b      	adds	r3, r7, r4
 8004d60:	0018      	movs	r0, r3
 8004d62:	f7fd fe6b 	bl	8002a3c <HAL_RCC_OscConfig>
 8004d66:	1e03      	subs	r3, r0, #0
 8004d68:	d001      	beq.n	8004d6e <SystemClock_Config+0x56>
  {
    Error_Handler();
 8004d6a:	f000 f885 	bl	8004e78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d6e:	211c      	movs	r1, #28
 8004d70:	187b      	adds	r3, r7, r1
 8004d72:	2207      	movs	r2, #7
 8004d74:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8004d76:	187b      	adds	r3, r7, r1
 8004d78:	2203      	movs	r2, #3
 8004d7a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d7c:	187b      	adds	r3, r7, r1
 8004d7e:	2200      	movs	r2, #0
 8004d80:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d82:	187b      	adds	r3, r7, r1
 8004d84:	2200      	movs	r2, #0
 8004d86:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004d88:	187b      	adds	r3, r7, r1
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f7fe f9b5 	bl	80030fc <HAL_RCC_ClockConfig>
 8004d92:	1e03      	subs	r3, r0, #0
 8004d94:	d001      	beq.n	8004d9a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8004d96:	f000 f86f 	bl	8004e78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004d9a:	003b      	movs	r3, r7
 8004d9c:	2280      	movs	r2, #128	; 0x80
 8004d9e:	0292      	lsls	r2, r2, #10
 8004da0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8004da2:	003b      	movs	r3, r7
 8004da4:	2200      	movs	r2, #0
 8004da6:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004da8:	003b      	movs	r3, r7
 8004daa:	0018      	movs	r0, r3
 8004dac:	f7fe fb38 	bl	8003420 <HAL_RCCEx_PeriphCLKConfig>
 8004db0:	1e03      	subs	r3, r0, #0
 8004db2:	d001      	beq.n	8004db8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8004db4:	f000 f860 	bl	8004e78 <Error_Handler>
  }
}
 8004db8:	46c0      	nop			; (mov r8, r8)
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	b019      	add	sp, #100	; 0x64
 8004dbe:	bd90      	pop	{r4, r7, pc}

08004dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004dc0:	b590      	push	{r4, r7, lr}
 8004dc2:	b089      	sub	sp, #36	; 0x24
 8004dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc6:	240c      	movs	r4, #12
 8004dc8:	193b      	adds	r3, r7, r4
 8004dca:	0018      	movs	r0, r3
 8004dcc:	2314      	movs	r3, #20
 8004dce:	001a      	movs	r2, r3
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	f000 fdbf 	bl	8005954 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dd6:	4b26      	ldr	r3, [pc, #152]	; (8004e70 <MX_GPIO_Init+0xb0>)
 8004dd8:	695a      	ldr	r2, [r3, #20]
 8004dda:	4b25      	ldr	r3, [pc, #148]	; (8004e70 <MX_GPIO_Init+0xb0>)
 8004ddc:	2180      	movs	r1, #128	; 0x80
 8004dde:	0289      	lsls	r1, r1, #10
 8004de0:	430a      	orrs	r2, r1
 8004de2:	615a      	str	r2, [r3, #20]
 8004de4:	4b22      	ldr	r3, [pc, #136]	; (8004e70 <MX_GPIO_Init+0xb0>)
 8004de6:	695a      	ldr	r2, [r3, #20]
 8004de8:	2380      	movs	r3, #128	; 0x80
 8004dea:	029b      	lsls	r3, r3, #10
 8004dec:	4013      	ands	r3, r2
 8004dee:	60bb      	str	r3, [r7, #8]
 8004df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004df2:	4b1f      	ldr	r3, [pc, #124]	; (8004e70 <MX_GPIO_Init+0xb0>)
 8004df4:	695a      	ldr	r2, [r3, #20]
 8004df6:	4b1e      	ldr	r3, [pc, #120]	; (8004e70 <MX_GPIO_Init+0xb0>)
 8004df8:	2180      	movs	r1, #128	; 0x80
 8004dfa:	02c9      	lsls	r1, r1, #11
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	615a      	str	r2, [r3, #20]
 8004e00:	4b1b      	ldr	r3, [pc, #108]	; (8004e70 <MX_GPIO_Init+0xb0>)
 8004e02:	695a      	ldr	r2, [r3, #20]
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	02db      	lsls	r3, r3, #11
 8004e08:	4013      	ands	r3, r2
 8004e0a:	607b      	str	r3, [r7, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL0_Pin|COL1_Pin|COL2_Pin|COL3_Pin, GPIO_PIN_RESET);
 8004e0e:	2390      	movs	r3, #144	; 0x90
 8004e10:	05db      	lsls	r3, r3, #23
 8004e12:	2200      	movs	r2, #0
 8004e14:	210f      	movs	r1, #15
 8004e16:	0018      	movs	r0, r3
 8004e18:	f7fb fcd9 	bl	80007ce <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL0_Pin COL1_Pin COL2_Pin COL3_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin|COL3_Pin;
 8004e1c:	0021      	movs	r1, r4
 8004e1e:	187b      	adds	r3, r7, r1
 8004e20:	220f      	movs	r2, #15
 8004e22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e24:	187b      	adds	r3, r7, r1
 8004e26:	2201      	movs	r2, #1
 8004e28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e2a:	187b      	adds	r3, r7, r1
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e30:	187b      	adds	r3, r7, r1
 8004e32:	2200      	movs	r2, #0
 8004e34:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e36:	000c      	movs	r4, r1
 8004e38:	187a      	adds	r2, r7, r1
 8004e3a:	2390      	movs	r3, #144	; 0x90
 8004e3c:	05db      	lsls	r3, r3, #23
 8004e3e:	0011      	movs	r1, r2
 8004e40:	0018      	movs	r0, r3
 8004e42:	f7fb fb2b 	bl	800049c <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW4_Pin ROW3_Pin ROW2_Pin ROW1_Pin 
                           ROW0_Pin */
  GPIO_InitStruct.Pin = ROW4_Pin|ROW3_Pin|ROW2_Pin|ROW1_Pin 
 8004e46:	0021      	movs	r1, r4
 8004e48:	187b      	adds	r3, r7, r1
 8004e4a:	22f8      	movs	r2, #248	; 0xf8
 8004e4c:	0212      	lsls	r2, r2, #8
 8004e4e:	601a      	str	r2, [r3, #0]
                          |ROW0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e50:	187b      	adds	r3, r7, r1
 8004e52:	2200      	movs	r2, #0
 8004e54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004e56:	187b      	adds	r3, r7, r1
 8004e58:	2202      	movs	r2, #2
 8004e5a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e5c:	187b      	adds	r3, r7, r1
 8004e5e:	4a05      	ldr	r2, [pc, #20]	; (8004e74 <MX_GPIO_Init+0xb4>)
 8004e60:	0019      	movs	r1, r3
 8004e62:	0010      	movs	r0, r2
 8004e64:	f7fb fb1a 	bl	800049c <HAL_GPIO_Init>

}
 8004e68:	46c0      	nop			; (mov r8, r8)
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b009      	add	sp, #36	; 0x24
 8004e6e:	bd90      	pop	{r4, r7, pc}
 8004e70:	40021000 	.word	0x40021000
 8004e74:	48000400 	.word	0x48000400

08004e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004e7c:	46c0      	nop			; (mov r8, r8)
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
	...

08004e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e8a:	4b0f      	ldr	r3, [pc, #60]	; (8004ec8 <HAL_MspInit+0x44>)
 8004e8c:	699a      	ldr	r2, [r3, #24]
 8004e8e:	4b0e      	ldr	r3, [pc, #56]	; (8004ec8 <HAL_MspInit+0x44>)
 8004e90:	2101      	movs	r1, #1
 8004e92:	430a      	orrs	r2, r1
 8004e94:	619a      	str	r2, [r3, #24]
 8004e96:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <HAL_MspInit+0x44>)
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	607b      	str	r3, [r7, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ea2:	4b09      	ldr	r3, [pc, #36]	; (8004ec8 <HAL_MspInit+0x44>)
 8004ea4:	69da      	ldr	r2, [r3, #28]
 8004ea6:	4b08      	ldr	r3, [pc, #32]	; (8004ec8 <HAL_MspInit+0x44>)
 8004ea8:	2180      	movs	r1, #128	; 0x80
 8004eaa:	0549      	lsls	r1, r1, #21
 8004eac:	430a      	orrs	r2, r1
 8004eae:	61da      	str	r2, [r3, #28]
 8004eb0:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <HAL_MspInit+0x44>)
 8004eb2:	69da      	ldr	r2, [r3, #28]
 8004eb4:	2380      	movs	r3, #128	; 0x80
 8004eb6:	055b      	lsls	r3, r3, #21
 8004eb8:	4013      	ands	r3, r2
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b002      	add	sp, #8
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	40021000 	.word	0x40021000

08004ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004ed0:	46c0      	nop			; (mov r8, r8)
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004eda:	e7fe      	b.n	8004eda <HardFault_Handler+0x4>

08004edc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004ee0:	46c0      	nop			; (mov r8, r8)
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ef4:	f7fb f9c4 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ef8:	46c0      	nop			; (mov r8, r8)
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004f04:	4b03      	ldr	r3, [pc, #12]	; (8004f14 <USB_IRQHandler+0x14>)
 8004f06:	0018      	movs	r0, r3
 8004f08:	f7fb fd86 	bl	8000a18 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8004f0c:	46c0      	nop			; (mov r8, r8)
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	20000380 	.word	0x20000380

08004f18 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8004f1c:	4b1a      	ldr	r3, [pc, #104]	; (8004f88 <SystemInit+0x70>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	4b19      	ldr	r3, [pc, #100]	; (8004f88 <SystemInit+0x70>)
 8004f22:	2101      	movs	r1, #1
 8004f24:	430a      	orrs	r2, r1
 8004f26:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8004f28:	4b17      	ldr	r3, [pc, #92]	; (8004f88 <SystemInit+0x70>)
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	4b16      	ldr	r3, [pc, #88]	; (8004f88 <SystemInit+0x70>)
 8004f2e:	4917      	ldr	r1, [pc, #92]	; (8004f8c <SystemInit+0x74>)
 8004f30:	400a      	ands	r2, r1
 8004f32:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8004f34:	4b14      	ldr	r3, [pc, #80]	; (8004f88 <SystemInit+0x70>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <SystemInit+0x70>)
 8004f3a:	4915      	ldr	r1, [pc, #84]	; (8004f90 <SystemInit+0x78>)
 8004f3c:	400a      	ands	r2, r1
 8004f3e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004f40:	4b11      	ldr	r3, [pc, #68]	; (8004f88 <SystemInit+0x70>)
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <SystemInit+0x70>)
 8004f46:	4913      	ldr	r1, [pc, #76]	; (8004f94 <SystemInit+0x7c>)
 8004f48:	400a      	ands	r2, r1
 8004f4a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8004f4c:	4b0e      	ldr	r3, [pc, #56]	; (8004f88 <SystemInit+0x70>)
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	4b0d      	ldr	r3, [pc, #52]	; (8004f88 <SystemInit+0x70>)
 8004f52:	4911      	ldr	r1, [pc, #68]	; (8004f98 <SystemInit+0x80>)
 8004f54:	400a      	ands	r2, r1
 8004f56:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004f58:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <SystemInit+0x70>)
 8004f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <SystemInit+0x70>)
 8004f5e:	210f      	movs	r1, #15
 8004f60:	438a      	bics	r2, r1
 8004f62:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8004f64:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <SystemInit+0x70>)
 8004f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f68:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <SystemInit+0x70>)
 8004f6a:	490c      	ldr	r1, [pc, #48]	; (8004f9c <SystemInit+0x84>)
 8004f6c:	400a      	ands	r2, r1
 8004f6e:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8004f70:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <SystemInit+0x70>)
 8004f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <SystemInit+0x70>)
 8004f76:	2101      	movs	r1, #1
 8004f78:	438a      	bics	r2, r1
 8004f7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004f7c:	4b02      	ldr	r3, [pc, #8]	; (8004f88 <SystemInit+0x70>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	609a      	str	r2, [r3, #8]

}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	08ffb80c 	.word	0x08ffb80c
 8004f90:	fef6ffff 	.word	0xfef6ffff
 8004f94:	fffbffff 	.word	0xfffbffff
 8004f98:	ffc0ffff 	.word	0xffc0ffff
 8004f9c:	fffcfe2c 	.word	0xfffcfe2c

08004fa0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004fa4:	490f      	ldr	r1, [pc, #60]	; (8004fe4 <MX_USB_DEVICE_Init+0x44>)
 8004fa6:	4b10      	ldr	r3, [pc, #64]	; (8004fe8 <MX_USB_DEVICE_Init+0x48>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	0018      	movs	r0, r3
 8004fac:	f7fe fc7a 	bl	80038a4 <USBD_Init>
 8004fb0:	1e03      	subs	r3, r0, #0
 8004fb2:	d001      	beq.n	8004fb8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8004fb4:	f7ff ff60 	bl	8004e78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8004fb8:	4a0c      	ldr	r2, [pc, #48]	; (8004fec <MX_USB_DEVICE_Init+0x4c>)
 8004fba:	4b0b      	ldr	r3, [pc, #44]	; (8004fe8 <MX_USB_DEVICE_Init+0x48>)
 8004fbc:	0011      	movs	r1, r2
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f7fe fca1 	bl	8003906 <USBD_RegisterClass>
 8004fc4:	1e03      	subs	r3, r0, #0
 8004fc6:	d001      	beq.n	8004fcc <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8004fc8:	f7ff ff56 	bl	8004e78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004fcc:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <MX_USB_DEVICE_Init+0x48>)
 8004fce:	0018      	movs	r0, r3
 8004fd0:	f7fe fcba 	bl	8003948 <USBD_Start>
 8004fd4:	1e03      	subs	r3, r0, #0
 8004fd6:	d001      	beq.n	8004fdc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8004fd8:	f7ff ff4e 	bl	8004e78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004fdc:	46c0      	nop			; (mov r8, r8)
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	200000bc 	.word	0x200000bc
 8004fe8:	2000015c 	.word	0x2000015c
 8004fec:	20000000 	.word	0x20000000

08004ff0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a0e      	ldr	r2, [pc, #56]	; (8005038 <HAL_PCD_MspInit+0x48>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d115      	bne.n	800502e <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005002:	4b0e      	ldr	r3, [pc, #56]	; (800503c <HAL_PCD_MspInit+0x4c>)
 8005004:	69da      	ldr	r2, [r3, #28]
 8005006:	4b0d      	ldr	r3, [pc, #52]	; (800503c <HAL_PCD_MspInit+0x4c>)
 8005008:	2180      	movs	r1, #128	; 0x80
 800500a:	0409      	lsls	r1, r1, #16
 800500c:	430a      	orrs	r2, r1
 800500e:	61da      	str	r2, [r3, #28]
 8005010:	4b0a      	ldr	r3, [pc, #40]	; (800503c <HAL_PCD_MspInit+0x4c>)
 8005012:	69da      	ldr	r2, [r3, #28]
 8005014:	2380      	movs	r3, #128	; 0x80
 8005016:	041b      	lsls	r3, r3, #16
 8005018:	4013      	ands	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800501e:	2200      	movs	r2, #0
 8005020:	2100      	movs	r1, #0
 8005022:	201f      	movs	r0, #31
 8005024:	f7fb fa08 	bl	8000438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8005028:	201f      	movs	r0, #31
 800502a:	f7fb fa1a 	bl	8000462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800502e:	46c0      	nop			; (mov r8, r8)
 8005030:	46bd      	mov	sp, r7
 8005032:	b004      	add	sp, #16
 8005034:	bd80      	pop	{r7, pc}
 8005036:	46c0      	nop			; (mov r8, r8)
 8005038:	40005c00 	.word	0x40005c00
 800503c:	40021000 	.word	0x40021000

08005040 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	2387      	movs	r3, #135	; 0x87
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	58d2      	ldr	r2, [r2, r3]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	33ed      	adds	r3, #237	; 0xed
 8005054:	33ff      	adds	r3, #255	; 0xff
 8005056:	0019      	movs	r1, r3
 8005058:	0010      	movs	r0, r2
 800505a:	f7fe fcc9 	bl	80039f0 <USBD_LL_SetupStage>
}
 800505e:	46c0      	nop			; (mov r8, r8)
 8005060:	46bd      	mov	sp, r7
 8005062:	b002      	add	sp, #8
 8005064:	bd80      	pop	{r7, pc}

08005066 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005066:	b590      	push	{r4, r7, lr}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	000a      	movs	r2, r1
 8005070:	1cfb      	adds	r3, r7, #3
 8005072:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	2387      	movs	r3, #135	; 0x87
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	58d4      	ldr	r4, [r2, r3]
 800507c:	1cfb      	adds	r3, r7, #3
 800507e:	781a      	ldrb	r2, [r3, #0]
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	238c      	movs	r3, #140	; 0x8c
 8005084:	0059      	lsls	r1, r3, #1
 8005086:	0013      	movs	r3, r2
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	1a9b      	subs	r3, r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	18c3      	adds	r3, r0, r3
 8005090:	185b      	adds	r3, r3, r1
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	1cfb      	adds	r3, r7, #3
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	0019      	movs	r1, r3
 800509a:	0020      	movs	r0, r4
 800509c:	f7fe fd04 	bl	8003aa8 <USBD_LL_DataOutStage>
}
 80050a0:	46c0      	nop			; (mov r8, r8)
 80050a2:	46bd      	mov	sp, r7
 80050a4:	b003      	add	sp, #12
 80050a6:	bd90      	pop	{r4, r7, pc}

080050a8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	000a      	movs	r2, r1
 80050b2:	1cfb      	adds	r3, r7, #3
 80050b4:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	2387      	movs	r3, #135	; 0x87
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	58d0      	ldr	r0, [r2, r3]
 80050be:	1cfb      	adds	r3, r7, #3
 80050c0:	781a      	ldrb	r2, [r3, #0]
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	0013      	movs	r3, r2
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	1a9b      	subs	r3, r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	18cb      	adds	r3, r1, r3
 80050ce:	3338      	adds	r3, #56	; 0x38
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	1cfb      	adds	r3, r7, #3
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	0019      	movs	r1, r3
 80050d8:	f7fe fd4f 	bl	8003b7a <USBD_LL_DataInStage>
}
 80050dc:	46c0      	nop			; (mov r8, r8)
 80050de:	46bd      	mov	sp, r7
 80050e0:	b002      	add	sp, #8
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	2387      	movs	r3, #135	; 0x87
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	58d3      	ldr	r3, [r2, r3]
 80050f4:	0018      	movs	r0, r3
 80050f6:	f7fe fe4d 	bl	8003d94 <USBD_LL_SOF>
}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	46bd      	mov	sp, r7
 80050fe:	b002      	add	sp, #8
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800510a:	230f      	movs	r3, #15
 800510c:	18fb      	adds	r3, r7, r3
 800510e:	2201      	movs	r2, #1
 8005110:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d001      	beq.n	800511e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800511a:	f7ff fead 	bl	8004e78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	2387      	movs	r3, #135	; 0x87
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	58d2      	ldr	r2, [r2, r3]
 8005126:	230f      	movs	r3, #15
 8005128:	18fb      	adds	r3, r7, r3
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	0019      	movs	r1, r3
 800512e:	0010      	movs	r0, r2
 8005130:	f7fe fdf9 	bl	8003d26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	2387      	movs	r3, #135	; 0x87
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	58d3      	ldr	r3, [r2, r3]
 800513c:	0018      	movs	r0, r3
 800513e:	f7fe fdbf 	bl	8003cc0 <USBD_LL_Reset>
}
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	46bd      	mov	sp, r7
 8005146:	b004      	add	sp, #16
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	2387      	movs	r3, #135	; 0x87
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	58d3      	ldr	r3, [r2, r3]
 800515c:	0018      	movs	r0, r3
 800515e:	f7fe fdf2 	bl	8003d46 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d005      	beq.n	8005176 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800516a:	4b05      	ldr	r3, [pc, #20]	; (8005180 <HAL_PCD_SuspendCallback+0x34>)
 800516c:	691a      	ldr	r2, [r3, #16]
 800516e:	4b04      	ldr	r3, [pc, #16]	; (8005180 <HAL_PCD_SuspendCallback+0x34>)
 8005170:	2106      	movs	r1, #6
 8005172:	430a      	orrs	r2, r1
 8005174:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8005176:	46c0      	nop			; (mov r8, r8)
 8005178:	46bd      	mov	sp, r7
 800517a:	b002      	add	sp, #8
 800517c:	bd80      	pop	{r7, pc}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	e000ed00 	.word	0xe000ed00

08005184 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d007      	beq.n	80051a4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005194:	4b09      	ldr	r3, [pc, #36]	; (80051bc <HAL_PCD_ResumeCallback+0x38>)
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	4b08      	ldr	r3, [pc, #32]	; (80051bc <HAL_PCD_ResumeCallback+0x38>)
 800519a:	2106      	movs	r1, #6
 800519c:	438a      	bics	r2, r1
 800519e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80051a0:	f000 fa20 	bl	80055e4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	2387      	movs	r3, #135	; 0x87
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	58d3      	ldr	r3, [r2, r3]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f7fe fde0 	bl	8003d72 <USBD_LL_Resume>
}
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	46bd      	mov	sp, r7
 80051b6:	b002      	add	sp, #8
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	e000ed00 	.word	0xe000ed00

080051c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80051c8:	4a23      	ldr	r2, [pc, #140]	; (8005258 <USBD_LL_Init+0x98>)
 80051ca:	2387      	movs	r3, #135	; 0x87
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	2388      	movs	r3, #136	; 0x88
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	491f      	ldr	r1, [pc, #124]	; (8005258 <USBD_LL_Init+0x98>)
 80051da:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80051dc:	4b1e      	ldr	r3, [pc, #120]	; (8005258 <USBD_LL_Init+0x98>)
 80051de:	4a1f      	ldr	r2, [pc, #124]	; (800525c <USBD_LL_Init+0x9c>)
 80051e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80051e2:	4b1d      	ldr	r3, [pc, #116]	; (8005258 <USBD_LL_Init+0x98>)
 80051e4:	2208      	movs	r2, #8
 80051e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80051e8:	4b1b      	ldr	r3, [pc, #108]	; (8005258 <USBD_LL_Init+0x98>)
 80051ea:	2202      	movs	r2, #2
 80051ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80051ee:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <USBD_LL_Init+0x98>)
 80051f0:	2202      	movs	r2, #2
 80051f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80051f4:	4b18      	ldr	r3, [pc, #96]	; (8005258 <USBD_LL_Init+0x98>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80051fa:	4b17      	ldr	r3, [pc, #92]	; (8005258 <USBD_LL_Init+0x98>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005200:	4b15      	ldr	r3, [pc, #84]	; (8005258 <USBD_LL_Init+0x98>)
 8005202:	2200      	movs	r2, #0
 8005204:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005206:	4b14      	ldr	r3, [pc, #80]	; (8005258 <USBD_LL_Init+0x98>)
 8005208:	0018      	movs	r0, r3
 800520a:	f7fb fafd 	bl	8000808 <HAL_PCD_Init>
 800520e:	1e03      	subs	r3, r0, #0
 8005210:	d001      	beq.n	8005216 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8005212:	f7ff fe31 	bl	8004e78 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	2388      	movs	r3, #136	; 0x88
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	58d0      	ldr	r0, [r2, r3]
 800521e:	2318      	movs	r3, #24
 8005220:	2200      	movs	r2, #0
 8005222:	2100      	movs	r1, #0
 8005224:	f7fd fbbc 	bl	80029a0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	2388      	movs	r3, #136	; 0x88
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	58d0      	ldr	r0, [r2, r3]
 8005230:	2358      	movs	r3, #88	; 0x58
 8005232:	2200      	movs	r2, #0
 8005234:	2180      	movs	r1, #128	; 0x80
 8005236:	f7fd fbb3 	bl	80029a0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	2388      	movs	r3, #136	; 0x88
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	58d0      	ldr	r0, [r2, r3]
 8005242:	2380      	movs	r3, #128	; 0x80
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	2200      	movs	r2, #0
 8005248:	2181      	movs	r1, #129	; 0x81
 800524a:	f7fd fba9 	bl	80029a0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	0018      	movs	r0, r3
 8005252:	46bd      	mov	sp, r7
 8005254:	b002      	add	sp, #8
 8005256:	bd80      	pop	{r7, pc}
 8005258:	20000380 	.word	0x20000380
 800525c:	40005c00 	.word	0x40005c00

08005260 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005268:	210f      	movs	r1, #15
 800526a:	187b      	adds	r3, r7, r1
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005270:	260e      	movs	r6, #14
 8005272:	19bb      	adds	r3, r7, r6
 8005274:	2200      	movs	r2, #0
 8005276:	701a      	strb	r2, [r3, #0]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	2388      	movs	r3, #136	; 0x88
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	58d3      	ldr	r3, [r2, r3]
 8005280:	000d      	movs	r5, r1
 8005282:	187c      	adds	r4, r7, r1
 8005284:	0018      	movs	r0, r3
 8005286:	f7fb fbaf 	bl	80009e8 <HAL_PCD_Start>
 800528a:	0003      	movs	r3, r0
 800528c:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800528e:	19bc      	adds	r4, r7, r6
 8005290:	0029      	movs	r1, r5
 8005292:	187b      	adds	r3, r7, r1
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	0018      	movs	r0, r3
 8005298:	f000 f9ab 	bl	80055f2 <USBD_Get_USB_Status>
 800529c:	0003      	movs	r3, r0
 800529e:	7023      	strb	r3, [r4, #0]
  
  return usb_status;
 80052a0:	19bb      	adds	r3, r7, r6
 80052a2:	781b      	ldrb	r3, [r3, #0]
}
 80052a4:	0018      	movs	r0, r3
 80052a6:	46bd      	mov	sp, r7
 80052a8:	b005      	add	sp, #20
 80052aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052ac <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80052ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	000c      	movs	r4, r1
 80052b6:	0010      	movs	r0, r2
 80052b8:	0019      	movs	r1, r3
 80052ba:	1cfb      	adds	r3, r7, #3
 80052bc:	1c22      	adds	r2, r4, #0
 80052be:	701a      	strb	r2, [r3, #0]
 80052c0:	1cbb      	adds	r3, r7, #2
 80052c2:	1c02      	adds	r2, r0, #0
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	003b      	movs	r3, r7
 80052c8:	1c0a      	adds	r2, r1, #0
 80052ca:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80052cc:	260f      	movs	r6, #15
 80052ce:	19bb      	adds	r3, r7, r6
 80052d0:	2200      	movs	r2, #0
 80052d2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80052d4:	250e      	movs	r5, #14
 80052d6:	197b      	adds	r3, r7, r5
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	2388      	movs	r3, #136	; 0x88
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	58d0      	ldr	r0, [r2, r3]
 80052e4:	19bc      	adds	r4, r7, r6
 80052e6:	1cbb      	adds	r3, r7, #2
 80052e8:	781d      	ldrb	r5, [r3, #0]
 80052ea:	003b      	movs	r3, r7
 80052ec:	881a      	ldrh	r2, [r3, #0]
 80052ee:	1cfb      	adds	r3, r7, #3
 80052f0:	7819      	ldrb	r1, [r3, #0]
 80052f2:	002b      	movs	r3, r5
 80052f4:	f7fb fce6 	bl	8000cc4 <HAL_PCD_EP_Open>
 80052f8:	0003      	movs	r3, r0
 80052fa:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80052fc:	250e      	movs	r5, #14
 80052fe:	197c      	adds	r4, r7, r5
 8005300:	19bb      	adds	r3, r7, r6
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	0018      	movs	r0, r3
 8005306:	f000 f974 	bl	80055f2 <USBD_Get_USB_Status>
 800530a:	0003      	movs	r3, r0
 800530c:	7023      	strb	r3, [r4, #0]
 
  return usb_status;
 800530e:	197b      	adds	r3, r7, r5
 8005310:	781b      	ldrb	r3, [r3, #0]
}
 8005312:	0018      	movs	r0, r3
 8005314:	46bd      	mov	sp, r7
 8005316:	b005      	add	sp, #20
 8005318:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800531a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800531a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	000a      	movs	r2, r1
 8005324:	1cfb      	adds	r3, r7, #3
 8005326:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005328:	210f      	movs	r1, #15
 800532a:	187b      	adds	r3, r7, r1
 800532c:	2200      	movs	r2, #0
 800532e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005330:	260e      	movs	r6, #14
 8005332:	19bb      	adds	r3, r7, r6
 8005334:	2200      	movs	r2, #0
 8005336:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	2388      	movs	r3, #136	; 0x88
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	58d2      	ldr	r2, [r2, r3]
 8005340:	000d      	movs	r5, r1
 8005342:	187c      	adds	r4, r7, r1
 8005344:	1cfb      	adds	r3, r7, #3
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	0019      	movs	r1, r3
 800534a:	0010      	movs	r0, r2
 800534c:	f7fc f856 	bl	80013fc <HAL_PCD_EP_Close>
 8005350:	0003      	movs	r3, r0
 8005352:	7023      	strb	r3, [r4, #0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005354:	19bc      	adds	r4, r7, r6
 8005356:	0029      	movs	r1, r5
 8005358:	187b      	adds	r3, r7, r1
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	0018      	movs	r0, r3
 800535e:	f000 f948 	bl	80055f2 <USBD_Get_USB_Status>
 8005362:	0003      	movs	r3, r0
 8005364:	7023      	strb	r3, [r4, #0]

  return usb_status;  
 8005366:	19bb      	adds	r3, r7, r6
 8005368:	781b      	ldrb	r3, [r3, #0]
}
 800536a:	0018      	movs	r0, r3
 800536c:	46bd      	mov	sp, r7
 800536e:	b005      	add	sp, #20
 8005370:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005372 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005372:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005374:	b085      	sub	sp, #20
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	000a      	movs	r2, r1
 800537c:	1cfb      	adds	r3, r7, #3
 800537e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005380:	210f      	movs	r1, #15
 8005382:	187b      	adds	r3, r7, r1
 8005384:	2200      	movs	r2, #0
 8005386:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005388:	260e      	movs	r6, #14
 800538a:	19bb      	adds	r3, r7, r6
 800538c:	2200      	movs	r2, #0
 800538e:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	2388      	movs	r3, #136	; 0x88
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	58d2      	ldr	r2, [r2, r3]
 8005398:	000d      	movs	r5, r1
 800539a:	187c      	adds	r4, r7, r1
 800539c:	1cfb      	adds	r3, r7, #3
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	0019      	movs	r1, r3
 80053a2:	0010      	movs	r0, r2
 80053a4:	f7fc fd60 	bl	8001e68 <HAL_PCD_EP_SetStall>
 80053a8:	0003      	movs	r3, r0
 80053aa:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80053ac:	19bc      	adds	r4, r7, r6
 80053ae:	0029      	movs	r1, r5
 80053b0:	187b      	adds	r3, r7, r1
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	0018      	movs	r0, r3
 80053b6:	f000 f91c 	bl	80055f2 <USBD_Get_USB_Status>
 80053ba:	0003      	movs	r3, r0
 80053bc:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 80053be:	19bb      	adds	r3, r7, r6
 80053c0:	781b      	ldrb	r3, [r3, #0]
}
 80053c2:	0018      	movs	r0, r3
 80053c4:	46bd      	mov	sp, r7
 80053c6:	b005      	add	sp, #20
 80053c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80053ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053cc:	b085      	sub	sp, #20
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	000a      	movs	r2, r1
 80053d4:	1cfb      	adds	r3, r7, #3
 80053d6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80053d8:	210f      	movs	r1, #15
 80053da:	187b      	adds	r3, r7, r1
 80053dc:	2200      	movs	r2, #0
 80053de:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80053e0:	260e      	movs	r6, #14
 80053e2:	19bb      	adds	r3, r7, r6
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	2388      	movs	r3, #136	; 0x88
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	58d2      	ldr	r2, [r2, r3]
 80053f0:	000d      	movs	r5, r1
 80053f2:	187c      	adds	r4, r7, r1
 80053f4:	1cfb      	adds	r3, r7, #3
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	0019      	movs	r1, r3
 80053fa:	0010      	movs	r0, r2
 80053fc:	f7fc fdea 	bl	8001fd4 <HAL_PCD_EP_ClrStall>
 8005400:	0003      	movs	r3, r0
 8005402:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005404:	19bc      	adds	r4, r7, r6
 8005406:	0029      	movs	r1, r5
 8005408:	187b      	adds	r3, r7, r1
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	0018      	movs	r0, r3
 800540e:	f000 f8f0 	bl	80055f2 <USBD_Get_USB_Status>
 8005412:	0003      	movs	r3, r0
 8005414:	7023      	strb	r3, [r4, #0]

  return usb_status; 
 8005416:	19bb      	adds	r3, r7, r6
 8005418:	781b      	ldrb	r3, [r3, #0]
}
 800541a:	0018      	movs	r0, r3
 800541c:	46bd      	mov	sp, r7
 800541e:	b005      	add	sp, #20
 8005420:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005422 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	000a      	movs	r2, r1
 800542c:	1cfb      	adds	r3, r7, #3
 800542e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	2388      	movs	r3, #136	; 0x88
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	58d3      	ldr	r3, [r2, r3]
 8005438:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800543a:	1cfb      	adds	r3, r7, #3
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	b25b      	sxtb	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	da0d      	bge.n	8005460 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005444:	1cfb      	adds	r3, r7, #3
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	227f      	movs	r2, #127	; 0x7f
 800544a:	401a      	ands	r2, r3
 800544c:	68f9      	ldr	r1, [r7, #12]
 800544e:	202a      	movs	r0, #42	; 0x2a
 8005450:	0013      	movs	r3, r2
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	1a9b      	subs	r3, r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	18cb      	adds	r3, r1, r3
 800545a:	181b      	adds	r3, r3, r0
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	e00d      	b.n	800547c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005460:	1cfb      	adds	r3, r7, #3
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	227f      	movs	r2, #127	; 0x7f
 8005466:	401a      	ands	r2, r3
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	2385      	movs	r3, #133	; 0x85
 800546c:	0059      	lsls	r1, r3, #1
 800546e:	0013      	movs	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	1a9b      	subs	r3, r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	18c3      	adds	r3, r0, r3
 8005478:	185b      	adds	r3, r3, r1
 800547a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800547c:	0018      	movs	r0, r3
 800547e:	46bd      	mov	sp, r7
 8005480:	b004      	add	sp, #16
 8005482:	bd80      	pop	{r7, pc}

08005484 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	000a      	movs	r2, r1
 800548e:	1cfb      	adds	r3, r7, #3
 8005490:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005492:	210f      	movs	r1, #15
 8005494:	187b      	adds	r3, r7, r1
 8005496:	2200      	movs	r2, #0
 8005498:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800549a:	260e      	movs	r6, #14
 800549c:	19bb      	adds	r3, r7, r6
 800549e:	2200      	movs	r2, #0
 80054a0:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	2388      	movs	r3, #136	; 0x88
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	58d2      	ldr	r2, [r2, r3]
 80054aa:	000d      	movs	r5, r1
 80054ac:	187c      	adds	r4, r7, r1
 80054ae:	1cfb      	adds	r3, r7, #3
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	0019      	movs	r1, r3
 80054b4:	0010      	movs	r0, r2
 80054b6:	f7fb fbd7 	bl	8000c68 <HAL_PCD_SetAddress>
 80054ba:	0003      	movs	r3, r0
 80054bc:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80054be:	19bc      	adds	r4, r7, r6
 80054c0:	0029      	movs	r1, r5
 80054c2:	187b      	adds	r3, r7, r1
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	0018      	movs	r0, r3
 80054c8:	f000 f893 	bl	80055f2 <USBD_Get_USB_Status>
 80054cc:	0003      	movs	r3, r0
 80054ce:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 80054d0:	19bb      	adds	r3, r7, r6
 80054d2:	781b      	ldrb	r3, [r3, #0]
}
 80054d4:	0018      	movs	r0, r3
 80054d6:	46bd      	mov	sp, r7
 80054d8:	b005      	add	sp, #20
 80054da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80054dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	0008      	movs	r0, r1
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	0019      	movs	r1, r3
 80054ea:	230b      	movs	r3, #11
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	1c02      	adds	r2, r0, #0
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	2408      	movs	r4, #8
 80054f4:	193b      	adds	r3, r7, r4
 80054f6:	1c0a      	adds	r2, r1, #0
 80054f8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80054fa:	2117      	movs	r1, #23
 80054fc:	187b      	adds	r3, r7, r1
 80054fe:	2200      	movs	r2, #0
 8005500:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005502:	2516      	movs	r5, #22
 8005504:	197b      	adds	r3, r7, r5
 8005506:	2200      	movs	r2, #0
 8005508:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	2388      	movs	r3, #136	; 0x88
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	58d0      	ldr	r0, [r2, r3]
 8005512:	193b      	adds	r3, r7, r4
 8005514:	881d      	ldrh	r5, [r3, #0]
 8005516:	000e      	movs	r6, r1
 8005518:	187c      	adds	r4, r7, r1
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	230b      	movs	r3, #11
 800551e:	18fb      	adds	r3, r7, r3
 8005520:	7819      	ldrb	r1, [r3, #0]
 8005522:	002b      	movs	r3, r5
 8005524:	f7fc fae6 	bl	8001af4 <HAL_PCD_EP_Transmit>
 8005528:	0003      	movs	r3, r0
 800552a:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800552c:	2516      	movs	r5, #22
 800552e:	197c      	adds	r4, r7, r5
 8005530:	0031      	movs	r1, r6
 8005532:	187b      	adds	r3, r7, r1
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	0018      	movs	r0, r3
 8005538:	f000 f85b 	bl	80055f2 <USBD_Get_USB_Status>
 800553c:	0003      	movs	r3, r0
 800553e:	7023      	strb	r3, [r4, #0]
  
  return usb_status;    
 8005540:	197b      	adds	r3, r7, r5
 8005542:	781b      	ldrb	r3, [r3, #0]
}
 8005544:	0018      	movs	r0, r3
 8005546:	46bd      	mov	sp, r7
 8005548:	b007      	add	sp, #28
 800554a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800554c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800554c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	0008      	movs	r0, r1
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	0019      	movs	r1, r3
 800555a:	230b      	movs	r3, #11
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	1c02      	adds	r2, r0, #0
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	2408      	movs	r4, #8
 8005564:	193b      	adds	r3, r7, r4
 8005566:	1c0a      	adds	r2, r1, #0
 8005568:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800556a:	2117      	movs	r1, #23
 800556c:	187b      	adds	r3, r7, r1
 800556e:	2200      	movs	r2, #0
 8005570:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005572:	2516      	movs	r5, #22
 8005574:	197b      	adds	r3, r7, r5
 8005576:	2200      	movs	r2, #0
 8005578:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	2388      	movs	r3, #136	; 0x88
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	58d0      	ldr	r0, [r2, r3]
 8005582:	193b      	adds	r3, r7, r4
 8005584:	881d      	ldrh	r5, [r3, #0]
 8005586:	000e      	movs	r6, r1
 8005588:	187c      	adds	r4, r7, r1
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	230b      	movs	r3, #11
 800558e:	18fb      	adds	r3, r7, r3
 8005590:	7819      	ldrb	r1, [r3, #0]
 8005592:	002b      	movs	r3, r5
 8005594:	f7fc f930 	bl	80017f8 <HAL_PCD_EP_Receive>
 8005598:	0003      	movs	r3, r0
 800559a:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800559c:	2516      	movs	r5, #22
 800559e:	197c      	adds	r4, r7, r5
 80055a0:	0031      	movs	r1, r6
 80055a2:	187b      	adds	r3, r7, r1
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	0018      	movs	r0, r3
 80055a8:	f000 f823 	bl	80055f2 <USBD_Get_USB_Status>
 80055ac:	0003      	movs	r3, r0
 80055ae:	7023      	strb	r3, [r4, #0]
  	
  return usb_status; 
 80055b0:	197b      	adds	r3, r7, r5
 80055b2:	781b      	ldrb	r3, [r3, #0]
}
 80055b4:	0018      	movs	r0, r3
 80055b6:	46bd      	mov	sp, r7
 80055b8:	b007      	add	sp, #28
 80055ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80055c4:	4b02      	ldr	r3, [pc, #8]	; (80055d0 <USBD_static_malloc+0x14>)
}
 80055c6:	0018      	movs	r0, r3
 80055c8:	46bd      	mov	sp, r7
 80055ca:	b002      	add	sp, #8
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	2000012c 	.word	0x2000012c

080055d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]

}
 80055dc:	46c0      	nop			; (mov r8, r8)
 80055de:	46bd      	mov	sp, r7
 80055e0:	b002      	add	sp, #8
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80055e8:	f7ff fb96 	bl	8004d18 <SystemClock_Config>
}
 80055ec:	46c0      	nop			; (mov r8, r8)
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	0002      	movs	r2, r0
 80055fa:	1dfb      	adds	r3, r7, #7
 80055fc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80055fe:	230f      	movs	r3, #15
 8005600:	18fb      	adds	r3, r7, r3
 8005602:	2200      	movs	r2, #0
 8005604:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8005606:	1dfb      	adds	r3, r7, #7
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d00d      	beq.n	800562a <USBD_Get_USB_Status+0x38>
 800560e:	dc02      	bgt.n	8005616 <USBD_Get_USB_Status+0x24>
 8005610:	2b00      	cmp	r3, #0
 8005612:	d005      	beq.n	8005620 <USBD_Get_USB_Status+0x2e>
 8005614:	e018      	b.n	8005648 <USBD_Get_USB_Status+0x56>
 8005616:	2b02      	cmp	r3, #2
 8005618:	d00c      	beq.n	8005634 <USBD_Get_USB_Status+0x42>
 800561a:	2b03      	cmp	r3, #3
 800561c:	d00f      	beq.n	800563e <USBD_Get_USB_Status+0x4c>
 800561e:	e013      	b.n	8005648 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005620:	230f      	movs	r3, #15
 8005622:	18fb      	adds	r3, r7, r3
 8005624:	2200      	movs	r2, #0
 8005626:	701a      	strb	r2, [r3, #0]
    break;
 8005628:	e013      	b.n	8005652 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800562a:	230f      	movs	r3, #15
 800562c:	18fb      	adds	r3, r7, r3
 800562e:	2202      	movs	r2, #2
 8005630:	701a      	strb	r2, [r3, #0]
    break;
 8005632:	e00e      	b.n	8005652 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005634:	230f      	movs	r3, #15
 8005636:	18fb      	adds	r3, r7, r3
 8005638:	2201      	movs	r2, #1
 800563a:	701a      	strb	r2, [r3, #0]
    break;
 800563c:	e009      	b.n	8005652 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800563e:	230f      	movs	r3, #15
 8005640:	18fb      	adds	r3, r7, r3
 8005642:	2202      	movs	r2, #2
 8005644:	701a      	strb	r2, [r3, #0]
    break;
 8005646:	e004      	b.n	8005652 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8005648:	230f      	movs	r3, #15
 800564a:	18fb      	adds	r3, r7, r3
 800564c:	2202      	movs	r2, #2
 800564e:	701a      	strb	r2, [r3, #0]
    break;
 8005650:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8005652:	230f      	movs	r3, #15
 8005654:	18fb      	adds	r3, r7, r3
 8005656:	781b      	ldrb	r3, [r3, #0]
}
 8005658:	0018      	movs	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	b004      	add	sp, #16
 800565e:	bd80      	pop	{r7, pc}

08005660 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	0002      	movs	r2, r0
 8005668:	6039      	str	r1, [r7, #0]
 800566a:	1dfb      	adds	r3, r7, #7
 800566c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2212      	movs	r2, #18
 8005672:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005674:	4b02      	ldr	r3, [pc, #8]	; (8005680 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005676:	0018      	movs	r0, r3
 8005678:	46bd      	mov	sp, r7
 800567a:	b002      	add	sp, #8
 800567c:	bd80      	pop	{r7, pc}
 800567e:	46c0      	nop			; (mov r8, r8)
 8005680:	200000d8 	.word	0x200000d8

08005684 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	0002      	movs	r2, r0
 800568c:	6039      	str	r1, [r7, #0]
 800568e:	1dfb      	adds	r3, r7, #7
 8005690:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2204      	movs	r2, #4
 8005696:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005698:	4b02      	ldr	r3, [pc, #8]	; (80056a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800569a:	0018      	movs	r0, r3
 800569c:	46bd      	mov	sp, r7
 800569e:	b002      	add	sp, #8
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	46c0      	nop			; (mov r8, r8)
 80056a4:	200000ec 	.word	0x200000ec

080056a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	0002      	movs	r2, r0
 80056b0:	6039      	str	r1, [r7, #0]
 80056b2:	1dfb      	adds	r3, r7, #7
 80056b4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80056b6:	1dfb      	adds	r3, r7, #7
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	4908      	ldr	r1, [pc, #32]	; (80056e4 <USBD_FS_ProductStrDescriptor+0x3c>)
 80056c2:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <USBD_FS_ProductStrDescriptor+0x40>)
 80056c4:	0018      	movs	r0, r3
 80056c6:	f7ff f824 	bl	8004712 <USBD_GetString>
 80056ca:	e005      	b.n	80056d8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	4905      	ldr	r1, [pc, #20]	; (80056e4 <USBD_FS_ProductStrDescriptor+0x3c>)
 80056d0:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <USBD_FS_ProductStrDescriptor+0x40>)
 80056d2:	0018      	movs	r0, r3
 80056d4:	f7ff f81d 	bl	8004712 <USBD_GetString>
  }
  return USBD_StrDesc;
 80056d8:	4b02      	ldr	r3, [pc, #8]	; (80056e4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80056da:	0018      	movs	r0, r3
 80056dc:	46bd      	mov	sp, r7
 80056de:	b002      	add	sp, #8
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	200005a0 	.word	0x200005a0
 80056e8:	0800599c 	.word	0x0800599c

080056ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	0002      	movs	r2, r0
 80056f4:	6039      	str	r1, [r7, #0]
 80056f6:	1dfb      	adds	r3, r7, #7
 80056f8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	4904      	ldr	r1, [pc, #16]	; (8005710 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80056fe:	4b05      	ldr	r3, [pc, #20]	; (8005714 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8005700:	0018      	movs	r0, r3
 8005702:	f7ff f806 	bl	8004712 <USBD_GetString>
  return USBD_StrDesc;
 8005706:	4b02      	ldr	r3, [pc, #8]	; (8005710 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8005708:	0018      	movs	r0, r3
 800570a:	46bd      	mov	sp, r7
 800570c:	b002      	add	sp, #8
 800570e:	bd80      	pop	{r7, pc}
 8005710:	200005a0 	.word	0x200005a0
 8005714:	080059b0 	.word	0x080059b0

08005718 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	0002      	movs	r2, r0
 8005720:	6039      	str	r1, [r7, #0]
 8005722:	1dfb      	adds	r3, r7, #7
 8005724:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	221a      	movs	r2, #26
 800572a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800572c:	f000 f84c 	bl	80057c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005730:	4b02      	ldr	r3, [pc, #8]	; (800573c <USBD_FS_SerialStrDescriptor+0x24>)
}
 8005732:	0018      	movs	r0, r3
 8005734:	46bd      	mov	sp, r7
 8005736:	b002      	add	sp, #8
 8005738:	bd80      	pop	{r7, pc}
 800573a:	46c0      	nop			; (mov r8, r8)
 800573c:	200000f0 	.word	0x200000f0

08005740 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	0002      	movs	r2, r0
 8005748:	6039      	str	r1, [r7, #0]
 800574a:	1dfb      	adds	r3, r7, #7
 800574c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800574e:	1dfb      	adds	r3, r7, #7
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d106      	bne.n	8005764 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005756:	683a      	ldr	r2, [r7, #0]
 8005758:	4908      	ldr	r1, [pc, #32]	; (800577c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800575a:	4b09      	ldr	r3, [pc, #36]	; (8005780 <USBD_FS_ConfigStrDescriptor+0x40>)
 800575c:	0018      	movs	r0, r3
 800575e:	f7fe ffd8 	bl	8004712 <USBD_GetString>
 8005762:	e005      	b.n	8005770 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	4905      	ldr	r1, [pc, #20]	; (800577c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8005768:	4b05      	ldr	r3, [pc, #20]	; (8005780 <USBD_FS_ConfigStrDescriptor+0x40>)
 800576a:	0018      	movs	r0, r3
 800576c:	f7fe ffd1 	bl	8004712 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005770:	4b02      	ldr	r3, [pc, #8]	; (800577c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8005772:	0018      	movs	r0, r3
 8005774:	46bd      	mov	sp, r7
 8005776:	b002      	add	sp, #8
 8005778:	bd80      	pop	{r7, pc}
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	200005a0 	.word	0x200005a0
 8005780:	080059c4 	.word	0x080059c4

08005784 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	0002      	movs	r2, r0
 800578c:	6039      	str	r1, [r7, #0]
 800578e:	1dfb      	adds	r3, r7, #7
 8005790:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8005792:	1dfb      	adds	r3, r7, #7
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d106      	bne.n	80057a8 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	4908      	ldr	r1, [pc, #32]	; (80057c0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800579e:	4b09      	ldr	r3, [pc, #36]	; (80057c4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80057a0:	0018      	movs	r0, r3
 80057a2:	f7fe ffb6 	bl	8004712 <USBD_GetString>
 80057a6:	e005      	b.n	80057b4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	4905      	ldr	r1, [pc, #20]	; (80057c0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80057ac:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 80057ae:	0018      	movs	r0, r3
 80057b0:	f7fe ffaf 	bl	8004712 <USBD_GetString>
  }
  return USBD_StrDesc;
 80057b4:	4b02      	ldr	r3, [pc, #8]	; (80057c0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80057b6:	0018      	movs	r0, r3
 80057b8:	46bd      	mov	sp, r7
 80057ba:	b002      	add	sp, #8
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	46c0      	nop			; (mov r8, r8)
 80057c0:	200005a0 	.word	0x200005a0
 80057c4:	080059d0 	.word	0x080059d0

080057c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80057ce:	4b10      	ldr	r3, [pc, #64]	; (8005810 <Get_SerialNum+0x48>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80057d4:	4b0f      	ldr	r3, [pc, #60]	; (8005814 <Get_SerialNum+0x4c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80057da:	4b0f      	ldr	r3, [pc, #60]	; (8005818 <Get_SerialNum+0x50>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	18d3      	adds	r3, r2, r3
 80057e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00b      	beq.n	8005806 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80057ee:	490b      	ldr	r1, [pc, #44]	; (800581c <Get_SerialNum+0x54>)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2208      	movs	r2, #8
 80057f4:	0018      	movs	r0, r3
 80057f6:	f000 f815 	bl	8005824 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80057fa:	4909      	ldr	r1, [pc, #36]	; (8005820 <Get_SerialNum+0x58>)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2204      	movs	r2, #4
 8005800:	0018      	movs	r0, r3
 8005802:	f000 f80f 	bl	8005824 <IntToUnicode>
  }
}
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	46bd      	mov	sp, r7
 800580a:	b004      	add	sp, #16
 800580c:	bd80      	pop	{r7, pc}
 800580e:	46c0      	nop			; (mov r8, r8)
 8005810:	1ffff7ac 	.word	0x1ffff7ac
 8005814:	1ffff7b0 	.word	0x1ffff7b0
 8005818:	1ffff7b4 	.word	0x1ffff7b4
 800581c:	200000f2 	.word	0x200000f2
 8005820:	20000102 	.word	0x20000102

08005824 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	1dfb      	adds	r3, r7, #7
 8005830:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8005832:	2117      	movs	r1, #23
 8005834:	187b      	adds	r3, r7, r1
 8005836:	2200      	movs	r2, #0
 8005838:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800583a:	187b      	adds	r3, r7, r1
 800583c:	2200      	movs	r2, #0
 800583e:	701a      	strb	r2, [r3, #0]
 8005840:	e02f      	b.n	80058a2 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	0f1b      	lsrs	r3, r3, #28
 8005846:	2b09      	cmp	r3, #9
 8005848:	d80d      	bhi.n	8005866 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	0f1b      	lsrs	r3, r3, #28
 800584e:	b2da      	uxtb	r2, r3
 8005850:	2317      	movs	r3, #23
 8005852:	18fb      	adds	r3, r7, r3
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	0019      	movs	r1, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	185b      	adds	r3, r3, r1
 800585e:	3230      	adds	r2, #48	; 0x30
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	e00c      	b.n	8005880 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	0f1b      	lsrs	r3, r3, #28
 800586a:	b2da      	uxtb	r2, r3
 800586c:	2317      	movs	r3, #23
 800586e:	18fb      	adds	r3, r7, r3
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	0019      	movs	r1, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	185b      	adds	r3, r3, r1
 800587a:	3237      	adds	r2, #55	; 0x37
 800587c:	b2d2      	uxtb	r2, r2
 800587e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005886:	2117      	movs	r1, #23
 8005888:	187b      	adds	r3, r7, r1
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	3301      	adds	r3, #1
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	18d3      	adds	r3, r2, r3
 8005894:	2200      	movs	r2, #0
 8005896:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005898:	187b      	adds	r3, r7, r1
 800589a:	781a      	ldrb	r2, [r3, #0]
 800589c:	187b      	adds	r3, r7, r1
 800589e:	3201      	adds	r2, #1
 80058a0:	701a      	strb	r2, [r3, #0]
 80058a2:	2317      	movs	r3, #23
 80058a4:	18fa      	adds	r2, r7, r3
 80058a6:	1dfb      	adds	r3, r7, #7
 80058a8:	7812      	ldrb	r2, [r2, #0]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d3c8      	bcc.n	8005842 <IntToUnicode+0x1e>
  }
}
 80058b0:	46c0      	nop			; (mov r8, r8)
 80058b2:	46bd      	mov	sp, r7
 80058b4:	b006      	add	sp, #24
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80058b8:	480d      	ldr	r0, [pc, #52]	; (80058f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80058ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80058bc:	480d      	ldr	r0, [pc, #52]	; (80058f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80058be:	490e      	ldr	r1, [pc, #56]	; (80058f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80058c0:	4a0e      	ldr	r2, [pc, #56]	; (80058fc <LoopForever+0xe>)
  movs r3, #0
 80058c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80058c4:	e002      	b.n	80058cc <LoopCopyDataInit>

080058c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058ca:	3304      	adds	r3, #4

080058cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058d0:	d3f9      	bcc.n	80058c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058d2:	4a0b      	ldr	r2, [pc, #44]	; (8005900 <LoopForever+0x12>)
  ldr r4, =_ebss
 80058d4:	4c0b      	ldr	r4, [pc, #44]	; (8005904 <LoopForever+0x16>)
  movs r3, #0
 80058d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058d8:	e001      	b.n	80058de <LoopFillZerobss>

080058da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058dc:	3204      	adds	r2, #4

080058de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058e0:	d3fb      	bcc.n	80058da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80058e2:	f7ff fb19 	bl	8004f18 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80058e6:	f000 f811 	bl	800590c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80058ea:	f7ff f9bb 	bl	8004c64 <main>

080058ee <LoopForever>:

LoopForever:
    b LoopForever
 80058ee:	e7fe      	b.n	80058ee <LoopForever>
  ldr   r0, =_estack
 80058f0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80058f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80058f8:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80058fc:	08005a6c 	.word	0x08005a6c
  ldr r2, =_sbss
 8005900:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8005904:	200007a0 	.word	0x200007a0

08005908 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005908:	e7fe      	b.n	8005908 <ADC1_COMP_IRQHandler>
	...

0800590c <__libc_init_array>:
 800590c:	b570      	push	{r4, r5, r6, lr}
 800590e:	2600      	movs	r6, #0
 8005910:	4d0c      	ldr	r5, [pc, #48]	; (8005944 <__libc_init_array+0x38>)
 8005912:	4c0d      	ldr	r4, [pc, #52]	; (8005948 <__libc_init_array+0x3c>)
 8005914:	1b64      	subs	r4, r4, r5
 8005916:	10a4      	asrs	r4, r4, #2
 8005918:	42a6      	cmp	r6, r4
 800591a:	d109      	bne.n	8005930 <__libc_init_array+0x24>
 800591c:	2600      	movs	r6, #0
 800591e:	f000 f821 	bl	8005964 <_init>
 8005922:	4d0a      	ldr	r5, [pc, #40]	; (800594c <__libc_init_array+0x40>)
 8005924:	4c0a      	ldr	r4, [pc, #40]	; (8005950 <__libc_init_array+0x44>)
 8005926:	1b64      	subs	r4, r4, r5
 8005928:	10a4      	asrs	r4, r4, #2
 800592a:	42a6      	cmp	r6, r4
 800592c:	d105      	bne.n	800593a <__libc_init_array+0x2e>
 800592e:	bd70      	pop	{r4, r5, r6, pc}
 8005930:	00b3      	lsls	r3, r6, #2
 8005932:	58eb      	ldr	r3, [r5, r3]
 8005934:	4798      	blx	r3
 8005936:	3601      	adds	r6, #1
 8005938:	e7ee      	b.n	8005918 <__libc_init_array+0xc>
 800593a:	00b3      	lsls	r3, r6, #2
 800593c:	58eb      	ldr	r3, [r5, r3]
 800593e:	4798      	blx	r3
 8005940:	3601      	adds	r6, #1
 8005942:	e7f2      	b.n	800592a <__libc_init_array+0x1e>
 8005944:	08005a64 	.word	0x08005a64
 8005948:	08005a64 	.word	0x08005a64
 800594c:	08005a64 	.word	0x08005a64
 8005950:	08005a68 	.word	0x08005a68

08005954 <memset>:
 8005954:	0003      	movs	r3, r0
 8005956:	1812      	adds	r2, r2, r0
 8005958:	4293      	cmp	r3, r2
 800595a:	d100      	bne.n	800595e <memset+0xa>
 800595c:	4770      	bx	lr
 800595e:	7019      	strb	r1, [r3, #0]
 8005960:	3301      	adds	r3, #1
 8005962:	e7f9      	b.n	8005958 <memset+0x4>

08005964 <_init>:
 8005964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596a:	bc08      	pop	{r3}
 800596c:	469e      	mov	lr, r3
 800596e:	4770      	bx	lr

08005970 <_fini>:
 8005970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005976:	bc08      	pop	{r3}
 8005978:	469e      	mov	lr, r3
 800597a:	4770      	bx	lr
